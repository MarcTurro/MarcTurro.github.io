{"config": {"indexing": "full", "lang": ["en"], "min_search_length": 3, "prebuild_index": false, "separator": "[\\s\\-]+"}, "docs": [{"location": "index.html", "text": "Num\u00e9riques et Sciences Informatiques", "title": "Accueil"}, {"location": "exempleCode.html", "text": "Premi\u00e8re NSI \u00b6 Programme de la classe \u00b6 Project layout \u00b6 Normalement \u00e7a marche! Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Est-ce aussi simple que cela? Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Code pour faire des annotations, (1) consectetur adipiscing elit. 1. :man_raising_hand: I'm an annotation! I can contain `code`, __formatted text__, images, ... basically anything that can be expressed in Markdown. Tab 1 Tab 2 C'est trop cool, (1) consectetur adipiscing elit. I'm an annotation! J'ai compris! (1){.annotate } 1. :woman_raising_hand: I'm an annotation as well! bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] terminale NSI \u00b6 Note Information the user should notice even if skimming. Tip Optional information to help a user be more successful. Important Essential information required for user success. Caution Negative potential consequences of an action. Warning Dangerous certain consequences of an action. Programme de la classe \u00b6 import tensorflow as tf The range () function is used to generate a sequence of numbers. Project layout \u00b6", "title": "Premi\u00e8re NSI"}, {"location": "exempleCode.html#premiere-nsi", "text": "", "title": "Premi\u00e8re NSI"}, {"location": "exempleCode.html#programme-de-la-classe", "text": "", "title": "Programme de la classe"}, {"location": "exempleCode.html#project-layout", "text": "Normalement \u00e7a marche! Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Est-ce aussi simple que cela? Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Code pour faire des annotations, (1) consectetur adipiscing elit. 1. :man_raising_hand: I'm an annotation! I can contain `code`, __formatted text__, images, ... basically anything that can be expressed in Markdown. Tab 1 Tab 2 C'est trop cool, (1) consectetur adipiscing elit. I'm an annotation! J'ai compris! (1){.annotate } 1. :woman_raising_hand: I'm an annotation as well! bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]", "title": "Project layout"}, {"location": "exempleCode.html#terminale-nsi", "text": "Note Information the user should notice even if skimming. Tip Optional information to help a user be more successful. Important Essential information required for user success. Caution Negative potential consequences of an action. Warning Dangerous certain consequences of an action.", "title": "terminale NSI"}, {"location": "exempleCode.html#programme-de-la-classe_1", "text": "import tensorflow as tf The range () function is used to generate a sequence of numbers.", "title": "Programme de la classe"}, {"location": "exempleCode.html#project-layout_1", "text": "", "title": "Project layout"}, {"location": "res_prem.html", "text": "Programme de la classe de Premi\u00e8re NSI Documents d'accompagnement ici", "title": "Programme Premi\u00e8re NSI"}, {"location": "res_term.html", "text": "Programme de la classe de Terminale NSI Documents d'accompagnement ici", "title": "Programme Terminale NSI"}, {"location": "ressources.html", "text": "Site pour apprendre \u00e0 faire du python futurecoder Site pour apprendre \u00e0 faire du mkdocs Site sympa pour apprendre l'algorithme et python pyrates Site pour utiliser les commandes bash de linux terminus Site pour utiliser une version ant\u00e9rieure de GPT: GPT3 Site pour r\u00e9cup\u00e9rer les donn\u00e9es que les g\u00e9ants du web ont sur vous: Respectemesdatas", "title": "Accueil"}, {"location": "ecolo/ecologie.html", "text": "Le saviez-vous? Aujourd'hui Internet pollue plus que l'aviation et bient\u00f4t que l'automobile! Cette page propose des contenus qui nous interrogent sur nos pratiques num\u00e9riques. Il y a des pollutions qui se voient et d'autres dont on ne soup\u00e7onnerait m\u00eame pas l'existence... Le streaming \u00b6 Quatre vid\u00e9os d'une courte dur\u00e9e sur l'origine du streaming, son d\u00e9ploiement et son impact \u00e9cologique, direct ou indirect... Voici le lien Arte TV La face cach\u00e9e du num\u00e9rique \u00b6 ...ou comment r\u00e9duire les impacts du num\u00e9riques sur l'environnement. Un document graphique propos\u00e9 par l'ADEME( Agence De l'Environnement et de la Ma\u00eetrise de l'Energie) ( T\u00e9l\u00e9charger le guide ) Le collectif greenIT \u00b6 Le collectif Green IT est un lieu de r\u00e9flexion sur les enjeux de la rencontre entre num\u00e9rique et d\u00e9veloppement durable, ce que l\u2019on appelle couramment le num\u00e9rique responsable ( site ). La fresque du num\u00e9rique \u00b6 Un atelier pour comprendre en \u00e9quipe et de mani\u00e8re ludique les enjeux environnementaux du num\u00e9rique ( site ).", "title": "Impact environnemental"}, {"location": "ecolo/ecologie.html#le-streaming", "text": "Quatre vid\u00e9os d'une courte dur\u00e9e sur l'origine du streaming, son d\u00e9ploiement et son impact \u00e9cologique, direct ou indirect... Voici le lien Arte TV", "title": "Le streaming"}, {"location": "ecolo/ecologie.html#la-face-cachee-du-numerique", "text": "...ou comment r\u00e9duire les impacts du num\u00e9riques sur l'environnement. Un document graphique propos\u00e9 par l'ADEME( Agence De l'Environnement et de la Ma\u00eetrise de l'Energie) ( T\u00e9l\u00e9charger le guide )", "title": "La face cach\u00e9e du num\u00e9rique"}, {"location": "ecolo/ecologie.html#le-collectif-greenit", "text": "Le collectif Green IT est un lieu de r\u00e9flexion sur les enjeux de la rencontre entre num\u00e9rique et d\u00e9veloppement durable, ce que l\u2019on appelle couramment le num\u00e9rique responsable ( site ).", "title": "Le collectif greenIT"}, {"location": "ecolo/ecologie.html#la-fresque-du-numerique", "text": "Un atelier pour comprendre en \u00e9quipe et de mani\u00e8re ludique les enjeux environnementaux du num\u00e9rique ( site ).", "title": "La fresque du num\u00e9rique"}, {"location": "maths/index.html", "text": "Disons-le! Faire du python c'est un m\u00e9tier!!! Comme une langue \u00e9trang\u00e8re, c'est en pratiquant qu'on augmente ces comp\u00e9tences et souvent cela passe par de grosses prises de t\u00eates! Alors soyez patients et indulgents!", "title": "Index"}, {"location": "maths/boucles.html", "text": "Bient\u00f4t...", "title": "Boucles"}, {"location": "maths/exercice_python.html", "text": "Une s\u00e9rie d'exercices \u00e0 r\u00e9aliser. R\u00e9flechissez \u00e0 la structure algorithmique avant de passer au codage \u00e0 proprement dit: de combien de variables ai-je besoin? de quel type de variable ai-je besoin? dois-je faire une boucle? y a t-il des conditions? Manipuler des listes On consid\u00e8re une liste quelconque L . Donner l'instruction qui permet d'afficher le premier \u00e9l\u00e9ment de la liste, le deuxi\u00e8me, le dernier. Donner les instructions qui permettent d'ajouter 1 \u00e0 tous les \u00e9l\u00e9ments de la liste. Donner les instructions qui permettent de d\u00e9caler d'un rang tous les \u00e9l\u00e9ments de la liste (le dernier revenant alors \u00e0 la premi\u00e8re position) Manipulation de listes bis Construire un programme qui calcule la somme des \u00e9l\u00e9ments d'une liste. Par exemple: >>> ma_liste1 = [ 1 , 5 , 6 ] # la somme vaut 1+5+6=12 >>> ma_liste2 = [ i for i in range ( 100 )] # la somme vaut 0+1+2+...+98+100=5050 Construire un programme qui calcule la somme des nombres pairs d'une liste d'entiers. Par exemple: >>> ma_liste1 = [ 1 , 5 , 6 ] # la somme vaut 7 >>> ma_liste2 = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] # la somme vaut 1+3+5+7=16 Simuler le lancer d'un d\u00e9 On souhaite simuler plusieurs lancers d'un m\u00eame d\u00e9. Donner l'instruction qui permet d'affecter \u00e0 une variable n , un entier saisi au clavier. Donner l'instruction qui permet d'affecter \u00e0 une variable de un nombre entier al\u00e9atoire entre 1 et 6. Donner les instructions python qui permettent de simuler n lancers d'un d\u00e9 \u00e0 six faces et de stocker les r\u00e9sultats dans une liste resultat . Plus dur! Donner les instructions python qui permettent de calculer la fr\u00e9quence de sortie de chaque face lorsque on jette n fois un d\u00e9. Course en folie! L\u00e9on et Peppa font une dr\u00f4le de course qui consiste \u00e0 parcourir six cases cons\u00e9cutives. Il lance un d\u00e9: si le d\u00e9 affiche 6, L\u00e9on avance de 6 cases et gagne la course sinon Peppa avance d'une case. Le gagnant est celui qui arrive le premier sur la derni\u00e8re case. Cr\u00e9er une s\u00e9rie d'instructions qui permet de simuler cette course. Utiliser ces instructions pour d\u00e9terminer la probabilit\u00e9 de gagner de chaque individu. descente dichotomique Tout le monde conna\u00eet le jeu du juste prix qui consiste \u00e0 trouver le bon prix par le jeu des questions r\u00e9ponses, c'est plus! , c'est moins! . Cr\u00e9er les instructions qui permettent: de choisir un entier alea entre 1 et n . de proposer un entier choix . d'afficher la comparaison de ces deux entiers et de recommencer jusqu'\u00e0 la bonne r\u00e9ponse. Cr\u00e9er les m\u00eames instructions mais cette fois-ci, l'ordinateur joue tout seul (c'est lui qui propose un nouveau nombre \u00e0 chaque fois !) Cr\u00e9er une nouvelle instruction qui compte le nombre de questions pos\u00e9es avant de trouver la bonne r\u00e9ponse Cr\u00e9er un graphique qui prend en abscisse le nombre n (choix maxi de alea ) et le nombre minimum de questions pos\u00e9es pour retrouver l'entier alea (comme pr\u00e9c\u00e9demment...) redescente dichotomique On consid\u00e8re la fonction \\(f\\) d\u00e9finie pour tout \\(x\\) dans \\(I = [0, 2]\\) par \\(f(x)=x^2-2\\) . Justifier qu'il existe une valeur \\(\\alpha\\) dans \\(I\\) telle que \\(f(\\alpha) = 0\\) Proposer une suite d'instructions qui permet de donner une valeur approch\u00e9e \u00e0 \\(10^{-8}\\) de \\(\\alpha\\) .", "title": "Exercice python"}, {"location": "maths/fonctions.html", "text": "Il y a divers paradigmes de programmation. Dans les premi\u00e8res manipulations, on fait du code imp\u00e9ratif qui consiste \u00e0 donner des ordres \u00e0 l'ordinateur qui les ex\u00e9cute alors... Par exemple, le code suivant: L = [ 8 , 5 , 6 , - 1 , 45 , 0 , 20 ] som = 0 for i in range ( len ( L )): som = som + L [ i ] donne les instructions qui permettent de calculer la somme des \u00e9l\u00e9ments d'une liste L quelconque. Mais finalement ce code ne change pas si on change la liste L : il aura toujours la vocation de calculer la somme des \u00e9l\u00e9ments de la liste propos\u00e9e en pr\u00e9ambule.... Des exemples: On visualise le c\u00f4t\u00e9 transformation des fonctions math\u00e9matiques On a donc : en entr\u00e9e une liste Python en sortie un nombre (entier ou d\u00e9cimal...) L'id\u00e9e qui nous int\u00e9resse est de reprendre le mod\u00e8le math\u00e9matique des fonctions qui transforment une donn\u00e9e en une autre. Un programme \\(f\\) qui ferait ceci: \\(f(Liste) = Somme\\) La syntaxe Python qui cr\u00e9e une fonction est donn\u00e9e par le code ci-contre: def somme_de_liste ( une_liste ): n = len ( une_liste ) som = 0 for i in range ( n ): som = som + une_liste [ i ] return som Cette fonction Python : est une fonction Python car est d\u00e9clar\u00e9e avec la particule def ; porte le nom implicite de somme_de_liste ( en snake case ); prend en param\u00e8tre la variable une_liste qui doit \u00eatre bien entendu une liste! retourne une valeur \u00e9gale \u00e0 la somme attendue. Comment on utilise cette fonction? C'est simple! On ex\u00e9cute le script qui contient cette fonction: elle est alors ajout\u00e9e aux outils disponibles. On peut l'utiliser dans le script ou dans la console... >>> l1 = [ 1 , 2 , 3 ] >>> somme_de_liste ( l1 ) >>> 6 #1 + 2 + 3 Dans la console, l'appel de la fonction sur la liste l1 retourne la valeur 6! Toute votre attention Il ne faut pas confondre le param\u00e8tre une_liste de la fonction qui est une variable locale \u00e0 la fonction et la variable globale l1 qui est une liste : lorsqu'on applique la fonction somme_de_liste \u00e0 la liste l1 , le param\u00e8tre une_liste pointe alors vers l'objet l1 et prend donc sa valeur! Le site Python Tutor permet de visualiser ce pointage. Visualisation sur Python Tutor La notion de variable locale ou globale n'est pas indispensable ici. Mais elle permet de comprendre certaines erreurs. Explorons le code (stupide...) suivant: a = 3 def f ( x ): #stupide car on le nom de la fonction est trop g\u00e9n\u00e9rique... a = x ** 2 return a f ( 5 ) print ( a ) D'apr\u00e8s vous que vaut la variable a apr\u00e8s l'ex\u00e9cution de ce code? \u00c0 savoir pour comprendre Il y a deux variables a : la premi\u00e8re est d\u00e9clar\u00e9e en dehors du corps de la fonction: elle est donc globale et vaut 3 la deuxi\u00e8me est d\u00e9clar\u00e9e dans la fonction: elle est locale et vaut le carr\u00e9 de la valeur prise par le param\u00e8tre x lors de l'appel de la fonction. L'affectation locale de a n'a pas d'effet sur la valeur globale a . Apr\u00e8s son ex\u00e9cution, ce code donne a=3 .... On dit que les variables n'ont pas la m\u00eame port\u00e9e... Dernier exemple rigolo avant de passer \u00e0 autre chose... Anticipez ce que va faire ce programme. Code R\u00e9ponse def multiplie_par_2 ( nombre ): i = 2 return nombre * 2 print ( i ) La variable i est locale \u00e0 la fonction et le programme principale n'a qu'une vision globale des variables et ne peut pas visualiser i dans le corps de la fonction : il ne peut donc pas savoir ce que vaut i et encore moins l'afficher. Python va donc lever une exception! Lorsqu'on programme avec des fonctions Python, on utilise un paradigme fonctionnel mais le d\u00e9veloppement de cette notion est r\u00e9serv\u00e9e aux experts... Une fonction, c'est quoi alors? Une fonction au sens informatique , est un ensemble d'instructions regroup\u00e9es en un seul nom qui prend en entr\u00e9e un ou plusieurs param\u00e8tres et qui retourne une valeur (ou autre chose...) L'avantage d'utiliser des fonctions est la factorisation des programmes! On encha\u00eene les fonctions sur une entr\u00e9e pour obtenir le r\u00e9sultat attendu. Un exemple! Extrait d'un cours de NSI Supposons coder un message \u00e0 la mani\u00e8re des soldats de Jules C\u00e9sar (ancien Empereur romain assez connu). Le principe est assez simple: un d\u00e9cale de trois rangs dans l'alphabet latin les lettres. A devient alors D , B devient C ,... puis X devient A , Y devient B et enfin Z pour C ! Les fonctions python suivante permettent ce codage: def carac_en_nombre ( carac ): \"\"\" donne le code num\u00e9rique du caract\u00e8re carac de la table ASCII a:97,b:98,... \"\"\" return ord ( carac ) def nombre_en_carac ( nbre ): \"\"\" donne le caract\u00e8re correspondant au nombre nbre de la table ASCII 97:a,98:b,... \"\"\" return chr ( nbre ) def decalage ( nbre , cle ): \"\"\" ajoute la valeur de cle au nombre nbr on travaille modulo 26 pour que les sommes restent dans l'intervalle [0; 25] les translations de 97 permettent de travailler dans l'intervalle [0,25] \"\"\" return ( nbre + cle - 97 ) % 26 + 97 def codage_cesar ( texte_origine ): texte_final = '' #chaine de caractere vide for elt in texte_origine : #on parcourt le message elt par elt texte_final = texte_final + nombre_en_carac ( decalage ( carac_en_nombre ( elt ), 3 )) return texte_final message = \"vous ne trouverez jamais la solution\" MESSAGE = codage_cesar ( message ) Quelques exercices \u00e0 faire sans mod\u00e9ration! \u00c0 faire Recopier les fonctions suivantes: a = 10 b = - 6 def somme ( x , y ): return x + y def prod ( x , y ): return x * y def puissance ( x , n ): return x ** n Avec ces fonctions, calculer: le produit de a par b la somme de a et 3 le produit de 15 par 148 \\(16^5\\) le produit de la somme de a et b avec a la puissance 4 de la somme du produit de b par 3 avec a. \u00c0 faire On consid\u00e8re la fonction mystere suivante: from random import randint def mystere ( nbre ): L = [] for i in range ( nbre ) L . append ( randint ( 0 , 6 )) return L Que fait cette fonction? Testez-l\u00e0. Modifiez cette fonction pour que les nombres obtenus soient compris entre 0 et 20. Modifiez cette fonction pour que les nombres al\u00e9atoires soient compris entre 0 et N , o\u00f9 N est pass\u00e9 en param\u00e8tre de la fonction. Cr\u00e9er une fonction moyenne_liste qui prend en param\u00e8tre une liste L et renvoie la moyenne des \u00e9l\u00e9ments de L . Que donnera alors l'instruction moyenne_liste(mystere(10)) ? et l'instruction mystere(moyenne_liste([1, 10])) ? \u00c0 faire \u00c9crire une fonction extreme qui prend en param\u00e8tre une liste et qui retourne la somme du premier et dernier \u00e9l\u00e9ment de la liste \u00c9crire une fonction deplace qui prend en param\u00e8tres une liste et un entier n plus petit que la longueur de la liste: cette fonction \u00e9change le premier \u00e9l\u00e9ment de la liste avec celui situ\u00e9 au rang n .", "title": "Fonctions"}, {"location": "maths/graphique.html", "text": "Faire des graphiques avec Python \u00b6 Pourquoi faire des graphiques? C'est une habitude pour visualiser une quantit\u00e9 de donn\u00e9es: en physique, on r\u00e9alise une exp\u00e9rience et on obtient des donn\u00e9es dans un tableau que l'on exploite pour faire un graphique. en maths, pour d\u00e9terminer la courbe repr\u00e9sentative d'une fonction \\(f\\) . en informatique, pour observer par exemple la r\u00e9partition des niveaux de gris dans une image en noir et blanc. ... Dans tous les cas, on utilisera la biblioth\u00e8que matplotlib qui offre tout un tas de possibilit\u00e9s pour faire un graphique. Niveau d'intensit\u00e9 Exp\u00e9rience faite en premi\u00e8re NSI. On prend une photo en noir et blanc (plus pr\u00e9cis\u00e9ment en niveau de gris...), celle pr\u00e9sent\u00e9e ci-dessous( puppy.png ), et on compte les pixels d'intensit\u00e9 0(noir), d'intensit\u00e9 1,... et d'intensit\u00e9 255. On stocke les r\u00e9sultats dans une liste. Le code suivant g\u00e9n\u00e8re l'histogramme. # import des biblioth\u00e8ques n\u00e9cessaires import matplotlib.pyplot as plt # pour les graphiques import numpy as np # pour g\u00e9n\u00e9rer des listes (np.arange) #liste L obtenue en parcourant tous les pixels de l'image puppy.png # il y a 1 pixel d'intensit\u00e9 0(totalement noir), il y a 1 pixel d'intensit\u00e9 1 # il y a 4 pixel d'intensit\u00e9 2, il y a 12 pixel d'intensit\u00e9 3, ... et 366 pixels d'intensit\u00e9 255(totalement blanc) L = [ 1 , 1 , 4 , 12 , 13 , 25 , 44 , 48 , 65 , 60 , 82 , 111 , 121 , 137 , 155 , 148 , 162 , 220 , 228 , 264 , 275 , 290 , 213 , 283 , 351 , 343 , 363 , 394 , 381 , 333 , 323 , 394 , 453 , 422 , 424 , 397 , 404 , 390 , 368 , 451 , 369 , 453 , 469 , 457 , 454 , 434 , 428 , 449 , 447 , 449 , 433 , 489 , 449 , 495 , 467 , 455 , 501 , 462 , 499 , 453 , 480 , 494 , 547 , 550 , 662 , 749 , 930 , 1119 , 1453 , 1281 , 1079 , 952 , 978 , 869 , 943 , 770 , 740 , 674 , 668 , 667 , 682 , 734 , 741 , 753 , 772 , 783 , 781 , 858 , 838 , 843 , 890 , 840 , 860 , 915 , 898 , 937 , 879 , 892 , 862 , 921 , 883 , 931 , 895 , 944 , 993 , 996 , 1006 , 1013 , 1071 , 1077 , 1105 , 1056 , 995 , 961 , 948 , 958 , 953 , 930 , 920 , 950 , 1034 , 1023 , 1108 , 1036 , 944 , 940 , 875 , 836 , 746 , 729 , 787 , 668 , 733 , 737 , 718 , 721 , 681 , 644 , 676 , 642 , 656 , 589 , 540 , 596 , 583 , 596 , 562 , 532 , 536 , 560 , 536 , 505 , 484 , 465 , 500 , 469 , 529 , 602 , 621 , 675 , 755 , 789 , 801 , 1104 , 1307 , 1299 , 1054 , 987 , 1086 , 1188 , 1239 , 1320 , 1533 , 1670 , 1679 , 1925 , 1646 , 1444 , 1310 , 1032 , 868 , 686 , 615 , 517 , 501 , 550 , 549 , 533 , 518 , 532 , 446 , 397 , 391 , 310 , 269 , 253 , 244 , 233 , 198 , 205 , 222 , 209 , 210 , 308 , 382 , 336 , 295 , 264 , 225 , 215 , 193 , 177 , 207 , 198 , 205 , 222 , 206 , 261 , 193 , 224 , 213 , 238 , 219 , 219 , 229 , 251 , 210 , 181 , 176 , 207 , 202 , 260 , 258 , 284 , 403 , 431 , 401 , 435 , 451 , 443 , 406 , 425 , 265 , 221 , 224 , 216 , 174 , 107 , 114 , 130 , 129 , 128 , 156 , 202 , 383 , 366 ] fig , ax = plt . subplots () #une figure et des axes x = [ i for i in range ( 256 )] #g\u00e9n\u00e9ration par compr\u00e9hension de la liste x = [0,1,2,...,254,255] y = L #liste ci-dessus ax . bar ( x , y , width = 1 , color = 'magenta' , edgecolor = \"red\" , linewidth = 0.7 ) # fait un histogramme avec en abscisse les valeurs de x et en ordonn\u00e9e les valeurs de y #x et y doivent \u00eatre de m\u00eame dimension!!!! ax . set ( xlim = ( 0 , 255 ), xticks = np . arange ( 0 , 255 , 50 ), ylim = ( 0 , 2000 ), yticks = np . arange ( 0 , 2000 , 200 )) # options qui d\u00e9finissent les graduations des axes ax . set_ylabel ( 'Nombre de pixels' ) ax . set_title ( f \"Histogramme de l'image puppy.png\" ) ax . set_xlabel ( 'Intensit\u00e9 de gris' ) plt . show () img . close () On obtient le joli graphique: \u00c0 retenir Pour tracer un graphique quelconque, il faut en g\u00e9n\u00e9ral une liste pour les abscisses et une pour les ordonn\u00e9es. Attention, ces deux listes doivent avoir le m\u00eame nombre d'\u00e9l\u00e9ments! La courbe repr\u00e9sentative d'une fonction math\u00e9matique Rien de plus simple! Il faut: une fonction \\(f\\) d\u00e9finie sur un intervalle \\(I\\) une liste en abscisse une liste en ordonn\u00e9e Puis on utilisera la m\u00e9thode .plot \u00e0 la place de .bar pour obtenir une courbe au lieu d'un histogramme... Par exemple voici le code python pour construire la courbe repr\u00e9sentative des fonctions \\(\\cos\\) et \\(\\sin\\) sur l'intervalle \\(I=[0, 2\\pi]\\) . Fonctions trigonom\u00e9triques ####### import biblioth\u00e8ques ############### import numpy as np import math import matplotlib.pyplot as plt ####### une figure et des axes ############ fig , ax = plt . subplots () ###### valeurs extr\u00eames en X et Y ######### x_min = 0 x_max = 2 * np . pi y_min = - 1 #valeur minimale du cos et sin y_max = 1 #valeur maximale du cos et sin ##### fonction cos et sin ################# def lesinus ( x ): return np . sin ( x ) def lecosinus ( x ): return np . cos ( x ) ##### g\u00e9n\u00e9ration de la liste des abscisses X = np . arange ( start = x_min , stop = x_max , step = 0.25 ) #### limite horizontale du graphique ###### plt . xlim ( x_min , x_max ) #### limite verticale du graphique ######## plt . ylim ( y_min , y_max ) ###### pour les grilles ################### grid_x_ticks = np . arange ( x_min , x_max , 0.5 ) grid_y_ticks = np . arange ( y_min , y_max , 0.25 ) ###### pour les graduations ax . set_xticks ( grid_x_ticks , minor = False ) ax . set_yticks ( grid_y_ticks , minor = False ) #### pour l'affichage de la grille ######## ax . grid ( which = 'both' ) ### construction des deux courbes # X est la premi\u00e8re liste et lesinus(X) est la deuxi\u00e8me plt . plot ( X , lesinus ( X ), color = 'red' , label = 'cos' ) plt . plot ( X , lecosinus ( X ), color = 'green' , label = 'sin' ) ##### pour la l\u00e9gende ##################### plt . xlabel ( r \"$x$ \" ) #syntaxe latex plt . ylabel ( r \" $\\sin(x)$ et $\\cos(x)$\" ) #syntaxe latex plt . legend () plt . title ( r \"Fonctions trigonom\u00e9triques \" ) plt . show () On obtient le graphique suivant:", "title": "Faire des graphiques avec Python"}, {"location": "maths/graphique.html#faire-des-graphiques-avec-python", "text": "Pourquoi faire des graphiques? C'est une habitude pour visualiser une quantit\u00e9 de donn\u00e9es: en physique, on r\u00e9alise une exp\u00e9rience et on obtient des donn\u00e9es dans un tableau que l'on exploite pour faire un graphique. en maths, pour d\u00e9terminer la courbe repr\u00e9sentative d'une fonction \\(f\\) . en informatique, pour observer par exemple la r\u00e9partition des niveaux de gris dans une image en noir et blanc. ... Dans tous les cas, on utilisera la biblioth\u00e8que matplotlib qui offre tout un tas de possibilit\u00e9s pour faire un graphique. Niveau d'intensit\u00e9 Exp\u00e9rience faite en premi\u00e8re NSI. On prend une photo en noir et blanc (plus pr\u00e9cis\u00e9ment en niveau de gris...), celle pr\u00e9sent\u00e9e ci-dessous( puppy.png ), et on compte les pixels d'intensit\u00e9 0(noir), d'intensit\u00e9 1,... et d'intensit\u00e9 255. On stocke les r\u00e9sultats dans une liste. Le code suivant g\u00e9n\u00e8re l'histogramme. # import des biblioth\u00e8ques n\u00e9cessaires import matplotlib.pyplot as plt # pour les graphiques import numpy as np # pour g\u00e9n\u00e9rer des listes (np.arange) #liste L obtenue en parcourant tous les pixels de l'image puppy.png # il y a 1 pixel d'intensit\u00e9 0(totalement noir), il y a 1 pixel d'intensit\u00e9 1 # il y a 4 pixel d'intensit\u00e9 2, il y a 12 pixel d'intensit\u00e9 3, ... et 366 pixels d'intensit\u00e9 255(totalement blanc) L = [ 1 , 1 , 4 , 12 , 13 , 25 , 44 , 48 , 65 , 60 , 82 , 111 , 121 , 137 , 155 , 148 , 162 , 220 , 228 , 264 , 275 , 290 , 213 , 283 , 351 , 343 , 363 , 394 , 381 , 333 , 323 , 394 , 453 , 422 , 424 , 397 , 404 , 390 , 368 , 451 , 369 , 453 , 469 , 457 , 454 , 434 , 428 , 449 , 447 , 449 , 433 , 489 , 449 , 495 , 467 , 455 , 501 , 462 , 499 , 453 , 480 , 494 , 547 , 550 , 662 , 749 , 930 , 1119 , 1453 , 1281 , 1079 , 952 , 978 , 869 , 943 , 770 , 740 , 674 , 668 , 667 , 682 , 734 , 741 , 753 , 772 , 783 , 781 , 858 , 838 , 843 , 890 , 840 , 860 , 915 , 898 , 937 , 879 , 892 , 862 , 921 , 883 , 931 , 895 , 944 , 993 , 996 , 1006 , 1013 , 1071 , 1077 , 1105 , 1056 , 995 , 961 , 948 , 958 , 953 , 930 , 920 , 950 , 1034 , 1023 , 1108 , 1036 , 944 , 940 , 875 , 836 , 746 , 729 , 787 , 668 , 733 , 737 , 718 , 721 , 681 , 644 , 676 , 642 , 656 , 589 , 540 , 596 , 583 , 596 , 562 , 532 , 536 , 560 , 536 , 505 , 484 , 465 , 500 , 469 , 529 , 602 , 621 , 675 , 755 , 789 , 801 , 1104 , 1307 , 1299 , 1054 , 987 , 1086 , 1188 , 1239 , 1320 , 1533 , 1670 , 1679 , 1925 , 1646 , 1444 , 1310 , 1032 , 868 , 686 , 615 , 517 , 501 , 550 , 549 , 533 , 518 , 532 , 446 , 397 , 391 , 310 , 269 , 253 , 244 , 233 , 198 , 205 , 222 , 209 , 210 , 308 , 382 , 336 , 295 , 264 , 225 , 215 , 193 , 177 , 207 , 198 , 205 , 222 , 206 , 261 , 193 , 224 , 213 , 238 , 219 , 219 , 229 , 251 , 210 , 181 , 176 , 207 , 202 , 260 , 258 , 284 , 403 , 431 , 401 , 435 , 451 , 443 , 406 , 425 , 265 , 221 , 224 , 216 , 174 , 107 , 114 , 130 , 129 , 128 , 156 , 202 , 383 , 366 ] fig , ax = plt . subplots () #une figure et des axes x = [ i for i in range ( 256 )] #g\u00e9n\u00e9ration par compr\u00e9hension de la liste x = [0,1,2,...,254,255] y = L #liste ci-dessus ax . bar ( x , y , width = 1 , color = 'magenta' , edgecolor = \"red\" , linewidth = 0.7 ) # fait un histogramme avec en abscisse les valeurs de x et en ordonn\u00e9e les valeurs de y #x et y doivent \u00eatre de m\u00eame dimension!!!! ax . set ( xlim = ( 0 , 255 ), xticks = np . arange ( 0 , 255 , 50 ), ylim = ( 0 , 2000 ), yticks = np . arange ( 0 , 2000 , 200 )) # options qui d\u00e9finissent les graduations des axes ax . set_ylabel ( 'Nombre de pixels' ) ax . set_title ( f \"Histogramme de l'image puppy.png\" ) ax . set_xlabel ( 'Intensit\u00e9 de gris' ) plt . show () img . close () On obtient le joli graphique: \u00c0 retenir Pour tracer un graphique quelconque, il faut en g\u00e9n\u00e9ral une liste pour les abscisses et une pour les ordonn\u00e9es. Attention, ces deux listes doivent avoir le m\u00eame nombre d'\u00e9l\u00e9ments! La courbe repr\u00e9sentative d'une fonction math\u00e9matique Rien de plus simple! Il faut: une fonction \\(f\\) d\u00e9finie sur un intervalle \\(I\\) une liste en abscisse une liste en ordonn\u00e9e Puis on utilisera la m\u00e9thode .plot \u00e0 la place de .bar pour obtenir une courbe au lieu d'un histogramme... Par exemple voici le code python pour construire la courbe repr\u00e9sentative des fonctions \\(\\cos\\) et \\(\\sin\\) sur l'intervalle \\(I=[0, 2\\pi]\\) . Fonctions trigonom\u00e9triques ####### import biblioth\u00e8ques ############### import numpy as np import math import matplotlib.pyplot as plt ####### une figure et des axes ############ fig , ax = plt . subplots () ###### valeurs extr\u00eames en X et Y ######### x_min = 0 x_max = 2 * np . pi y_min = - 1 #valeur minimale du cos et sin y_max = 1 #valeur maximale du cos et sin ##### fonction cos et sin ################# def lesinus ( x ): return np . sin ( x ) def lecosinus ( x ): return np . cos ( x ) ##### g\u00e9n\u00e9ration de la liste des abscisses X = np . arange ( start = x_min , stop = x_max , step = 0.25 ) #### limite horizontale du graphique ###### plt . xlim ( x_min , x_max ) #### limite verticale du graphique ######## plt . ylim ( y_min , y_max ) ###### pour les grilles ################### grid_x_ticks = np . arange ( x_min , x_max , 0.5 ) grid_y_ticks = np . arange ( y_min , y_max , 0.25 ) ###### pour les graduations ax . set_xticks ( grid_x_ticks , minor = False ) ax . set_yticks ( grid_y_ticks , minor = False ) #### pour l'affichage de la grille ######## ax . grid ( which = 'both' ) ### construction des deux courbes # X est la premi\u00e8re liste et lesinus(X) est la deuxi\u00e8me plt . plot ( X , lesinus ( X ), color = 'red' , label = 'cos' ) plt . plot ( X , lecosinus ( X ), color = 'green' , label = 'sin' ) ##### pour la l\u00e9gende ##################### plt . xlabel ( r \"$x$ \" ) #syntaxe latex plt . ylabel ( r \" $\\sin(x)$ et $\\cos(x)$\" ) #syntaxe latex plt . legend () plt . title ( r \"Fonctions trigonom\u00e9triques \" ) plt . show () On obtient le graphique suivant:", "title": "Faire des graphiques avec Python"}, {"location": "maths/intro.html", "text": "De bonnes pratiques \u00b6 Il existe de nombreux langages informatiques dont le r\u00f4le est de proposer une interface de communication entre l'homme et la machine. Python est un langage de haut niveau (c'est-\u00e0-dire que sa syntaxe est proche du langage humain \ud83d\ude00) qui poss\u00e8de ses r\u00e9gles d'\u00e9criture d\u00e9crites dans la PEP-8 . En particulier, on respectera les r\u00e8gles suivantes: On entoure d'espaces le signe = lors de l'affectation de variables On entoure d'espaces tous les signes d'op\u00e9rations +,-,*,... \u00c0 faire ou ne pas faire BIEN PAS BIEN a = 1 b = 2 nom = \"Hector\" if x > 2 : x = x + 2 a = 1 b = 2 nom = \"Hector\" if x > 2 : x = x + 2 Le langage python poss\u00e8de sa syntaxe propre mais n'est finalement qu'une traduction des id\u00e9es qui font de l'\u00eatre humain, un individu qui r\u00e9fl\u00e9chit! Avant tout, il est donc n\u00e9cessaire de r\u00e9fl\u00e9chir \u00e0 la fa\u00e7on dont un programme va nous permettre de r\u00e9soudre un probl\u00e8me : sa structure algorithmique est prioritaire sur l'\u00e9criture \u00e0 proprement dit du code. Pour \u00e9crire du code python , le bloc-note( \u00e9diteur de texte \u00e9l\u00e9mentaire de Windows...) suffirait. Il faudrait alors sauvegarder son code dans un fichier dont l'extension serait .py et utiliser l'ex\u00e9cutable de python (s'il est install\u00e9 ) pour lancer le script ainsi cr\u00e9\u00e9! Comme l'op\u00e9ration n'est pas \u00e9vidente, on pr\u00e9f\u00e9rera utiliser un logiciel d\u00e9di\u00e9 qui permet de tout faire en cachant la complexit\u00e9 des op\u00e9rations d'ex\u00e9cution \u00e0 l'utilisateur... Principalement, et quelque soit le logiciel utilis\u00e9, il existe: la zone d'\u00e9dition ou de script qui permet d'\u00e9crire et de l'\u00e9xecuter par la suite. Avantage: on peut conserver son code dans un fichier dont l'extension sera .py . la console ou le terminal qui permet de donner directement des ordres Ci-dessous, l'environnement propos\u00e9 par le logiciel Thonny : Tous les environnements pr\u00e9sentent les m\u00eames zones", "title": "De bonnes pratiques"}, {"location": "maths/intro.html#de-bonnes-pratiques", "text": "Il existe de nombreux langages informatiques dont le r\u00f4le est de proposer une interface de communication entre l'homme et la machine. Python est un langage de haut niveau (c'est-\u00e0-dire que sa syntaxe est proche du langage humain \ud83d\ude00) qui poss\u00e8de ses r\u00e9gles d'\u00e9criture d\u00e9crites dans la PEP-8 . En particulier, on respectera les r\u00e8gles suivantes: On entoure d'espaces le signe = lors de l'affectation de variables On entoure d'espaces tous les signes d'op\u00e9rations +,-,*,... \u00c0 faire ou ne pas faire BIEN PAS BIEN a = 1 b = 2 nom = \"Hector\" if x > 2 : x = x + 2 a = 1 b = 2 nom = \"Hector\" if x > 2 : x = x + 2 Le langage python poss\u00e8de sa syntaxe propre mais n'est finalement qu'une traduction des id\u00e9es qui font de l'\u00eatre humain, un individu qui r\u00e9fl\u00e9chit! Avant tout, il est donc n\u00e9cessaire de r\u00e9fl\u00e9chir \u00e0 la fa\u00e7on dont un programme va nous permettre de r\u00e9soudre un probl\u00e8me : sa structure algorithmique est prioritaire sur l'\u00e9criture \u00e0 proprement dit du code. Pour \u00e9crire du code python , le bloc-note( \u00e9diteur de texte \u00e9l\u00e9mentaire de Windows...) suffirait. Il faudrait alors sauvegarder son code dans un fichier dont l'extension serait .py et utiliser l'ex\u00e9cutable de python (s'il est install\u00e9 ) pour lancer le script ainsi cr\u00e9\u00e9! Comme l'op\u00e9ration n'est pas \u00e9vidente, on pr\u00e9f\u00e9rera utiliser un logiciel d\u00e9di\u00e9 qui permet de tout faire en cachant la complexit\u00e9 des op\u00e9rations d'ex\u00e9cution \u00e0 l'utilisateur... Principalement, et quelque soit le logiciel utilis\u00e9, il existe: la zone d'\u00e9dition ou de script qui permet d'\u00e9crire et de l'\u00e9xecuter par la suite. Avantage: on peut conserver son code dans un fichier dont l'extension sera .py . la console ou le terminal qui permet de donner directement des ordres Ci-dessous, l'environnement propos\u00e9 par le logiciel Thonny : Tous les environnements pr\u00e9sentent les m\u00eames zones", "title": "De bonnes pratiques"}, {"location": "maths/intro_python.html", "text": "Je fais du python et j'aime \u00e7a! \u00b6 Pour faire du python... il faut faire du python! Pour progresser il faut manipuler! Dans ce chapitre, vous trouverez des codes python que je vous demande de : manipuler et analyser modifier pour r\u00e9pondre \u00e0 nos besoins Python est un langage de haut niveau, proche du langage humain. Sans \u00eatre un expert, on peut facilement comprendre et analyser un programme python . La cr\u00e9ation de code vient en dernier lieu, lorsque on s'est bien impr\u00e9gn\u00e9 des routines pythonesque (grosso modo boucles et affectation...). La notion de fonction n'est pas aussi simple qu'on pourrait le croire et n\u00e9cessite une \u00e9tude particuli\u00e8re \u00e0 voir ici Un premier test \u00b6 \u00c0 faire 1 Ouvrez un IDLE comme Edupython ou Thonny et saisissez le code suivant dans la zone script: test = 10 # affectation de la variable \u00e0 10 for i in range ( 5 ): #une boucle permet de r\u00e9p\u00e9ter une m\u00eame (ou plusieurs) instruction: ici 5 fois test = test + 2 #incrementation de la variable test. print ( test ) #affichage dans la console Le r\u00e9sultat devrait s'afficher dans la console . Quelle diff\u00e9rence avec le programme suivant? test = 10 # affectation de la variable \u00e0 10 for i in range ( 5 ): #une boucle permet de r\u00e9p\u00e9ter une m\u00eame (ou plusieurs) instruction: ici 5 fois test = test + 2 #incrementation de la variable test. print ( test ) #affichage dans la console \u00c0 retenir! Le code s'\u00e9crit dans la zone script ou en console. Vous remarquerez dans les exemples pr\u00e9c\u00e9dents, la pr\u00e9sence d' espace avant et apr\u00e8s les signes d'op\u00e9rations: il faudra respecter cette r\u00e8gle dor\u00e9navant. L' indentation permet de d\u00e9finir les blocs d'instructions dans les boucles ou les conditions. G\u00e9n\u00e9rer du hasard \u00b6 Dans de nombreux cas, nous aurons besoin de simuler le hasard: plus pr\u00e9cis\u00e9ment, certaines variables devront \u00eatre affect\u00e9es avec une valeur al\u00e9atoire. On distingue en g\u00e9n\u00e9ral, les valeurs enti\u00e8res des valeurs d\u00e9cimales . Pour cela, il faut importer la biblioth\u00e8que qui g\u00e9n\u00e9re les nombres al\u00e9atoires: from random import randint Cette instruction n'importe que la m\u00e9thode randint : la biblioth\u00e8que random en contient d'autres que nous n'utiliserons pas ici! On consid\u00e8re le programme suivant: n = randint ( 0 , 100 ) mon_choix = int ( input ( \"proposez un nombre\" )) if n == mon_choix : print ( \"C'est gagn\u00e9\" ) else : if n > mon_choix print ( \"C'est plus\" ) else : print ( \"C'est moins\" ) \u00c0 faire 2 : Utiliser le hasard Que fait l'instruction randint(0, 100) ? Quelle est la diff\u00e9rence entre les instructions n = mon_choix et n == mon_choix ? \u00c0 quoi sert le int devant le input ? Commenter chaque instruction de ce code comme dans l'exemple test. Manipulations \u00b6 On donne le code suivant: #affecter des entiers a = 15 #affecter des flottants b = 10.8 #affecter des cha\u00eenes de caract\u00e8res c = \"c'est cool\" d = \"c'est g\u00e9nial\" e = \"c'est nul\" f = \"maths\" #affecter des listes g = [ \"HG\" , \"EPS\" , \"LV1\" , \"Philo\" ] #je suis une liste de cha\u00eenes de caract\u00e8res , des string! #affecter des autres trucs, inutiles dans notre contexte \u00c0 faire 3 Quels sont les types de variables utilis\u00e9es ou d\u00e9clar\u00e9es dans le code pr\u00e9c\u00e9dent? En g\u00e9n\u00e9ral, on donne des noms explicites aux variables: ces noms d\u00e9pendent bien entendu du contexte dans lequel elles sont utilis\u00e9es. Par exemple, on appelle jamais f une variable de type list mais plut\u00f4t l . Aussi, pourrait-on proc\u00e9der ainsi: note = 15 moyenne = 10.8 discipline_majeure = \"maths\" autres_disciplines = [ \"HG\" , \"EPS\" , \"LV1\" , \"Philo\" , \"Musique\" , \"Physique\" ] commentaires = [ \"c'est cool\" , \"c'est g\u00e9nial\" , \"c'est nul\" , \"c'est marrant\" ] note = note + 2 print ( note ) print ( discipline_majeure [ 2 ]) print ( autres_disciplines [ 3 ]) print ( autres_disciplines [ 6 ]) \u00c0 faire 4 Copiez et ex\u00e9cutez le code suivant. Un probl\u00e8me appara\u00eet: pourquoi? R\u00e9glez le probl\u00e8me. On peut am\u00e9liorer l'affichage dans la console par des affichages dynamiques. Nous utilisons par exemple des f-strings : \u00c0 faire 5 Ajouter un code pr\u00e9c\u00e9dent, les instructions suivantes: print ( f \"J'ai eu { note } en { discipline_majeure } \" ) listes_notes = [ randint ( 0 , 20 ) for i in range ( 10 )] print ( f \" J'ai eu { listes_notes [ randint ( 0 , 9 )] } en { autres_disciplines [ randint ( 0 , 3 )] } et { commentaires [ randint ( 0 , 3 )] } \" ) Ex\u00e9cutez plusieurs fois le code pour comprendre comment il fonctionne. Construire une f-string , qui donnerait par exemple: J'aime la Philo parce que c'est marrant R\u00e9p\u00e9ter des instructions: \u00b6 Il y a en g\u00e9n\u00e9ral deux fa\u00e7ons de r\u00e9p\u00e9ter des instructions. La boucle born\u00e9e for . \u00b6 Avec la boucle for , on peut choisir le nombre de fois o\u00f9 on r\u00e9p\u00e8te l'instruction. \u00c0 faire 6 Ajoutez au code pr\u00e9c\u00e9dent les instructions suivantes et ex\u00e9cutez ce programme: autant_de_fois_que_tu_veux = 10 for i in range ( autant_de_fois_que_tu_veux ): print ( f \" J'ai eu { listes_notes [ randint ( 0 , 9 )] } en { autres_disciplines [ randint ( 0 , 3 )] } \" ) La variable i est appel\u00e9e variable de boucle . L'instruction for i in range(10) affecte \u00e0 i les valeurs 0 puis 1 puis 2,... jusqu'\u00e0 9: il y a bien alors 10 affectations, donc 10 r\u00e9p\u00e9titions. En fait \u00e0 chaque que fois que la variable i prend une valeur, l'instruction de la boucle est ex\u00e9cut\u00e9e... \u00c0 faire 7 Pour visualiser comme \u00e9volue la variable i , compl\u00e9ter le code pr\u00e9c\u00e9dent comme indiqu\u00e9 ci-apr\u00e8s: autant_de_fois_que_tu_veux = 10 for i in range ( autant_de_fois_que_tu_veux ): print ( f \"Note { i + 1 } : J'ai eu { listes_notes [ randint ( 0 , 9 )] } en { autres_disciplines [ randint ( 0 , 3 )] } \" ) La boucle non born\u00e9e while . \u00b6 Souvent, on ne sait pas a priori combien de boucles sont n\u00e9cessaires pour obtenir un r\u00e9sultat. On utilise alors une boucle while qui permet de r\u00e9p\u00e9ter des instructions tant que une condition est v\u00e9rifi\u00e9e. Un exemple s = 0 cpt = 0 #pour compter le nombre d'actions while s < 100 : # la condition s < 100 est vrai au d\u00e9part: on rentre alors dans la boucle. s = s + 6 # s est incr\u00e9ment\u00e9 de 6 cpt = cpt + 1 #incr\u00e9mentation de la variable cpt Boucle infinie! Une erreur classique consiste \u00e0 cr\u00e9er des boucles infinies. Si la condition du while ne devient pas fausse dans l'ex\u00e9cution du programme, la boucle tourne \u00e0 l'infini! Les listes ou les tableaux... \u00b6 Les variables de type int servent \u00e0 conserver en m\u00e9moire des entiers alors que les flottants sont utilis\u00e9s pour les nombres d\u00e9cimaux. Mais parfois, il faut garder en m\u00e9moire toute une s\u00e9rie de valeur. On utilise pour cela des listes . G\u00e9n\u00e9rer des listes \u00b6 Pour construire des listes, on peut proc\u00e9der de plusieurs fa\u00e7ons, d\u00e9crites dans l'exercice suivant. \u00c0 faire 8 Copiez le code suivant et ex\u00e9cutez-le: ma_liste_1 = [] # creation d'une liste vide for i in range ( 10 ): ma_liste_1 . append ( i ** 2 ) # \u00e0 chaque tour de boucle on ajoute \u00e0 la fin de la liste le carr\u00e9 de i Faites affichez la liste obtenue dans la console. Copiez et ex\u00e9cutez le code suivant: from random import randint ma_liste_2 = [ randint ( 0 , 100 ) for i range ( 500 )] # construction par compr\u00e9hension de 500 entiers al\u00e9atoires entre 0 et 100 Bien entendu, on peut construire une liste \u00e0 la main mais c'est plus long et... peu coh\u00e9rent avec les pratiques scientifiques et informatiques! ma_liste_3 = [ 5 , 89 , 21 , - 1 , 0 ] Faites affichez la liste dans la console. Acc\u00e9der aux \u00e9l\u00e9ments d'une liste \u00b6 Une liste \u00e9tant d\u00e9finie, on acc\u00e8de \u00e0 ces \u00e9l\u00e9ments gr\u00e2ce \u00e0 son indice : le premier est d'indice 0 et le dernier d'indice len(ma_liste_1) - 1 o\u00f9 l'instruction len(ma_liste_1) retourne le nombre d'\u00e9l\u00e9ments de la liste. Le d\u00e9calage entre le nombre d'\u00e9l\u00e9ments d'une liste et l'indice d'un \u00e9l\u00e9ment est courant en math\u00e9matique et d\u00fb au fait que les indices commen\u00e7ent \u00e0 0! Routines habituelles ma_liste_3 = [ 5 , 89 , 21 , - 1 , 0 ] print ( ma_liste_3 [ 0 ]) # affiche le premier \u00e9l\u00e9ment de la liste (5 ici) print ( ma_liste_3 [ 3 ]) # affiche l'\u00e9l\u00e9ment situ\u00e9 au rang 3 soit -1 print ( ma_liste_3 [ 5 ]) # erreur! il n'y a pas d'\u00e9l\u00e9ment au rang 5. Ces routines permettent l'acc\u00e8s \u00e0 un \u00e9l\u00e9ment de la liste. Mais on peut aussi utiliser une boucle pour afficher les \u00e9l\u00e9ments un par un... for i in range ( len ( ma_liste_3 )): print ( ma_liste_3 [ i ]) Une liste est un objet mutable : on peut modifier son contenu. Modification d'un \u00e9l\u00e9ment ma_liste_2 [ 10 ] = 56 #re-affectation de l'\u00e9l\u00e9ment d'indice 10 de la liste ma_liste_2 Mieux encore! On peut modifier tous les \u00e9l\u00e9ments d'une liste en combinant les routines pr\u00e9c\u00e9dentes. Modifier tous les \u00e9l\u00e9ments d'une liste ma_liste = [ randint ( 0 , 10 ) for i in range ( 50 )] # liste de 50 entiers choisis au hasard for i in range ( len ( ma_liste )): ma_liste [ i ] = 2 * ma_liste [ i ] - 1 # re-affectation de tous les \u00e9l\u00e9ments de la liste Conclusion \u00b6 \u00c0 retenir Un langage informatique manipule des variables qui ont des types diff\u00e9rents et des valeurs correspondantes : int , float , str , list sont les types que nous avons d\u00e9couverts dans ce travail. Sachez qu'il en existe bien d'autres. \u00c0 chaque type correspond une fa\u00e7on (parfois plusieurs...) de les cr\u00e9er, les modifier ou les afficher. Il faut conna\u00eetre ses routines dont les principales ont \u00e9t\u00e9 pr\u00e9sent\u00e9es ci-dessus!", "title": "Je fais du python et j'aime \u00e7a!"}, {"location": "maths/intro_python.html#je-fais-du-python-et-jaime-ca", "text": "Pour faire du python... il faut faire du python! Pour progresser il faut manipuler! Dans ce chapitre, vous trouverez des codes python que je vous demande de : manipuler et analyser modifier pour r\u00e9pondre \u00e0 nos besoins Python est un langage de haut niveau, proche du langage humain. Sans \u00eatre un expert, on peut facilement comprendre et analyser un programme python . La cr\u00e9ation de code vient en dernier lieu, lorsque on s'est bien impr\u00e9gn\u00e9 des routines pythonesque (grosso modo boucles et affectation...). La notion de fonction n'est pas aussi simple qu'on pourrait le croire et n\u00e9cessite une \u00e9tude particuli\u00e8re \u00e0 voir ici", "title": "Je fais du python et j'aime \u00e7a!"}, {"location": "maths/intro_python.html#un-premier-test", "text": "\u00c0 faire 1 Ouvrez un IDLE comme Edupython ou Thonny et saisissez le code suivant dans la zone script: test = 10 # affectation de la variable \u00e0 10 for i in range ( 5 ): #une boucle permet de r\u00e9p\u00e9ter une m\u00eame (ou plusieurs) instruction: ici 5 fois test = test + 2 #incrementation de la variable test. print ( test ) #affichage dans la console Le r\u00e9sultat devrait s'afficher dans la console . Quelle diff\u00e9rence avec le programme suivant? test = 10 # affectation de la variable \u00e0 10 for i in range ( 5 ): #une boucle permet de r\u00e9p\u00e9ter une m\u00eame (ou plusieurs) instruction: ici 5 fois test = test + 2 #incrementation de la variable test. print ( test ) #affichage dans la console \u00c0 retenir! Le code s'\u00e9crit dans la zone script ou en console. Vous remarquerez dans les exemples pr\u00e9c\u00e9dents, la pr\u00e9sence d' espace avant et apr\u00e8s les signes d'op\u00e9rations: il faudra respecter cette r\u00e8gle dor\u00e9navant. L' indentation permet de d\u00e9finir les blocs d'instructions dans les boucles ou les conditions.", "title": "Un premier test"}, {"location": "maths/intro_python.html#generer-du-hasard", "text": "Dans de nombreux cas, nous aurons besoin de simuler le hasard: plus pr\u00e9cis\u00e9ment, certaines variables devront \u00eatre affect\u00e9es avec une valeur al\u00e9atoire. On distingue en g\u00e9n\u00e9ral, les valeurs enti\u00e8res des valeurs d\u00e9cimales . Pour cela, il faut importer la biblioth\u00e8que qui g\u00e9n\u00e9re les nombres al\u00e9atoires: from random import randint Cette instruction n'importe que la m\u00e9thode randint : la biblioth\u00e8que random en contient d'autres que nous n'utiliserons pas ici! On consid\u00e8re le programme suivant: n = randint ( 0 , 100 ) mon_choix = int ( input ( \"proposez un nombre\" )) if n == mon_choix : print ( \"C'est gagn\u00e9\" ) else : if n > mon_choix print ( \"C'est plus\" ) else : print ( \"C'est moins\" ) \u00c0 faire 2 : Utiliser le hasard Que fait l'instruction randint(0, 100) ? Quelle est la diff\u00e9rence entre les instructions n = mon_choix et n == mon_choix ? \u00c0 quoi sert le int devant le input ? Commenter chaque instruction de ce code comme dans l'exemple test.", "title": "G\u00e9n\u00e9rer du hasard"}, {"location": "maths/intro_python.html#manipulations", "text": "On donne le code suivant: #affecter des entiers a = 15 #affecter des flottants b = 10.8 #affecter des cha\u00eenes de caract\u00e8res c = \"c'est cool\" d = \"c'est g\u00e9nial\" e = \"c'est nul\" f = \"maths\" #affecter des listes g = [ \"HG\" , \"EPS\" , \"LV1\" , \"Philo\" ] #je suis une liste de cha\u00eenes de caract\u00e8res , des string! #affecter des autres trucs, inutiles dans notre contexte \u00c0 faire 3 Quels sont les types de variables utilis\u00e9es ou d\u00e9clar\u00e9es dans le code pr\u00e9c\u00e9dent? En g\u00e9n\u00e9ral, on donne des noms explicites aux variables: ces noms d\u00e9pendent bien entendu du contexte dans lequel elles sont utilis\u00e9es. Par exemple, on appelle jamais f une variable de type list mais plut\u00f4t l . Aussi, pourrait-on proc\u00e9der ainsi: note = 15 moyenne = 10.8 discipline_majeure = \"maths\" autres_disciplines = [ \"HG\" , \"EPS\" , \"LV1\" , \"Philo\" , \"Musique\" , \"Physique\" ] commentaires = [ \"c'est cool\" , \"c'est g\u00e9nial\" , \"c'est nul\" , \"c'est marrant\" ] note = note + 2 print ( note ) print ( discipline_majeure [ 2 ]) print ( autres_disciplines [ 3 ]) print ( autres_disciplines [ 6 ]) \u00c0 faire 4 Copiez et ex\u00e9cutez le code suivant. Un probl\u00e8me appara\u00eet: pourquoi? R\u00e9glez le probl\u00e8me. On peut am\u00e9liorer l'affichage dans la console par des affichages dynamiques. Nous utilisons par exemple des f-strings : \u00c0 faire 5 Ajouter un code pr\u00e9c\u00e9dent, les instructions suivantes: print ( f \"J'ai eu { note } en { discipline_majeure } \" ) listes_notes = [ randint ( 0 , 20 ) for i in range ( 10 )] print ( f \" J'ai eu { listes_notes [ randint ( 0 , 9 )] } en { autres_disciplines [ randint ( 0 , 3 )] } et { commentaires [ randint ( 0 , 3 )] } \" ) Ex\u00e9cutez plusieurs fois le code pour comprendre comment il fonctionne. Construire une f-string , qui donnerait par exemple: J'aime la Philo parce que c'est marrant", "title": "Manipulations"}, {"location": "maths/intro_python.html#repeter-des-instructions", "text": "Il y a en g\u00e9n\u00e9ral deux fa\u00e7ons de r\u00e9p\u00e9ter des instructions.", "title": "R\u00e9p\u00e9ter des instructions:"}, {"location": "maths/intro_python.html#la-boucle-bornee-for", "text": "Avec la boucle for , on peut choisir le nombre de fois o\u00f9 on r\u00e9p\u00e8te l'instruction. \u00c0 faire 6 Ajoutez au code pr\u00e9c\u00e9dent les instructions suivantes et ex\u00e9cutez ce programme: autant_de_fois_que_tu_veux = 10 for i in range ( autant_de_fois_que_tu_veux ): print ( f \" J'ai eu { listes_notes [ randint ( 0 , 9 )] } en { autres_disciplines [ randint ( 0 , 3 )] } \" ) La variable i est appel\u00e9e variable de boucle . L'instruction for i in range(10) affecte \u00e0 i les valeurs 0 puis 1 puis 2,... jusqu'\u00e0 9: il y a bien alors 10 affectations, donc 10 r\u00e9p\u00e9titions. En fait \u00e0 chaque que fois que la variable i prend une valeur, l'instruction de la boucle est ex\u00e9cut\u00e9e... \u00c0 faire 7 Pour visualiser comme \u00e9volue la variable i , compl\u00e9ter le code pr\u00e9c\u00e9dent comme indiqu\u00e9 ci-apr\u00e8s: autant_de_fois_que_tu_veux = 10 for i in range ( autant_de_fois_que_tu_veux ): print ( f \"Note { i + 1 } : J'ai eu { listes_notes [ randint ( 0 , 9 )] } en { autres_disciplines [ randint ( 0 , 3 )] } \" )", "title": "La boucle born\u00e9e for."}, {"location": "maths/intro_python.html#la-boucle-non-bornee-while", "text": "Souvent, on ne sait pas a priori combien de boucles sont n\u00e9cessaires pour obtenir un r\u00e9sultat. On utilise alors une boucle while qui permet de r\u00e9p\u00e9ter des instructions tant que une condition est v\u00e9rifi\u00e9e. Un exemple s = 0 cpt = 0 #pour compter le nombre d'actions while s < 100 : # la condition s < 100 est vrai au d\u00e9part: on rentre alors dans la boucle. s = s + 6 # s est incr\u00e9ment\u00e9 de 6 cpt = cpt + 1 #incr\u00e9mentation de la variable cpt Boucle infinie! Une erreur classique consiste \u00e0 cr\u00e9er des boucles infinies. Si la condition du while ne devient pas fausse dans l'ex\u00e9cution du programme, la boucle tourne \u00e0 l'infini!", "title": "La boucle non born\u00e9e while."}, {"location": "maths/intro_python.html#les-listes-ou-les-tableaux", "text": "Les variables de type int servent \u00e0 conserver en m\u00e9moire des entiers alors que les flottants sont utilis\u00e9s pour les nombres d\u00e9cimaux. Mais parfois, il faut garder en m\u00e9moire toute une s\u00e9rie de valeur. On utilise pour cela des listes .", "title": "Les listes ou les tableaux..."}, {"location": "maths/intro_python.html#generer-des-listes", "text": "Pour construire des listes, on peut proc\u00e9der de plusieurs fa\u00e7ons, d\u00e9crites dans l'exercice suivant. \u00c0 faire 8 Copiez le code suivant et ex\u00e9cutez-le: ma_liste_1 = [] # creation d'une liste vide for i in range ( 10 ): ma_liste_1 . append ( i ** 2 ) # \u00e0 chaque tour de boucle on ajoute \u00e0 la fin de la liste le carr\u00e9 de i Faites affichez la liste obtenue dans la console. Copiez et ex\u00e9cutez le code suivant: from random import randint ma_liste_2 = [ randint ( 0 , 100 ) for i range ( 500 )] # construction par compr\u00e9hension de 500 entiers al\u00e9atoires entre 0 et 100 Bien entendu, on peut construire une liste \u00e0 la main mais c'est plus long et... peu coh\u00e9rent avec les pratiques scientifiques et informatiques! ma_liste_3 = [ 5 , 89 , 21 , - 1 , 0 ] Faites affichez la liste dans la console.", "title": "G\u00e9n\u00e9rer des listes"}, {"location": "maths/intro_python.html#acceder-aux-elements-dune-liste", "text": "Une liste \u00e9tant d\u00e9finie, on acc\u00e8de \u00e0 ces \u00e9l\u00e9ments gr\u00e2ce \u00e0 son indice : le premier est d'indice 0 et le dernier d'indice len(ma_liste_1) - 1 o\u00f9 l'instruction len(ma_liste_1) retourne le nombre d'\u00e9l\u00e9ments de la liste. Le d\u00e9calage entre le nombre d'\u00e9l\u00e9ments d'une liste et l'indice d'un \u00e9l\u00e9ment est courant en math\u00e9matique et d\u00fb au fait que les indices commen\u00e7ent \u00e0 0! Routines habituelles ma_liste_3 = [ 5 , 89 , 21 , - 1 , 0 ] print ( ma_liste_3 [ 0 ]) # affiche le premier \u00e9l\u00e9ment de la liste (5 ici) print ( ma_liste_3 [ 3 ]) # affiche l'\u00e9l\u00e9ment situ\u00e9 au rang 3 soit -1 print ( ma_liste_3 [ 5 ]) # erreur! il n'y a pas d'\u00e9l\u00e9ment au rang 5. Ces routines permettent l'acc\u00e8s \u00e0 un \u00e9l\u00e9ment de la liste. Mais on peut aussi utiliser une boucle pour afficher les \u00e9l\u00e9ments un par un... for i in range ( len ( ma_liste_3 )): print ( ma_liste_3 [ i ]) Une liste est un objet mutable : on peut modifier son contenu. Modification d'un \u00e9l\u00e9ment ma_liste_2 [ 10 ] = 56 #re-affectation de l'\u00e9l\u00e9ment d'indice 10 de la liste ma_liste_2 Mieux encore! On peut modifier tous les \u00e9l\u00e9ments d'une liste en combinant les routines pr\u00e9c\u00e9dentes. Modifier tous les \u00e9l\u00e9ments d'une liste ma_liste = [ randint ( 0 , 10 ) for i in range ( 50 )] # liste de 50 entiers choisis au hasard for i in range ( len ( ma_liste )): ma_liste [ i ] = 2 * ma_liste [ i ] - 1 # re-affectation de tous les \u00e9l\u00e9ments de la liste", "title": "Acc\u00e9der aux \u00e9l\u00e9ments d'une liste"}, {"location": "maths/intro_python.html#conclusion", "text": "\u00c0 retenir Un langage informatique manipule des variables qui ont des types diff\u00e9rents et des valeurs correspondantes : int , float , str , list sont les types que nous avons d\u00e9couverts dans ce travail. Sachez qu'il en existe bien d'autres. \u00c0 chaque type correspond une fa\u00e7on (parfois plusieurs...) de les cr\u00e9er, les modifier ou les afficher. Il faut conna\u00eetre ses routines dont les principales ont \u00e9t\u00e9 pr\u00e9sent\u00e9es ci-dessus!", "title": "Conclusion"}, {"location": "maths/jefaisdupython.html", "text": "Je fais du python et j'aime \u00e7a! \u00b6 Pour faire du python... il faut faire du python! Inutile de potasser tous les bons cours trouv\u00e9s sur le web , pour progresser il faut manipuler! Dans ce chapitre, vous trouverez des codes python que je vous demande de : manipuler et analyser modifier pour r\u00e9pondre \u00e0 nos besoins La cr\u00e9ation de code vient en dernier lieu, lorsque on s'est bien impr\u00e9gn\u00e9 des routines pythonesque (grosso modo boucles et affectation...). La notion de fonction n'est pas aussi simple qu'on pourrait le croire et n\u00e9cessite une \u00e9tude particuli\u00e8re \u00e0 voir ici G\u00e9n\u00e9rer du hasard \u00b6 Dans de nombreux cas, nous aurons besoin de simuler le hasard:plus pr\u00e9cis\u00e9ment, certaines variables devront \u00eatre affect\u00e9es avec une valeur al\u00e9atoire. On distingue en g\u00e9n\u00e9ral, les valeurs enti\u00e8res des valeurs d\u00e9cimales . Pour cela, il faut importer la biblioth\u00e8que qui g\u00e9n\u00e9re les nombres al\u00e9atoires: from random import randint Cette instruction n'importe que la m\u00e9thode randint : la biblioth\u00e8que random en contient d'autres que nous n'utiliserons pas ici! On consid\u00e8re le programme suivant: n = randint ( 0 , 100 ) mon_choix = int ( input ( \"proposez un nombre\" )) if n == mon_choix : print ( \"C'est gagn\u00e9\" ) else : if n > mon_choix print ( \"C'est plus\" ) else : print ( \"C'est moins\" ) \u00c0 faire : Utiliser le hasard Quelle est la diff\u00e9rence entre les instructions n = mon_choix et n == mon_choix ? \u00c0 quoi sert le int devant le imput ? 3.", "title": "Je fais du python et j'aime \u00e7a!"}, {"location": "maths/jefaisdupython.html#je-fais-du-python-et-jaime-ca", "text": "Pour faire du python... il faut faire du python! Inutile de potasser tous les bons cours trouv\u00e9s sur le web , pour progresser il faut manipuler! Dans ce chapitre, vous trouverez des codes python que je vous demande de : manipuler et analyser modifier pour r\u00e9pondre \u00e0 nos besoins La cr\u00e9ation de code vient en dernier lieu, lorsque on s'est bien impr\u00e9gn\u00e9 des routines pythonesque (grosso modo boucles et affectation...). La notion de fonction n'est pas aussi simple qu'on pourrait le croire et n\u00e9cessite une \u00e9tude particuli\u00e8re \u00e0 voir ici", "title": "Je fais du python et j'aime \u00e7a!"}, {"location": "maths/jefaisdupython.html#generer-du-hasard", "text": "Dans de nombreux cas, nous aurons besoin de simuler le hasard:plus pr\u00e9cis\u00e9ment, certaines variables devront \u00eatre affect\u00e9es avec une valeur al\u00e9atoire. On distingue en g\u00e9n\u00e9ral, les valeurs enti\u00e8res des valeurs d\u00e9cimales . Pour cela, il faut importer la biblioth\u00e8que qui g\u00e9n\u00e9re les nombres al\u00e9atoires: from random import randint Cette instruction n'importe que la m\u00e9thode randint : la biblioth\u00e8que random en contient d'autres que nous n'utiliserons pas ici! On consid\u00e8re le programme suivant: n = randint ( 0 , 100 ) mon_choix = int ( input ( \"proposez un nombre\" )) if n == mon_choix : print ( \"C'est gagn\u00e9\" ) else : if n > mon_choix print ( \"C'est plus\" ) else : print ( \"C'est moins\" ) \u00c0 faire : Utiliser le hasard Quelle est la diff\u00e9rence entre les instructions n = mon_choix et n == mon_choix ? \u00c0 quoi sert le int devant le imput ? 3.", "title": "G\u00e9n\u00e9rer du hasard"}, {"location": "maths/listes.html", "text": "Des types pas tr\u00e8s clairs! \u00b6 Les variables ont des types . Leur cr\u00e9ation affecte une valeur dont le type peut-\u00eatre \u00e0 la louche: un nombre: un int ou un float . Pour faire simple, soit on affecte un nombre entier soit un nombre d\u00e9cimal( il existe d'autres types dont nous ne parlerons pas ici) une cha\u00eene de caract\u00e8res ou string pour faire court. C'est un texte contenu dans une cha\u00eene qui se d\u00e9clare entre deux quotes ( \" ...\"\" ). Ces deux types sont incortournables. Pourquoi est-ce essentiel de conna\u00eetre le type de la variable? Des m\u00e9thodes sont permises selon le type de variables. Par exemple, on peut appliquer la m\u00e9thode upper \u00e0 une cha\u00eene de caract\u00e8res mais pas \u00e0 un nombre. En plus les effets des op\u00e9rations peuvent changer selon le type de la variable. Par exemple, le symbole + est le symbole d'addition naturelle pour les varaibles de types nombres et le symbole de concat\u00e9nation pour les cha\u00eenes de carcat\u00e8res: nbre1 = 10 #type int nbre2 = 5 #type int phrase1 = \"bon\" #type str phrase2 = \"jour\" #type str nbre = nbre1 + nbre2 #nbre vaut 15 phrase = phrase1 + phrase2 #phrase vaut \"bonjour\" phrase . upper () #phrase vaut alors \"BONJOUR\" Mais ces deux types ne suffisent pas en g\u00e9n\u00e9ral pour r\u00e9pondre \u00e0 tous nos besoins. En particulier, le besoin de conserver dans une seule variable, plusieurs valeurs obtenues par exemple par simulation, est important. Nous allons d\u00e9finir une variable particuli\u00e8re appel\u00e9e liste . Un tableau , une liste. \u00b6 De quoi s'agit-il? Une liste est une s\u00e9quence ordonn\u00e9e de valeurs dont l'acc\u00e8s se fait par son indice. Voici par exemple un tableau classique de nombres: Appelons T ce tableau, cette liste. Alors: la valeur situ\u00e9 au rang 0 de T est 10 la valeur situ\u00e9 au rang 1 de T est 2 la valeur situ\u00e9 au rang 2 de T est 8 la valeur situ\u00e9 au rang 6 de T n'existe pas ! Comment d\u00e9clarer un tableau, une liste en Python? Une liste en python se d\u00e9clare par des crochets. Par exemple, pour notre tableau pr\u00e9c\u00e9dent: T = [ 10 , 2 , 8 , 205 , - 1 , 0 ] Tableau ou liste Le langage Python appelle les tableaux liste et cr\u00e9e une confusion dans ce qu'est r\u00e9ellement un tableau en informatique. Comme les diff\u00e9rents types de variables \u00e9voqu\u00e9es en pr\u00e9ambule, il existe des m\u00e9thodes propores aux listes que nous allons pr\u00e9senter ici. Acc\u00e8s aux \u00e9l\u00e9ments de la liste(op\u00e9ration de lecture) On peut acc\u00e8der aux valeurs des \u00e9l\u00e9ments de la liste par la connaissance de son rang, son indice. Ainsi: T = [ 10 , 2 , 8 , 205 , - 1 , 0 ] print ( T [ 0 ]) # affiche le premier \u00e9l\u00e9ment de la liste T, soit 10 print ( T [ 4 ]) # affiche le cinqui\u00e8me \u00e9l\u00e9ment de la liste T, soit 0 Attention, si le tableau contient n \u00e9l\u00e9ments, les indices vont alors de 0(le premier) \u00e0 n-1 (le dernier). Si vous donnez un indice en dehors de cette plage vous, retourverez la fameuse exception lev\u00e9e par python: Modification des \u00e9l\u00e9ments de la liste(op\u00e9ration d'\u00e9criture') On peut modifier les valeurs des \u00e9l\u00e9ments de la liste par la connaissance de son rang, son indice en r\u00e9affectant la valeur souhait\u00e9e. Ainsi: T = [ 10 , 2 , 8 , 205 , - 1 , 0 ] T [ 0 ] = 4 #modifie la premi\u00e8re valeur du tableau T [ 1 ] = T [ 2 ] #la seconde valeur devient la troisi\u00e8me! Rappelons au passage qu'on peut aussi acc\u00e8der aux \u00e9l\u00e9ments d'une cha\u00eene de caract\u00e8res mais qu'on ne peut pas la modifier: on dit que cet objet est non mutable . Ajout d'un \u00e9l\u00e9ment \u00e0 la liste(op\u00e9ration d'\u00e9criture') On peut ajouter une valeur \u00e0 la fin d'un tableau( \u00e0 sa droite...) par la m\u00e9thode append() . Par exemple, ajoutons la valeur 100 au tableau initial py T : T = [ 10 , 2 , 8 , 205 , - 1 , 0 ] T . append ( 100 ) # la liste est alors [10, 2, 8, 205, -1, 0, 100]", "title": "Des types pas tr\u00e8s clairs!"}, {"location": "maths/listes.html#des-types-pas-tres-clairs", "text": "Les variables ont des types . Leur cr\u00e9ation affecte une valeur dont le type peut-\u00eatre \u00e0 la louche: un nombre: un int ou un float . Pour faire simple, soit on affecte un nombre entier soit un nombre d\u00e9cimal( il existe d'autres types dont nous ne parlerons pas ici) une cha\u00eene de caract\u00e8res ou string pour faire court. C'est un texte contenu dans une cha\u00eene qui se d\u00e9clare entre deux quotes ( \" ...\"\" ). Ces deux types sont incortournables. Pourquoi est-ce essentiel de conna\u00eetre le type de la variable? Des m\u00e9thodes sont permises selon le type de variables. Par exemple, on peut appliquer la m\u00e9thode upper \u00e0 une cha\u00eene de caract\u00e8res mais pas \u00e0 un nombre. En plus les effets des op\u00e9rations peuvent changer selon le type de la variable. Par exemple, le symbole + est le symbole d'addition naturelle pour les varaibles de types nombres et le symbole de concat\u00e9nation pour les cha\u00eenes de carcat\u00e8res: nbre1 = 10 #type int nbre2 = 5 #type int phrase1 = \"bon\" #type str phrase2 = \"jour\" #type str nbre = nbre1 + nbre2 #nbre vaut 15 phrase = phrase1 + phrase2 #phrase vaut \"bonjour\" phrase . upper () #phrase vaut alors \"BONJOUR\" Mais ces deux types ne suffisent pas en g\u00e9n\u00e9ral pour r\u00e9pondre \u00e0 tous nos besoins. En particulier, le besoin de conserver dans une seule variable, plusieurs valeurs obtenues par exemple par simulation, est important. Nous allons d\u00e9finir une variable particuli\u00e8re appel\u00e9e liste .", "title": "Des types pas tr\u00e8s clairs!"}, {"location": "maths/listes.html#un-tableau-une-liste", "text": "De quoi s'agit-il? Une liste est une s\u00e9quence ordonn\u00e9e de valeurs dont l'acc\u00e8s se fait par son indice. Voici par exemple un tableau classique de nombres: Appelons T ce tableau, cette liste. Alors: la valeur situ\u00e9 au rang 0 de T est 10 la valeur situ\u00e9 au rang 1 de T est 2 la valeur situ\u00e9 au rang 2 de T est 8 la valeur situ\u00e9 au rang 6 de T n'existe pas ! Comment d\u00e9clarer un tableau, une liste en Python? Une liste en python se d\u00e9clare par des crochets. Par exemple, pour notre tableau pr\u00e9c\u00e9dent: T = [ 10 , 2 , 8 , 205 , - 1 , 0 ] Tableau ou liste Le langage Python appelle les tableaux liste et cr\u00e9e une confusion dans ce qu'est r\u00e9ellement un tableau en informatique. Comme les diff\u00e9rents types de variables \u00e9voqu\u00e9es en pr\u00e9ambule, il existe des m\u00e9thodes propores aux listes que nous allons pr\u00e9senter ici. Acc\u00e8s aux \u00e9l\u00e9ments de la liste(op\u00e9ration de lecture) On peut acc\u00e8der aux valeurs des \u00e9l\u00e9ments de la liste par la connaissance de son rang, son indice. Ainsi: T = [ 10 , 2 , 8 , 205 , - 1 , 0 ] print ( T [ 0 ]) # affiche le premier \u00e9l\u00e9ment de la liste T, soit 10 print ( T [ 4 ]) # affiche le cinqui\u00e8me \u00e9l\u00e9ment de la liste T, soit 0 Attention, si le tableau contient n \u00e9l\u00e9ments, les indices vont alors de 0(le premier) \u00e0 n-1 (le dernier). Si vous donnez un indice en dehors de cette plage vous, retourverez la fameuse exception lev\u00e9e par python: Modification des \u00e9l\u00e9ments de la liste(op\u00e9ration d'\u00e9criture') On peut modifier les valeurs des \u00e9l\u00e9ments de la liste par la connaissance de son rang, son indice en r\u00e9affectant la valeur souhait\u00e9e. Ainsi: T = [ 10 , 2 , 8 , 205 , - 1 , 0 ] T [ 0 ] = 4 #modifie la premi\u00e8re valeur du tableau T [ 1 ] = T [ 2 ] #la seconde valeur devient la troisi\u00e8me! Rappelons au passage qu'on peut aussi acc\u00e8der aux \u00e9l\u00e9ments d'une cha\u00eene de caract\u00e8res mais qu'on ne peut pas la modifier: on dit que cet objet est non mutable . Ajout d'un \u00e9l\u00e9ment \u00e0 la liste(op\u00e9ration d'\u00e9criture') On peut ajouter une valeur \u00e0 la fin d'un tableau( \u00e0 sa droite...) par la m\u00e9thode append() . Par exemple, ajoutons la valeur 100 au tableau initial py T : T = [ 10 , 2 , 8 , 205 , - 1 , 0 ] T . append ( 100 ) # la liste est alors [10, 2, 8, 205, -1, 0, 100]", "title": "Un tableau , une liste."}, {"location": "maths/problemes.html", "text": "Des varaibles pour comprendre \u00b6 Lyc\u00e9e Jean Baptiste de baudre 47000 AGEN \u00b6", "title": "Des varaibles pour comprendre"}, {"location": "maths/problemes.html#des-varaibles-pour-comprendre", "text": "", "title": "Des varaibles pour comprendre"}, {"location": "maths/problemes.html#lycee-jean-baptiste-de-baudre-47000-agen", "text": "", "title": "Lyc\u00e9e Jean Baptiste de baudre 47000 AGEN"}, {"location": "maths/variables.html", "text": "Des variables pour comprendre \u00b6 De quoi s'agit-il? Un ordinateur est une grande commode compos\u00e9e de millions de tiroirs dans lesquels on peut stocker des chaussettes... ou plut\u00f4t des donn\u00e9es! Je fais r\u00e9f\u00e9rence aux espaces de stockages des ordinateurs de la plus grande (le disque dur) \u00e0 la plus petite (le registre), en passant par les m\u00e9moires vives par lesquelles transitent les informations. En informatique , tout est donn\u00e9e num\u00e9rique : les pages web, les images, les sons, les mels ,... et m\u00eame les programmes sont des donn\u00e9es stock\u00e9es dans des variables contenant des valeurs de diff\u00e9rents types. D'o\u00f9 notre obsession sur les variables ... On verra comment des algorithmes puis des programmes peuvent changer l'\u00e9tat de ces variables... Affectation de variables \u00b6 Python est un langage informatique qui permet de donner des instructions. Par exemple, le code suivant: a = 2 b = 10 c = a + b cr\u00e9e de fa\u00e7on manuelle (puisqu'on a les tap\u00e9es...), trois variables a,b et c . Sans trop de d\u00e9tails, vous venez simplement de r\u00e9server trois tiroirs de votre gigantesque commode, en leur donnant des noms et des valeurs. Vocabulaire Lorsqu'on cr\u00e9e des variables et qu'on leur attribue des valeurs, on dit qu'on affecte une variable ou simplement que l'on a fait une affectation de variables. On peut aussi parler d' initialisation de la variable quand pour la premi\u00e8re fois, on affecte une valeur \u00e0 une variable. En Python , chaque variable a un type qui peut-\u00eatre, un nombre entier ou \u00e0 virgule (en python , on dit un int ou un float ), un texte (en python , on dit un string ) , une liste (en python , on dit une ... list ) ou tout autre chose dont on ne parlera pas pour le moment... Pourquoi stocker dans des variables??? Tout simplement pour garder en m\u00e9moire(celle de l'ordi), les r\u00e9sultats obtenus ou calcul\u00e9s par un programme. Il suffit d'invoquer le nom de la variable pour retourver son contenu! Un exemple! Le programme suivant calcule le prix TTC d'un article \u00e0 partir du prix HT et de la valeur du taux d'imposition li\u00e9 \u00e0 la TVA . Vous remarquerez que les variables utilis\u00e9es sont implicites : une variable qui d\u00e9signe un prix sera appel\u00e9e prix ou p , mais pas x !! prix_HT = 200 taux = 1.196 #pour une TVA a 19.6% print ( prix_HT * taux ) Le programme calcule puis affiche le prix TTC dans la console python . Mais le r\u00e9sultat ne sera pas conserv\u00e9 en m\u00e9moire! On peut (doit?) rem\u00e9dier \u00e0 cela en cr\u00e9ant la variable prix_TTC et l'affecter comme suit: prix_TTC = prix_HT * taux et faire ensuite afficher le contenu de cette varaible: print ( prix_TTC ) Les op\u00e9rateurs sur les diff\u00e9rentes variables \u00b6 Il existe des op\u00e9rateurs qui peuvent modifier l'\u00e9tat de ces variables. Outre les op\u00e9rations math\u00e9matiques usuelles \\((+, -, \\times, \\div)\\) , on aura l'occasion d'en d\u00e9couvrir d'autres. Exercice n\u00b01: Donner la valeur des variables a,b et c \u00e0 la suite de ces affectations. Code Solution a = 2 b = 10 c = a + b b = b + 1 a = a - 2 c = c ** 2 a = 2 b = 10 c = a + b # c vaut alors 12 b = b + 1 # b vaut 11 a = a - 2 # a vaut 0 c = c ** 2 # c vaut le carr\u00e9 de 12 soit 144 Il faut lire l'instruction b = b + 1 ainsi : la nouvelle valeur de la variable b est \u00e9gale \u00e0 la valeur de l'ancienne \u00e0 laquelle j'ajoute 1. Cette op\u00e9ration porte m\u00eame un joli nom: Vocabulaire L' op\u00e9ration qui consiste \u00e0 faire \u00e9voluer une variable en lui ajoutant 1 s'appelle une incr\u00e9mentation . Cette op\u00e9ration d'incr\u00e9mentation est tr\u00e8s utilis\u00e9e en info . Exercice n\u00b02: Questions R\u00e9ponses Quelle instruction Python fait diminuer de 1 une variable a ? Cherchez le nom de cette instruction. Donnez le code qui incr\u00e9mente une variable compteur de 5. a = a - 1 #attention dans ce cas il faut que a est \u00e9t\u00e9 initialis\u00e9e! C'est la d\u00e9cr\u00e9mentation ! compteur = compteur + 5 Il existe d'autres op\u00e9rations que nous ne citerons pas pour le moment sauf celle du modulo car elle est tr\u00e8s utilis\u00e9e en informatique et est nouvelle pour la plupart des personnes qui lisent ces quelques lignes! le modulo ... Nous vivons tous les jours modulo 24 : toutes les 24 heures, nous remettons les compteurs \u00e0 z\u00e9ro! Travaillez avec des entiers modulo n o\u00f9 n est aussi un entier, consiste \u00e0 compter \u00e0 partir de z\u00e9ro en remettant le compteur \u00e0 z\u00e9ro \u00e0 partir du rang n . Par exemple, en modulo 5: 0,1,2,3,4,0,1,2,3,... en modulo 2: 0,1,0,1,0,1,0,1,.... Dans la premi\u00e8re liste, \u00e0 l'entier 7 correspond l'entier 2 lorsqu'on compte modulo 5 : on dit alors que 7 est \u00e9gal \u00e0 2 si on compte modulo 5 et on \u00e9crit: en maths : 7 = 2 modulo 5 ou mieux , \\(7 \\equiv 2 \\pmod 5\\) en python : 7%5 qui donne comme valeur 2 On peut alors \u00e9crire les r\u00e9sultats suivants: des exemples de modulo... 7%5 = 2, 10%3 = 1, 100%20 = 0, 17%3 = 2 Remarquez enfin qu'on nombre entier est pair si son modulo 2 est... (\u00e0 vous de finir la phrase!) On peut aussi jouer avec des lettres ou du texte, ce que nous appelons des variables de type cha\u00eenes de caract\u00e8res ou simplement string en python. nom = \"Alfred\" club = \"Madrid\" age = \"30\" but = 26 Les variables de type string se d\u00e9clare avec des quotes , doubles \" \" ou simples ' ' (la tradition veut que l'on utilise les simples pour un seul caract\u00e8re...): les variables nom, club et age sont ainsi des cha\u00eenes de caract\u00e8res. La variable but est en revanche un entier de type int . Attention! Une variable a un type , d\u00e9fini dans la fa\u00e7on dont la variable a \u00e9t\u00e9 d\u00e9clar\u00e9e! Des op\u00e9rations existent selon le type de la variable. On peut pour illustrer mes propos, utiliser les op\u00e9rations math\u00e9matiques classiques sur les variables de type nombres ( int ou float ) mais pas sur les cha\u00eenes de caract\u00e8res! La variable age n'est donc pas une variable de type int mais bien string car d\u00e9clar\u00e9e avec des quotes ! Que peut-on faire avec des cha\u00eenes de caract\u00e8res? Les op\u00e9rateurs sur ces objets sont des op\u00e9rateurs de lecture et de concat\u00e9nation . Mais il n'existe pas d'op\u00e9rateur d'\u00e9criture qui modifierait la cha\u00eene de caract\u00e8res. Cela signifie qu'une fois d\u00e9clar\u00e9e, une variable de type string ne peut plus \u00eatre modifi\u00e9e . nom = \"Alfred\" club = \"Madrid\" age = \"30\" but = 26 print ( nom [ 0 ]) #affiche le premier caract\u00e8re de la variable nom print ( club [ 2 ]) #affiche le caract\u00e8re situ\u00e9 au rang 2 de la variable club phrase_du_jour = nom + \" a marqu\u00e9 \" + str ( but ) + \" buts avec le club de \" + club + \" \u00e0 l \u00e2ge de \" + age + \"ans.\" L'instruction print affiche la valeur de la variable. La variable phrase_du_jour est obtenue par la concat\u00e9nation de plusieurs cha\u00eenes de caract\u00e8tes. L'op\u00e9rateur de concat\u00e9nation est aussi le \\(+\\) mais ne s'applique qu'aux cha\u00eenes de caract\u00e8res! La variable but est transtyp\u00e9e pour passer d'un int \u00e0 un string ! On obtient alors: >>> print ( phrase_du_jour ) Alfred a marqu\u00e9 26 buts avec le club de Madrid \u00e0 l \u00e2ge de 30 ans . Attention en revanche, on ne peut pas concat\u00e9ner une cha\u00eene de caract\u00e8res et un entier: >>> print ( \"buts marqu\u00e9s\" + but ) TypeError : unsupported operand type ( s ) for + : 'int' and 'str' Le coin des exercices \u00b6 \u00c0 faire Donner les instructions python qui permettent: de cr\u00e9er une variable h et de lui affecter la valeur 10 . de cr\u00e9er une variable p et de lui affecter le texte bonjour . de cr\u00e9er une variable prix et de lui affecter la valeur 12.5 Tapez ces instructions dans la console ci-dessous puis pour chaque variable faites affichez son type par l'instruction print(type(var)) o\u00f9 var doit \u00eatre remplac\u00e9 par les noms des variables cr\u00e9\u00e9s pr\u00e9c\u00e9demment. Donner les instructions python qui: ajoute 10 \u00e0 la variable h et socke le r\u00e9sultat dans h . concat\u00e8ne la variable p avec votre pr\u00e9nom stocke le r\u00e9sultat dans la variable phrase . multiplie la variable prix par 1.1 et stocke le r\u00e9sultat dans prix >>>", "title": "Des variables pour comprendre"}, {"location": "maths/variables.html#des-variables-pour-comprendre", "text": "De quoi s'agit-il? Un ordinateur est une grande commode compos\u00e9e de millions de tiroirs dans lesquels on peut stocker des chaussettes... ou plut\u00f4t des donn\u00e9es! Je fais r\u00e9f\u00e9rence aux espaces de stockages des ordinateurs de la plus grande (le disque dur) \u00e0 la plus petite (le registre), en passant par les m\u00e9moires vives par lesquelles transitent les informations. En informatique , tout est donn\u00e9e num\u00e9rique : les pages web, les images, les sons, les mels ,... et m\u00eame les programmes sont des donn\u00e9es stock\u00e9es dans des variables contenant des valeurs de diff\u00e9rents types. D'o\u00f9 notre obsession sur les variables ... On verra comment des algorithmes puis des programmes peuvent changer l'\u00e9tat de ces variables...", "title": "Des variables pour comprendre"}, {"location": "maths/variables.html#affectation-de-variables", "text": "Python est un langage informatique qui permet de donner des instructions. Par exemple, le code suivant: a = 2 b = 10 c = a + b cr\u00e9e de fa\u00e7on manuelle (puisqu'on a les tap\u00e9es...), trois variables a,b et c . Sans trop de d\u00e9tails, vous venez simplement de r\u00e9server trois tiroirs de votre gigantesque commode, en leur donnant des noms et des valeurs. Vocabulaire Lorsqu'on cr\u00e9e des variables et qu'on leur attribue des valeurs, on dit qu'on affecte une variable ou simplement que l'on a fait une affectation de variables. On peut aussi parler d' initialisation de la variable quand pour la premi\u00e8re fois, on affecte une valeur \u00e0 une variable. En Python , chaque variable a un type qui peut-\u00eatre, un nombre entier ou \u00e0 virgule (en python , on dit un int ou un float ), un texte (en python , on dit un string ) , une liste (en python , on dit une ... list ) ou tout autre chose dont on ne parlera pas pour le moment... Pourquoi stocker dans des variables??? Tout simplement pour garder en m\u00e9moire(celle de l'ordi), les r\u00e9sultats obtenus ou calcul\u00e9s par un programme. Il suffit d'invoquer le nom de la variable pour retourver son contenu! Un exemple! Le programme suivant calcule le prix TTC d'un article \u00e0 partir du prix HT et de la valeur du taux d'imposition li\u00e9 \u00e0 la TVA . Vous remarquerez que les variables utilis\u00e9es sont implicites : une variable qui d\u00e9signe un prix sera appel\u00e9e prix ou p , mais pas x !! prix_HT = 200 taux = 1.196 #pour une TVA a 19.6% print ( prix_HT * taux ) Le programme calcule puis affiche le prix TTC dans la console python . Mais le r\u00e9sultat ne sera pas conserv\u00e9 en m\u00e9moire! On peut (doit?) rem\u00e9dier \u00e0 cela en cr\u00e9ant la variable prix_TTC et l'affecter comme suit: prix_TTC = prix_HT * taux et faire ensuite afficher le contenu de cette varaible: print ( prix_TTC )", "title": "Affectation de variables"}, {"location": "maths/variables.html#les-operateurs-sur-les-differentes-variables", "text": "Il existe des op\u00e9rateurs qui peuvent modifier l'\u00e9tat de ces variables. Outre les op\u00e9rations math\u00e9matiques usuelles \\((+, -, \\times, \\div)\\) , on aura l'occasion d'en d\u00e9couvrir d'autres. Exercice n\u00b01: Donner la valeur des variables a,b et c \u00e0 la suite de ces affectations. Code Solution a = 2 b = 10 c = a + b b = b + 1 a = a - 2 c = c ** 2 a = 2 b = 10 c = a + b # c vaut alors 12 b = b + 1 # b vaut 11 a = a - 2 # a vaut 0 c = c ** 2 # c vaut le carr\u00e9 de 12 soit 144 Il faut lire l'instruction b = b + 1 ainsi : la nouvelle valeur de la variable b est \u00e9gale \u00e0 la valeur de l'ancienne \u00e0 laquelle j'ajoute 1. Cette op\u00e9ration porte m\u00eame un joli nom: Vocabulaire L' op\u00e9ration qui consiste \u00e0 faire \u00e9voluer une variable en lui ajoutant 1 s'appelle une incr\u00e9mentation . Cette op\u00e9ration d'incr\u00e9mentation est tr\u00e8s utilis\u00e9e en info . Exercice n\u00b02: Questions R\u00e9ponses Quelle instruction Python fait diminuer de 1 une variable a ? Cherchez le nom de cette instruction. Donnez le code qui incr\u00e9mente une variable compteur de 5. a = a - 1 #attention dans ce cas il faut que a est \u00e9t\u00e9 initialis\u00e9e! C'est la d\u00e9cr\u00e9mentation ! compteur = compteur + 5 Il existe d'autres op\u00e9rations que nous ne citerons pas pour le moment sauf celle du modulo car elle est tr\u00e8s utilis\u00e9e en informatique et est nouvelle pour la plupart des personnes qui lisent ces quelques lignes! le modulo ... Nous vivons tous les jours modulo 24 : toutes les 24 heures, nous remettons les compteurs \u00e0 z\u00e9ro! Travaillez avec des entiers modulo n o\u00f9 n est aussi un entier, consiste \u00e0 compter \u00e0 partir de z\u00e9ro en remettant le compteur \u00e0 z\u00e9ro \u00e0 partir du rang n . Par exemple, en modulo 5: 0,1,2,3,4,0,1,2,3,... en modulo 2: 0,1,0,1,0,1,0,1,.... Dans la premi\u00e8re liste, \u00e0 l'entier 7 correspond l'entier 2 lorsqu'on compte modulo 5 : on dit alors que 7 est \u00e9gal \u00e0 2 si on compte modulo 5 et on \u00e9crit: en maths : 7 = 2 modulo 5 ou mieux , \\(7 \\equiv 2 \\pmod 5\\) en python : 7%5 qui donne comme valeur 2 On peut alors \u00e9crire les r\u00e9sultats suivants: des exemples de modulo... 7%5 = 2, 10%3 = 1, 100%20 = 0, 17%3 = 2 Remarquez enfin qu'on nombre entier est pair si son modulo 2 est... (\u00e0 vous de finir la phrase!) On peut aussi jouer avec des lettres ou du texte, ce que nous appelons des variables de type cha\u00eenes de caract\u00e8res ou simplement string en python. nom = \"Alfred\" club = \"Madrid\" age = \"30\" but = 26 Les variables de type string se d\u00e9clare avec des quotes , doubles \" \" ou simples ' ' (la tradition veut que l'on utilise les simples pour un seul caract\u00e8re...): les variables nom, club et age sont ainsi des cha\u00eenes de caract\u00e8res. La variable but est en revanche un entier de type int . Attention! Une variable a un type , d\u00e9fini dans la fa\u00e7on dont la variable a \u00e9t\u00e9 d\u00e9clar\u00e9e! Des op\u00e9rations existent selon le type de la variable. On peut pour illustrer mes propos, utiliser les op\u00e9rations math\u00e9matiques classiques sur les variables de type nombres ( int ou float ) mais pas sur les cha\u00eenes de caract\u00e8res! La variable age n'est donc pas une variable de type int mais bien string car d\u00e9clar\u00e9e avec des quotes ! Que peut-on faire avec des cha\u00eenes de caract\u00e8res? Les op\u00e9rateurs sur ces objets sont des op\u00e9rateurs de lecture et de concat\u00e9nation . Mais il n'existe pas d'op\u00e9rateur d'\u00e9criture qui modifierait la cha\u00eene de caract\u00e8res. Cela signifie qu'une fois d\u00e9clar\u00e9e, une variable de type string ne peut plus \u00eatre modifi\u00e9e . nom = \"Alfred\" club = \"Madrid\" age = \"30\" but = 26 print ( nom [ 0 ]) #affiche le premier caract\u00e8re de la variable nom print ( club [ 2 ]) #affiche le caract\u00e8re situ\u00e9 au rang 2 de la variable club phrase_du_jour = nom + \" a marqu\u00e9 \" + str ( but ) + \" buts avec le club de \" + club + \" \u00e0 l \u00e2ge de \" + age + \"ans.\" L'instruction print affiche la valeur de la variable. La variable phrase_du_jour est obtenue par la concat\u00e9nation de plusieurs cha\u00eenes de caract\u00e8tes. L'op\u00e9rateur de concat\u00e9nation est aussi le \\(+\\) mais ne s'applique qu'aux cha\u00eenes de caract\u00e8res! La variable but est transtyp\u00e9e pour passer d'un int \u00e0 un string ! On obtient alors: >>> print ( phrase_du_jour ) Alfred a marqu\u00e9 26 buts avec le club de Madrid \u00e0 l \u00e2ge de 30 ans . Attention en revanche, on ne peut pas concat\u00e9ner une cha\u00eene de caract\u00e8res et un entier: >>> print ( \"buts marqu\u00e9s\" + but ) TypeError : unsupported operand type ( s ) for + : 'int' and 'str'", "title": "Les op\u00e9rateurs sur les diff\u00e9rentes variables"}, {"location": "maths/variables.html#le-coin-des-exercices", "text": "\u00c0 faire Donner les instructions python qui permettent: de cr\u00e9er une variable h et de lui affecter la valeur 10 . de cr\u00e9er une variable p et de lui affecter le texte bonjour . de cr\u00e9er une variable prix et de lui affecter la valeur 12.5 Tapez ces instructions dans la console ci-dessous puis pour chaque variable faites affichez son type par l'instruction print(type(var)) o\u00f9 var doit \u00eatre remplac\u00e9 par les noms des variables cr\u00e9\u00e9s pr\u00e9c\u00e9demment. Donner les instructions python qui: ajoute 10 \u00e0 la variable h et socke le r\u00e9sultat dans h . concat\u00e8ne la variable p avec votre pr\u00e9nom stocke le r\u00e9sultat dans la variable phrase . multiplie la variable prix par 1.1 et stocke le r\u00e9sultat dans prix >>>", "title": "Le coin des exercices"}, {"location": "prem/animation_canvas.html", "text": "Introduction: \u00b6 canvas { margin-left:150px; border: 5px solid black; } var canvas1 = document.getElementById(\"canvas1\"); var ctx = canvas1.getContext(\"2d\"); var raf; x =100; y =0; window.onload=function(){ can=document.getElementById(\"canvas2\"); cont=can.getContext(\"2d\"); fonc(); } dirX=\"inc\"; dirY=\"inc\"; function fonc(){ t=setTimeout(\"fonc()\",10); cont.fillStyle=\"#FFF\"; cont.fillRect(0,0,300,200); cont.fillStyle=\"#E70\"; cont.beginPath(); cont.arc(x,y,25,0,2*Math.PI); cont.fill(); cont.closePath(); cont.fillStyle=\"#EEE\"; if(dirX==\"inc\") x+=4.5; if(dirY==\"inc\") y+=5; if(dirX==\"dec\") x-=4.5; if(dirY==\"dec\") y-=5; if(x>=300-20){ dirX=\"dec\"; } if(y>=200-20){ dirY=\"dec\"; } if(x<=24){ dirX=\"inc\"; } if(y<=24){ dirY=\"inc\"; } } var ball = { x: 100, y: 0, vx: 5, vy: 2, radius: 25, color: \"blue\", draw: function () { ctx.beginPath(); ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, true); ctx.closePath(); ctx.fillStyle = this.color; ctx.fill(); }, }; function draw() { ctx.fillStyle = \"rgba(255,255,255,0.3)\"; ctx.fillRect(0, 0, canvas1.width, canvas1.height); ball.draw(); ball.x += ball.vx; ball.y += ball.vy; raf = window.requestAnimationFrame(draw); if (ball.y + ball.vy > canvas1.height || ball.y + ball.vy < 0) { ball.vy = -ball.vy; } if (ball.x + ball.vx > canvas1.width || ball.x + ball.vx < 0) { ball.vx = -ball.vx; } ball.vy *= 0.99; ball.vy += 0.25; } canvas1.addEventListener(\"mouseover\", function (e) { raf = window.requestAnimationFrame(draw); }); ball.draw(); Ce que nous savons faire... Dans un travail pr\u00e9c\u00e9dent, nous avons appris \u00e0: construire une interface graphique gr\u00e2ce aux possibilit\u00e9s du module Tkinter ; d\u00e9clencher une action \u00e0 partir d'un bouton de commande ; transporter l\u2019information donn\u00e9e par un widget de choix dans une variable de contr\u00f4le dont on peut r\u00e9cup\u00e9rer la valeur \u00e0 tout moment ; interagir avec l\u2019utilisateur en r\u00e9cup\u00e9rant les coordonn\u00e9es du clic de souris dans le canvas. piloter un objet au clavier Le paragraphe suivant illustre des m\u00e9thodes classiques pour cr\u00e9er une animation dans un canvas... Exo R\u00e9cup\u00e9rer le code suivant qui d\u00e9finit l'interface sur laquelle nous allons travailler. Code \u00e0 copier from tkinter import * from random import randint ###################################################VARIABLES ############################### ListeCouleurs = [ 'green' , 'red' , 'black' , 'blue' , 'maroon' , 'orange' ] ############################################################################################# ######################################## DECLARATION DES FONCTIONS ########################## def cercle (): x , y = randint ( 0 , 800 ), randint ( 0 , 580 ) r = valeur . get () Can . create_oval ( x - r , y - r , x + r , y + r , fill = coul . get ()) Can . after ( 100 , cercle ) def efface (): Can . delete ( ALL ) ############################################################################################## ############################################################################################## ############### CONSTRUCTION DES OBJETS DANS LA FEN ########################################## ############################################################################################## fen = Tk () fen . title ( \"Animation dans un canvas\" ) fen . geometry ( '1000x600+100+100' ) fen . resizable ( False , False ) #widthxheight+bordecran ############################################################################################## ZoneDessin = Frame ( fen , borderwidth = 2 , relief = RIDGE ) ZoneDessin . grid ( row = 0 , column = 0 ) ############################################################################################## Can = Canvas ( ZoneDessin , bg = 'grey' , width = 800 , height = 580 ) Can . grid () ############################################################################################## ZoneOptions = Frame ( fen , borderwidth = 2 , width = 200 , height = 580 ) ZoneOptions . grid ( row = 0 , column = 1 ) ZoneOptions . grid_propagate ( 0 ) ############################################################################################## BouDebut = Button ( ZoneOptions , text = 'D\u00e9buter la construction' , command = fen . destroy ) BouDebut . grid ( row = 0 , pady = 20 , columnspan = 2 ) BouFin = Button ( ZoneOptions , text = 'Stopper la construction' , command = fen . destroy ) BouFin . grid ( row = 1 , pady = 20 , columnspan = 2 ) BouEfface = Button ( ZoneOptions , text = 'Effacer' , command = fen . destroy ) BouEfface . grid ( row = 2 , pady = 20 , columnspan = 2 ) ############################################################################################## valeur = IntVar ( ZoneOptions ) valeur . set ( 5 ) EchelleRayon = Scale ( ZoneOptions , orient = 'horizontal' , from_ = 0 , to = 100 , resolution = 1 , tickinterval = 10 , length = 190 , label = 'Dimension du cercle ou du carre' , variable = valeur ) EchelleRayon . grid ( row = 3 , columnspan = 2 ) ############################################################################################## coul = StringVar ( ZoneOptions ) coul . set ( ListeCouleurs [ 0 ]) ChoixCoul = OptionMenu ( ZoneOptions , coul , * ListeCouleurs ) ChoixCoul . grid ( row = 4 , column = 0 , pady = 20 ) ############################################################################################## ############################################################################################## fen . mainloop () Qu'est ce qu'une animation? \u00b6 Le mouvement d\u2019un objet dans un canvas (zone de dessin ) est une animation : cet objet \u00e9tant d\u00e9fini par ses coordonn\u00e9es, il suffit alors de faire \u00e9voluer ces valeurs pour voir bouger l\u2019objet. C\u2019est ce choix que nous adopterons dans un second temps... Mais avant cela, on d\u00e9finit un appel r\u00e9cursif d\u2019une fonction pour la construction d\u2019un objet dans le canvas. Cr\u00e9er et contr\u00f4ler l'animation: \u00b6 La fonction after(...) . \u00b6 Voici le code d'une nouvelle fonction cercle : def cercle (): x , y = randint ( 0 , 800 ), randint ( 0 , 580 ) r = valeur . get () Can . create_oval ( x - r , y - r , x + r , y + r , fill = coul . get ()) Can . after ( 100 , cercle ) #Appel recursif de la fonction cercle Cette fonction est dite r\u00e9cursive car elle s'appelle elle-m\u00eame toutes les 100ms. Donc si aucun \u00e9v\u00e9nement ne l'arr\u00eate, elle boucle \u00e0 l'infini! Exo Associer cette fonction au bouton BouDebut et tester! Il ne suffit pas de lancer une animation, il faut aussi la ma\u00eetriser : en particulier, comment arr\u00eater l'animation ? comment reprendre l'animation quand on le souhaite ? En effet, la fonction after cr\u00e9e un appel r\u00e9cursif et perp\u00e9tuel de la fonction cercle() ; il n\u2019y donc aucune raison que la construction s\u2019ach\u00e8ve... Une premi\u00e8re astuce avec un compteur \u00b6 Pour r\u00e9pondre \u00e0 notre probl\u00e9matique, nous allons utiliser encore des variables globales . Il faut comprendre qu\u2019une variable cr\u00e9e au sein d\u2019une fonction n\u2019existe que dans cette fonction ; on dit que la variable est locale . En particulier, elle n\u2019est donc pas visible en dehors de la fonction. Info Une variable globale est d\u00e9clar\u00e9e dans le corps de programme et est initialis\u00e9e. Pour qu\u2019une fonction puisse modifier son \u00e9tat, il faut la d\u00e9clarer globale dans la fonction comme le montre l\u2019exemple suivant: compteur = 0 #je suis une variable globale #################### DECLARATION DES FONCTIONS ################### def cercle (): global compteur #variable d\u00e9finie en dehors de la fonction x , y = randint ( 0 , 800 ), randint ( 0 , 580 ) r = valeur . get () if compteur < 20 : compteur += 1 Can . create_oval ( x - r , y - r , x + r , y + r , fill = coul . get ()) Can . after ( 1000 , cercle ) Exo Modifier le code de l'interface en y incluant les instructions ci-dessus. Combien de cercles seront construits? Modifier le code pour construire 100 cercles en 50ms. Contr\u00f4le par l'utilisateur \u00b6 Nous allons utiliser le bouton de commande qui stoppe l\u2019animation. Pour cela on utilise traditionnellement une variable globale, nomm\u00e9e flag , qui contr\u00f4le le d\u00e9roulement de l\u2019animation selon le principe suivant : la variable est initialis\u00e9e \u00e0 0; l'animation n'est possible que si flag \u00e0 pour valeur 1. Exo Supprimer la variable compteur ainsi que la fonction cercle pr\u00e9c\u00e9dente. Copier le code ci-dessous. Associer \u00e0 chaque bouton, la commande qu'il permet d'activer. flag = 0 #je suis globale ######################################## DECLARATION DES FONCTIONS ########################## def demarrer (): global flag if flag == 0 : #comparaison flag = 1 cercle () def stopper (): global flag flag = 0 def cercle (): global flag x , y = randint ( 0 , 800 ), randint ( 0 , 580 ) r = valeur . get () Can . create_oval ( x - r , y - r , x + r , y + r , fill = coul . get ()) if flag == 1 : #si flag passe \u00e0 0, l'animation s'arr\u00eate Can . after ( 100 , cercle ) Une animation simple avec la m\u00e9thode coords . \u00b6 Nous allons maintenant pour finir, faire \u00e9voluer une balle rouge dans le canvas \u00e0 l'aide de la m\u00e9thode coords que nous avons d\u00e9j\u00e0 rencontr\u00e9e dans un travail pr\u00e9c\u00e9dent. Info La m\u00e9thode coords permet de r\u00e9d\u00e9finir les coordonn\u00e9es d'un objet (d\u00e9j\u00e0 cr\u00e9\u00e9) dans un canvas. Exo Modifiez le code pr\u00e9c\u00e9dent en y ajoutant les \u00e9l\u00e9ments suivants. flag = 0 #je suis globale x , y = 0 , randint ( 0 , 580 ) #nous aussi ######################################## DECLARATION DES FONCTIONS ########################## def demarrer (): global flag , balle r = valeur . get () if flag == 0 : #comparaison flag = 1 balle = Can . create_oval ( x - r , y - r , x + r , y + r , fill = coul . get ()) bouge () def stopper (): global flag , x , y flag = 0 x = 0 y = randint ( 0 , 580 ) def bouge (): global flag , x , y , balle r = valeur . get () if flag == 1 : #si flag passe \u00e0 0, l'animation s'arr\u00eate x = x + 2 Can . coords ( balle , x - r , y - r , x + r , y + r ) Can . after ( 100 , bouge ) def efface (): Can . delete ( ALL ) Vous allez maintenant devoir am\u00e9liorer ce code pour r\u00e9pondre aux d\u00e9fis propos\u00e9s dans l'exercice suivant: Exo La balle revient au d\u00e9but de la ligne quand elle arrive \u00e0 la fin de celle-ci(voir comment utiliser le modulo...). La balle rebondit. La balle part au milieu du canvas dans une direction choisit al\u00e9atoirement. La balle rebondit sur tous les c\u00f4t\u00e9s! Pour finir en beaut\u00e9! \u00b6 Si vous avez bien accompli les missions pr\u00e9c\u00e9dentes, vous \u00eates aptes \u00e0 r\u00e9aliser ce dernier exercice. Bon courage! Exo Vous allez maintenant devoir: cr\u00e9er deux balles de couleurs diff\u00e9rentes et de m\u00eame rayon les animer dans le canvas sans qu'elles aient la m\u00eame direction. elles rebondissent sur les bords. les balles s'arr\u00eatent lorsqu'elles rentrent en collision la premi\u00e8re balle contamine la seconde en lui donnant sa couleur lors d'une collision. cr\u00e9er cinq balles qui n'ont pas les m\u00eames propri\u00e9t\u00e9s.", "title": "Animation dans un canvas"}, {"location": "prem/animation_canvas.html#introduction", "text": "canvas { margin-left:150px; border: 5px solid black; } var canvas1 = document.getElementById(\"canvas1\"); var ctx = canvas1.getContext(\"2d\"); var raf; x =100; y =0; window.onload=function(){ can=document.getElementById(\"canvas2\"); cont=can.getContext(\"2d\"); fonc(); } dirX=\"inc\"; dirY=\"inc\"; function fonc(){ t=setTimeout(\"fonc()\",10); cont.fillStyle=\"#FFF\"; cont.fillRect(0,0,300,200); cont.fillStyle=\"#E70\"; cont.beginPath(); cont.arc(x,y,25,0,2*Math.PI); cont.fill(); cont.closePath(); cont.fillStyle=\"#EEE\"; if(dirX==\"inc\") x+=4.5; if(dirY==\"inc\") y+=5; if(dirX==\"dec\") x-=4.5; if(dirY==\"dec\") y-=5; if(x>=300-20){ dirX=\"dec\"; } if(y>=200-20){ dirY=\"dec\"; } if(x<=24){ dirX=\"inc\"; } if(y<=24){ dirY=\"inc\"; } } var ball = { x: 100, y: 0, vx: 5, vy: 2, radius: 25, color: \"blue\", draw: function () { ctx.beginPath(); ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, true); ctx.closePath(); ctx.fillStyle = this.color; ctx.fill(); }, }; function draw() { ctx.fillStyle = \"rgba(255,255,255,0.3)\"; ctx.fillRect(0, 0, canvas1.width, canvas1.height); ball.draw(); ball.x += ball.vx; ball.y += ball.vy; raf = window.requestAnimationFrame(draw); if (ball.y + ball.vy > canvas1.height || ball.y + ball.vy < 0) { ball.vy = -ball.vy; } if (ball.x + ball.vx > canvas1.width || ball.x + ball.vx < 0) { ball.vx = -ball.vx; } ball.vy *= 0.99; ball.vy += 0.25; } canvas1.addEventListener(\"mouseover\", function (e) { raf = window.requestAnimationFrame(draw); }); ball.draw(); Ce que nous savons faire... Dans un travail pr\u00e9c\u00e9dent, nous avons appris \u00e0: construire une interface graphique gr\u00e2ce aux possibilit\u00e9s du module Tkinter ; d\u00e9clencher une action \u00e0 partir d'un bouton de commande ; transporter l\u2019information donn\u00e9e par un widget de choix dans une variable de contr\u00f4le dont on peut r\u00e9cup\u00e9rer la valeur \u00e0 tout moment ; interagir avec l\u2019utilisateur en r\u00e9cup\u00e9rant les coordonn\u00e9es du clic de souris dans le canvas. piloter un objet au clavier Le paragraphe suivant illustre des m\u00e9thodes classiques pour cr\u00e9er une animation dans un canvas... Exo R\u00e9cup\u00e9rer le code suivant qui d\u00e9finit l'interface sur laquelle nous allons travailler. Code \u00e0 copier from tkinter import * from random import randint ###################################################VARIABLES ############################### ListeCouleurs = [ 'green' , 'red' , 'black' , 'blue' , 'maroon' , 'orange' ] ############################################################################################# ######################################## DECLARATION DES FONCTIONS ########################## def cercle (): x , y = randint ( 0 , 800 ), randint ( 0 , 580 ) r = valeur . get () Can . create_oval ( x - r , y - r , x + r , y + r , fill = coul . get ()) Can . after ( 100 , cercle ) def efface (): Can . delete ( ALL ) ############################################################################################## ############################################################################################## ############### CONSTRUCTION DES OBJETS DANS LA FEN ########################################## ############################################################################################## fen = Tk () fen . title ( \"Animation dans un canvas\" ) fen . geometry ( '1000x600+100+100' ) fen . resizable ( False , False ) #widthxheight+bordecran ############################################################################################## ZoneDessin = Frame ( fen , borderwidth = 2 , relief = RIDGE ) ZoneDessin . grid ( row = 0 , column = 0 ) ############################################################################################## Can = Canvas ( ZoneDessin , bg = 'grey' , width = 800 , height = 580 ) Can . grid () ############################################################################################## ZoneOptions = Frame ( fen , borderwidth = 2 , width = 200 , height = 580 ) ZoneOptions . grid ( row = 0 , column = 1 ) ZoneOptions . grid_propagate ( 0 ) ############################################################################################## BouDebut = Button ( ZoneOptions , text = 'D\u00e9buter la construction' , command = fen . destroy ) BouDebut . grid ( row = 0 , pady = 20 , columnspan = 2 ) BouFin = Button ( ZoneOptions , text = 'Stopper la construction' , command = fen . destroy ) BouFin . grid ( row = 1 , pady = 20 , columnspan = 2 ) BouEfface = Button ( ZoneOptions , text = 'Effacer' , command = fen . destroy ) BouEfface . grid ( row = 2 , pady = 20 , columnspan = 2 ) ############################################################################################## valeur = IntVar ( ZoneOptions ) valeur . set ( 5 ) EchelleRayon = Scale ( ZoneOptions , orient = 'horizontal' , from_ = 0 , to = 100 , resolution = 1 , tickinterval = 10 , length = 190 , label = 'Dimension du cercle ou du carre' , variable = valeur ) EchelleRayon . grid ( row = 3 , columnspan = 2 ) ############################################################################################## coul = StringVar ( ZoneOptions ) coul . set ( ListeCouleurs [ 0 ]) ChoixCoul = OptionMenu ( ZoneOptions , coul , * ListeCouleurs ) ChoixCoul . grid ( row = 4 , column = 0 , pady = 20 ) ############################################################################################## ############################################################################################## fen . mainloop ()", "title": "Introduction:"}, {"location": "prem/animation_canvas.html#quest-ce-quune-animation", "text": "Le mouvement d\u2019un objet dans un canvas (zone de dessin ) est une animation : cet objet \u00e9tant d\u00e9fini par ses coordonn\u00e9es, il suffit alors de faire \u00e9voluer ces valeurs pour voir bouger l\u2019objet. C\u2019est ce choix que nous adopterons dans un second temps... Mais avant cela, on d\u00e9finit un appel r\u00e9cursif d\u2019une fonction pour la construction d\u2019un objet dans le canvas.", "title": "Qu'est ce qu'une animation?"}, {"location": "prem/animation_canvas.html#creer-et-controler-lanimation", "text": "", "title": "Cr\u00e9er et contr\u00f4ler l'animation:"}, {"location": "prem/animation_canvas.html#la-fonction-after", "text": "Voici le code d'une nouvelle fonction cercle : def cercle (): x , y = randint ( 0 , 800 ), randint ( 0 , 580 ) r = valeur . get () Can . create_oval ( x - r , y - r , x + r , y + r , fill = coul . get ()) Can . after ( 100 , cercle ) #Appel recursif de la fonction cercle Cette fonction est dite r\u00e9cursive car elle s'appelle elle-m\u00eame toutes les 100ms. Donc si aucun \u00e9v\u00e9nement ne l'arr\u00eate, elle boucle \u00e0 l'infini! Exo Associer cette fonction au bouton BouDebut et tester! Il ne suffit pas de lancer une animation, il faut aussi la ma\u00eetriser : en particulier, comment arr\u00eater l'animation ? comment reprendre l'animation quand on le souhaite ? En effet, la fonction after cr\u00e9e un appel r\u00e9cursif et perp\u00e9tuel de la fonction cercle() ; il n\u2019y donc aucune raison que la construction s\u2019ach\u00e8ve...", "title": "La fonction after(...)."}, {"location": "prem/animation_canvas.html#une-premiere-astuce-avec-un-compteur", "text": "Pour r\u00e9pondre \u00e0 notre probl\u00e9matique, nous allons utiliser encore des variables globales . Il faut comprendre qu\u2019une variable cr\u00e9e au sein d\u2019une fonction n\u2019existe que dans cette fonction ; on dit que la variable est locale . En particulier, elle n\u2019est donc pas visible en dehors de la fonction. Info Une variable globale est d\u00e9clar\u00e9e dans le corps de programme et est initialis\u00e9e. Pour qu\u2019une fonction puisse modifier son \u00e9tat, il faut la d\u00e9clarer globale dans la fonction comme le montre l\u2019exemple suivant: compteur = 0 #je suis une variable globale #################### DECLARATION DES FONCTIONS ################### def cercle (): global compteur #variable d\u00e9finie en dehors de la fonction x , y = randint ( 0 , 800 ), randint ( 0 , 580 ) r = valeur . get () if compteur < 20 : compteur += 1 Can . create_oval ( x - r , y - r , x + r , y + r , fill = coul . get ()) Can . after ( 1000 , cercle ) Exo Modifier le code de l'interface en y incluant les instructions ci-dessus. Combien de cercles seront construits? Modifier le code pour construire 100 cercles en 50ms.", "title": "Une premi\u00e8re astuce avec un compteur"}, {"location": "prem/animation_canvas.html#controle-par-lutilisateur", "text": "Nous allons utiliser le bouton de commande qui stoppe l\u2019animation. Pour cela on utilise traditionnellement une variable globale, nomm\u00e9e flag , qui contr\u00f4le le d\u00e9roulement de l\u2019animation selon le principe suivant : la variable est initialis\u00e9e \u00e0 0; l'animation n'est possible que si flag \u00e0 pour valeur 1. Exo Supprimer la variable compteur ainsi que la fonction cercle pr\u00e9c\u00e9dente. Copier le code ci-dessous. Associer \u00e0 chaque bouton, la commande qu'il permet d'activer. flag = 0 #je suis globale ######################################## DECLARATION DES FONCTIONS ########################## def demarrer (): global flag if flag == 0 : #comparaison flag = 1 cercle () def stopper (): global flag flag = 0 def cercle (): global flag x , y = randint ( 0 , 800 ), randint ( 0 , 580 ) r = valeur . get () Can . create_oval ( x - r , y - r , x + r , y + r , fill = coul . get ()) if flag == 1 : #si flag passe \u00e0 0, l'animation s'arr\u00eate Can . after ( 100 , cercle )", "title": "Contr\u00f4le par l'utilisateur"}, {"location": "prem/animation_canvas.html#une-animation-simple-avec-la-methode-coords", "text": "Nous allons maintenant pour finir, faire \u00e9voluer une balle rouge dans le canvas \u00e0 l'aide de la m\u00e9thode coords que nous avons d\u00e9j\u00e0 rencontr\u00e9e dans un travail pr\u00e9c\u00e9dent. Info La m\u00e9thode coords permet de r\u00e9d\u00e9finir les coordonn\u00e9es d'un objet (d\u00e9j\u00e0 cr\u00e9\u00e9) dans un canvas. Exo Modifiez le code pr\u00e9c\u00e9dent en y ajoutant les \u00e9l\u00e9ments suivants. flag = 0 #je suis globale x , y = 0 , randint ( 0 , 580 ) #nous aussi ######################################## DECLARATION DES FONCTIONS ########################## def demarrer (): global flag , balle r = valeur . get () if flag == 0 : #comparaison flag = 1 balle = Can . create_oval ( x - r , y - r , x + r , y + r , fill = coul . get ()) bouge () def stopper (): global flag , x , y flag = 0 x = 0 y = randint ( 0 , 580 ) def bouge (): global flag , x , y , balle r = valeur . get () if flag == 1 : #si flag passe \u00e0 0, l'animation s'arr\u00eate x = x + 2 Can . coords ( balle , x - r , y - r , x + r , y + r ) Can . after ( 100 , bouge ) def efface (): Can . delete ( ALL ) Vous allez maintenant devoir am\u00e9liorer ce code pour r\u00e9pondre aux d\u00e9fis propos\u00e9s dans l'exercice suivant: Exo La balle revient au d\u00e9but de la ligne quand elle arrive \u00e0 la fin de celle-ci(voir comment utiliser le modulo...). La balle rebondit. La balle part au milieu du canvas dans une direction choisit al\u00e9atoirement. La balle rebondit sur tous les c\u00f4t\u00e9s!", "title": "Une animation simple avec la m\u00e9thode coords."}, {"location": "prem/animation_canvas.html#pour-finir-en-beaute", "text": "Si vous avez bien accompli les missions pr\u00e9c\u00e9dentes, vous \u00eates aptes \u00e0 r\u00e9aliser ce dernier exercice. Bon courage! Exo Vous allez maintenant devoir: cr\u00e9er deux balles de couleurs diff\u00e9rentes et de m\u00eame rayon les animer dans le canvas sans qu'elles aient la m\u00eame direction. elles rebondissent sur les bords. les balles s'arr\u00eatent lorsqu'elles rentrent en collision la premi\u00e8re balle contamine la seconde en lui donnant sa couleur lors d'une collision. cr\u00e9er cinq balles qui n'ont pas les m\u00eames propri\u00e9t\u00e9s.", "title": "Pour finir en beaut\u00e9!"}, {"location": "prem/cours_de_reseaux.html", "text": "Travail sur les r\u00e9seaux informatiques \u00b6 Notre monde est hyper-connect\u00e9! Connect\u00e9 par des interfaces simples(web /appli.) mais surtout connect\u00e9 au sens physique du terme. Dans une architecture classique de r\u00e9seau, un ordinateur(le client) est reli\u00e9 par un c\u00e2ble, une fibre, une onde \u00e9lectromagn\u00e9tique,... \u00e0 un autre ordinateur(le serveur) qui lui fournit des services (pages web, messagerie, base de donn\u00e9es,...) quasiment en continu. Objectifs Ce cours pr\u00e9cise sans trop de d\u00e9tails, le vocabulaire usuel des r\u00e9seaux et les principes g\u00e9n\u00e9raux de leur fonctionnement. Le travail se terminera par la simulation d'un r\u00e9seau informatique et l'utilisation de biblioth\u00e8ques Python pour communiquer entre deux ordinateurs d'une m\u00eame salle. D'abord , un r\u00e9seau physique... \u00b6 Avant tout, pour que deux ordinateurs puissent communiquer entre eux, il faut qu'ils soient reli\u00e9s l'un \u00e0 l'autre . Ce lien physique est essentiellement: un fil (fils de cuivre, fibre optique,...) une onde \u00e9lectromagn\u00e9tique(wifi, bluetooth) Chez vous, la box est physiquement reli\u00e9e au r\u00e9seau t\u00e9l\u00e9phonique (ou fibre) par un c\u00e2ble: le reste du r\u00e9seau y est souvent connect\u00e9 en WIFI... Dans nos salles de NSI, les ordinateurs sont reli\u00e9s gr\u00e2ce des c\u00e2bles RJ45 droits aux prises r\u00e9seaux ,elles-m\u00eames reli\u00e9es \u00e0 une baie de brassage , puis \u00e0 un switch et enfin au serveur de l'\u00e9tablissement...seul \u00e9l\u00e9ment du r\u00e9seau reli\u00e9 \u00e0 internet! \u00c0 une autre \u00e9chelle, des c\u00e2bles sous-marins ont m\u00eame \u00e9t\u00e9 d\u00e9pos\u00e9s au fond des oc\u00e9ans pour relier les continents europ\u00e9ens et am\u00e9ricains: Le r\u00e9seau internet \u00b6 Il y a de nombreuses confusions: les gens emploient indiff\u00e9remment les mots WEB et Internet alors qu'ils ne d\u00e9signent pas la m\u00eame chose. Internet , c'est un immense regroupement de diff\u00e9rents r\u00e9seaux qui ont en commun des protocoles de communication: c'est donc un r\u00e9seau physique , mat\u00e9riel . Un \u00e9l\u00e8ve de NSI ne doit pas faire cette confusion! Le WEB est un service propos\u00e9 sur ce r\u00e9seau comme la messagerie ou le streaming: c'est une couche logicielle, immat\u00e9rielle! Historique \u00b6 \u00c0 la fin des ann\u00e9es 1950, en pleine guerre froide, le DoD (Departement Of Defense (US)) souhaitait disposer d'un r\u00e9seau de communication capable de r\u00e9sister \u00e0 une attaque nucl\u00e9aire. Le r\u00e9seau t\u00e9l\u00e9phonique, vuln\u00e9rable ne suffirait pas. En 1957, alors que les russes lancaient le premier satellite spoutnik , les Am\u00e9ricains cr\u00e9ent une section de recherche militaire appel\u00e9e ARPA . Elle donna naissance en 1969 un r\u00e9seau Arpanet , bas\u00e9 sur la commutation de paquets. Internet \u00e9tait n\u00e9.... Cette toile ainsi tiss\u00e9e entre tous les serveurs, tous les routeurs, tous les ordinateurs, est physiquement le r\u00e9seau Internet . Le r\u00e9seau domostique de base! \u00b6 Depuis 1990 et le d\u00e9but du WEB, les services rendus sur internet n'ont cess\u00e9 d'\u00e9voluer. Les fran\u00e7ais se sont \u00e9quip\u00e9s en cons\u00e9quences. Le point n\u00e9vralgique de votre r\u00e9seau est votre box internet :les principaux fournisseurs d'acc\u00e8s se disputent le march\u00e9(Orange, SFR, Free, Bouygues,...). Votre box a de super pouvoirs: elle attribue une adresse IP \u00e0 toutes les machines qui s'y connectent. C'est un serveur DHCP! elle assure la transition entre votre r\u00e9seau priv\u00e9 (le v\u00f4tre avec vos ordinateurs, vos smartphones, l'imprimante, l'aspirateur, le frigo,...) et le r\u00e9seau public, internet quoi... C'est une passerelle! elle achemine les paquets qu'elle re\u00e7oit de ses h\u00f4tes (ceux pr\u00e9c\u00e9demment cit\u00e9s...) \u00e0 la destination souhait\u00e9e et transmet la r\u00e9ponse en retour. C'est un routeur! D'autres services sont assur\u00e9s par votre box comme le NAT, DNS ou le pare feu mais nous n'en dirons pas plus ici... Vous pouvez m\u00eame communiquer avec votre box Orange de n'importe quel navigateur situ\u00e9 sur un ordinateur de votre r\u00e9seau. Dans la barre d'adresse, saisissez 192.168.1.1 et la page d'administration appara\u00eet(il faut tout de m\u00eame saisir le mot de passe administrateur...): Le r\u00e9seau du lyc\u00e9e \u00b6 C'est un peu la m\u00eame chose que chez vous mais en plus grand( sachez qu'il y a plus de mille ordinateurs dans le lyc\u00e9e!). Les r\u00e9seaux sont class\u00e9s selon leur extension (PAN, LAN, MAN, WAN) dans une hi\u00e9rarchie bien d\u00e9finie. Synth\u00e8se Internet est un r\u00e9seau physique reliant tous les ordinateurs entre eux. Anc\u00eatre d'ARPANET(1969), il a nettement \u00e9volu\u00e9 depuis 1990 et l'apparition du WEB, l'un des services propos\u00e9s sur ce r\u00e9seau(la messagerie, le streaming ou le transfert de fichiers en sont d'autres). Le Local Area Network est l'architecture classique d'un r\u00e9seau domestique. La box propose plusieurs services. Entres autres: DHCP: elle attribue automatiquement une adresse IP \u00e0 une machine souhaitant se connecter \u00e0 son r\u00e9seau. Passerelle: Elle assure le transfert des informations de votre r\u00e9seau vers le r\u00e9seau Internet Un r\u00e9seau logiciel \u00b6 Internet est donc un r\u00e9seau physique reliant finalement tous les ordinateurs entre eux. Mais comment se fait la communication? Comment les \u00e9changes d\u2019informations se font-ils ? Pourquoi les informations ne se perdent pas dans ce r\u00e9seau monstrueux? C\u2019est une histoire de protocole... Derri\u00e8re le rideau... Je souhaite consulter un site WEB. Pour cela, j'utilise un navigateur dans lequel je saisis l'URL du site dans la barre d'adresse et miracle, les informations me parviennent! Mais que s'est-il r\u00e9ellement pass\u00e9???? Il s'agit bien d'une communication entre deux ordinateurs: celui qui effectue la requ\u00eate : c'est le client ! celui qui re\u00e7oit la requ\u00eate: c'est le serveur ! Toutes les proc\u00e9dures de connexion sont transparentes aux yeux de l'utilisateur. Mais sachez qu'elles existent et qu'elles sont ex\u00e9cut\u00e9es \u00e0 une allure vertigineuse, en principe. Vous souhaitez observer ce qui se passe lorsque vous solliciter une site web comme www.lequipe.fr ? Facile, appuyer sur F12 dans votre navigateur Firefox et visualisez dans l'onglet reseau les requ\u00eates apr\u00e8s validation de l'URL ci-dessus. Le client envoie une requ\u00eate http . On utilise ici la m\u00e9thode GET pour obtenir une ressource du serveur distant: celle_ci est la racine () du site web. Vous pouvez consulter le contenu de la requ\u00eate en cliquant sur la premi\u00e8re ligne contenant le GET ... Le serveur r\u00e9pond et fournit le code HTML de la premi\u00e8re page. Plusieurs requ\u00eates(126 exactements) permettent de charger divers \u00e9l\u00e9ments (css, js, font,...) Vous remarquerez la pr\u00e9sence de la m\u00e9thode POST qui permet de transmettre des donn\u00e9es au serveur dans le corps de la requ\u00eate (des cookies ou \u00e9quivalent sans doute ici...). Mais comment contacter le serveur qui h\u00e9berge le site www.lequipe.fr ? Lorsque vous utilisez votre smartphone pour appeler votre copain, c'est la connaissance de son num\u00e9ro qui rend possible la communication (m\u00eame si vous ne le connaissez pas votre machine l'a en m\u00e9moire!). Sur internet , le m\u00eame principe est reconduit. Le serveur a une adresse IP publique : par exemple l'adresse d'un des serveurs de google est 216.58.214.163 . Vous ne me croyez pas! Tapez cette adresse dans la barre d'adresse d'un navigateur et vous verrez... Mais suis-je obligez de conna\u00eetre les adresses IP des millions de serveurs dans le monde? Et bien, NON! Il suffit juste de conna\u00eetre son URL , et encore... les moteurs de recherche nous envoient souvent vers le site recherch\u00e9 \u00e0 partir d'un mot cl\u00e9. Un service d\u00e9di\u00e9 s'occupe alors d'associer \u00e0 cette URL son adresse IP , bien conserv\u00e9e quelque part en France dans un serveur Racine( en fait il y en a plusieurs...). C'est le protocole DNS (Domain Name Service). J'ai compris! Pour contacter un serveur web par exemple, il faut conna\u00eetre son adresse IP qu'un serveur DNS me livre. Mais le probl\u00e8me reste pos\u00e9: comment contacter le serveur racine d'un DNS??? Les routeurs auquels sont n\u00e9cessairement reli\u00e9s votre machine, ont en m\u00e9moire les adresses IP de ces serveurs (parfois m\u00eame ils se trouvent dans le cache de votre navigateur...). Les serveurs racines Les serveurs racines DNS sont g\u00e9r\u00e9s par douze organisations diff\u00e9rentes : deux sont europ\u00e9ennes, une japonaise et les neuf autres sont am\u00e9ricaines. Le sch\u00e9ma suivant montre que si vous ne poss\u00e9dez pas dans votre machine l'adresse IP du site que vous souhaitez solliciter, une premi\u00e8re requ\u00eate est effectu\u00e9e sur un serveur racine(1). Puis le serveur DNS vous r\u00e9pond en vous fournissant l'adresse du serveur web(2). Vous pouvez alors contacter ce serveur(3) qui en retour vous donne le code HTML (4). J'ai compris! Un serveur = une adresse IP ! Mais il y a des millions d'ordinateurs dans le monde. A t-on suffisamment d'adresse IP pour chacun? Le protocole IP repose sur un adressage logique des machines dans le r\u00e9seau ind\u00e9pendamment du r\u00e9seau physique( Ethernet par exemple...): c'est l'adresse IP . En fait le probl\u00e8me m\u00e9rite d\u2019\u00eatre pos\u00e9... D\u2019abord , c\u2019est quoi une adresse IP ? C\u2019est une succession de quatre octets donn\u00e9s sous forme d\u00e9cimale comme 192.172.20.24. Il y a donc \\(2^{32} = 4 294 967 296\\) adresses ! C\u2019est beaucoup et peu \u00e0 la fois. Il y a 3750 lyc\u00e9es en France et presque 1000 ordinateurs par lyc\u00e9e soit 3 750 000 ordinateurs, rien que dans les lyc\u00e9es ! \u00c0 savoir: Il y a \\(2^{32}\\) adresses IP possibles, \u00e9puis\u00e9es d\u00e8s 2011! On se dirige petit \u00e0 petit vers les adresses IPv6(128bits) Il y a historiquement cinq classes d'adresses: certaines sont priv\u00e9es, d'autres publiques. Elles sont caract\u00e9ris\u00e9es par leur NetId et leur HostId : plus le NetId est petit plus le r\u00e9seau est grand! Classe NetId HostId Nombre de clients possibles A 8 24 \\(2^{24}-2\\) B 16 16 \\(2^{16}-2\\) C 24 8 \\(2^{8}-2\\) {: .tabnsi :} Cette notion est un peu d\u00e9suette car manque de souplessse mais m\u00e9rite d'\u00eatre connue... Il existe aussi les classe D et E peu utilis\u00e9es en ce qui nous concerne... Pourquoi -2? Deux adresses sont g\u00e9n\u00e9ralement r\u00e9serv\u00e9es: celle du r\u00e9seau dont le NetId est \u00e0 0 et celle du broadcast dont le NetId est \u00e0 255 Une adresse de broadcast sert \u00e0 diffuser \u00e0 l'ensemble des ordinateurs qui constituent le r\u00e9seau. Mais comment reconna\u00eetre NetId et HostId ? C'est le r\u00f4le du masque de sous-r\u00e9seau Le masque de sous-r\u00e9seau est une adresse IP comme par exemple 255.255.255.0 qui en binaire donne l'horrible \u00e9criture : 11111111.11111111.11111111.00000000 ! Un ET logique entre le masque et une adresse IP permet de conna\u00eetre le NetId donc le HostId de la machine: NOM Adresse IP d\u00e9cimale Adresse IP binaire Address 192.168.10.7/24 11000000.10101000.0001010.0000111 Netmask 255.255.255.0/24 11111111.11111111.11111111.00000000 Network 192.168.10.0/24 11000000.10101000.0001010.0000000 Broadcast 192.168.10.255/24 11000000.10101000.0001010.11111111 {: .tabnsi :} On utilise ici l'adresse d\u00e9cimale point\u00e9e (CIDR) indiquant le nombre de bits \u00e0 1 dans l'adresse du masque de sous r\u00e9seau. Exemple Si l'adresse d'une machine est 192.168.1.121/19 cela signifie que l'adresse du masque est, en binaire 11111111.11111111.11100000.00000000 ( 19 premiers bits \u00e0 1 et le reste \u00e0 0) soit en d\u00e9cimale, 255.255.224.0 . Certaines adresses sont vou\u00e9es \u00e0 des utilisations particuli\u00e8res: Exemple L'adresse 127.0.0.1 (ou simplement ::1 ) est la boucle locale ou simplement localhost . On l'utilise par exemple si sur la m\u00eame machine, vous installez un serveur Web et un client. Synth\u00e8se Les machines reli\u00e9es \u00e0 un r\u00e9seau ont obligatoirement une adresse IP compos\u00e9e de quatre octets en Ipv4. Un adresse IP se compose d'un NetId(identifiant r\u00e9seau) et d'un HostId(identifiant de l'h\u00f4te dans le r\u00e9seau) d\u00e9termin\u00e9s par le masque de sous-r\u00e9seau(voir exercice). Deux machines qui n'ont pas le m\u00eame NetId ne peuvent pas communiquer directement. Il y a des adresses priv\u00e9es (non utilisables sur internet) et d'autres publiques (pour les machines de l'internet). Il y a en tout \\(256^4=4294967296\\) adresses possibles en v4 ce qui n'est pas suffisant pour adresser toutes les machines au monde (d'o\u00f9 le passage progressif vers v6). Piles de protocoles \u00b6 L'envoie de donn\u00e9es sur un r\u00e9seau repose sur le principe d' encapsulation . Chaque couche de la pile des protocoles joue son r\u00f4le et offre son travail \u00e0 la couche suivante. La vid\u00e9o suivante de notre cher Charles Poulmaire pr\u00e9sente bien le proc\u00e9d\u00e9: ici Le mod\u00e8le en couches \u00b6 Le mod\u00e8le OSI d\u00e9crit et uniformise les pratiques d\u00e8s lors qu'un service r\u00e9seau est sollicit\u00e9. Con\u00e7u en 1970, il d\u00e9crit sept couches r\u00e9parties en deux groupes: (source: wikip\u00e9dia) Mais on lui pr\u00e9f\u00e8re un mod\u00e8le simplifi\u00e9 qui met en avant deux protocoles dont il faut conna\u00eetre les r\u00f4les et qui font l'objet du paragraphe suivant. (source: wikip\u00e9dia) Le mod\u00e8le TCP/IP \u00b6 La vid\u00e9o de Charles Poulmaire d\u00e9crit parafaitement le r\u00f4le de ces deux protocoles: Le protocole TCP le mode TCP est en mode connect\u00e9 : dans ce mode les machines source et destination s'accordent avant toute transmission par ce qu'on appelle une poign\u00e9e de main (acknowledgement). On pourra oberver cette synchronisation dans les TP. le mode TCP est en mode fiable :Il d\u00e9coupe les donn\u00e9es(data) propos\u00e9es par la couche application en Datagramme en les num\u00e9rotant de telle fa\u00e7on qu'il est possible de reconstituer les donn\u00e9es \u00e0 la r\u00e9ception de ces datagrammes et de savoir aussi si il en manque. \u00c0 savoir Le protocole TCP est un protocole de la couche Transport. Il existe aussi le protocole UDP qui n'offre pas la m\u00eame efficacit\u00e9. Certes, il d\u00e9coupe les donn\u00e9es en paquet qu'il propose ensuite \u00e0 la prochaine couche mais sans se soucier de leur devenir! Il est par exemple utilis\u00e9 pour envoyer des images obtenues par une webcam dans un lieu public. S'il manque quelques pixels ce n'est pas si grave! Et avantage, la transmission est plus rapide car il n'y a pas d'accus\u00e9 de r\u00e9ception! La couche Transport (TCP ou UDP) livre donc \u00e0 la couche suivante, la couche Internet, des segments ou datagrammes qui ne connaissent pas encore leur destination... Le protocole IP Ce protocole re\u00e7oit des segments et s'assure qu'ils sont envoy\u00e9s \u00e0 la bonne destination. Il tague tous les paquets re\u00e7us par les adresses IP source et destination. \u00c0 la question comment le protocole IP conna\u00eet-il l'adresse IP du destinataire? , une premi\u00e8re r\u00e9ponse a \u00e9t\u00e9 donn\u00e9e pr\u00e9c\u00e9demment: le protocole DNS assure cette fonctionnalit\u00e9. Mais ce n'est pas aussi simple que cela... Synth\u00e8se Les r\u00e8gles pr\u00e9d\u00e9finies qui permettent \u00e0 des machines de communiquer entre elles s'appellent des protocoles . Le mod\u00e8le OSI et sa version simplifi\u00e9e TCP/IP montre le principe de mod\u00e8le en couches et celui d' encapsulation : la couche application g\u00e9n\u00e8re des donn\u00e9es qu'elle livre \u00e0 la couche Transport , puis \u00e0 la couche Internet pour enfin acc\u00e8der au r\u00e9seau . TCP est un protocole de la couche Transport: il a pour but d'assurer la livraison fiable et sans erreur des donn\u00e9es qu'il a pr\u00e9alablement d\u00e9coup\u00e9 en segments. Il fonctionne en mode connect\u00e9: l'\u00e9tablissement de la connexion se fait en trois temps (sync, sync/ack,ack ). UDP est aussi un protocole de cette couche mais n'assur aucune garantie dans la livraison des donn\u00e9es. IP est un protocole de la couche Internet: il adresse tous les datagrammes propos\u00e9s par la couche Transport des adresses Ip source et destination.", "title": "Travail sur les r\u00e9seaux informatiques"}, {"location": "prem/cours_de_reseaux.html#travail-sur-les-reseaux-informatiques", "text": "Notre monde est hyper-connect\u00e9! Connect\u00e9 par des interfaces simples(web /appli.) mais surtout connect\u00e9 au sens physique du terme. Dans une architecture classique de r\u00e9seau, un ordinateur(le client) est reli\u00e9 par un c\u00e2ble, une fibre, une onde \u00e9lectromagn\u00e9tique,... \u00e0 un autre ordinateur(le serveur) qui lui fournit des services (pages web, messagerie, base de donn\u00e9es,...) quasiment en continu. Objectifs Ce cours pr\u00e9cise sans trop de d\u00e9tails, le vocabulaire usuel des r\u00e9seaux et les principes g\u00e9n\u00e9raux de leur fonctionnement. Le travail se terminera par la simulation d'un r\u00e9seau informatique et l'utilisation de biblioth\u00e8ques Python pour communiquer entre deux ordinateurs d'une m\u00eame salle.", "title": "Travail sur les r\u00e9seaux informatiques"}, {"location": "prem/cours_de_reseaux.html#dabord-un-reseau-physique", "text": "Avant tout, pour que deux ordinateurs puissent communiquer entre eux, il faut qu'ils soient reli\u00e9s l'un \u00e0 l'autre . Ce lien physique est essentiellement: un fil (fils de cuivre, fibre optique,...) une onde \u00e9lectromagn\u00e9tique(wifi, bluetooth) Chez vous, la box est physiquement reli\u00e9e au r\u00e9seau t\u00e9l\u00e9phonique (ou fibre) par un c\u00e2ble: le reste du r\u00e9seau y est souvent connect\u00e9 en WIFI... Dans nos salles de NSI, les ordinateurs sont reli\u00e9s gr\u00e2ce des c\u00e2bles RJ45 droits aux prises r\u00e9seaux ,elles-m\u00eames reli\u00e9es \u00e0 une baie de brassage , puis \u00e0 un switch et enfin au serveur de l'\u00e9tablissement...seul \u00e9l\u00e9ment du r\u00e9seau reli\u00e9 \u00e0 internet! \u00c0 une autre \u00e9chelle, des c\u00e2bles sous-marins ont m\u00eame \u00e9t\u00e9 d\u00e9pos\u00e9s au fond des oc\u00e9ans pour relier les continents europ\u00e9ens et am\u00e9ricains:", "title": "D'abord , un r\u00e9seau physique..."}, {"location": "prem/cours_de_reseaux.html#le-reseau-internet", "text": "Il y a de nombreuses confusions: les gens emploient indiff\u00e9remment les mots WEB et Internet alors qu'ils ne d\u00e9signent pas la m\u00eame chose. Internet , c'est un immense regroupement de diff\u00e9rents r\u00e9seaux qui ont en commun des protocoles de communication: c'est donc un r\u00e9seau physique , mat\u00e9riel . Un \u00e9l\u00e8ve de NSI ne doit pas faire cette confusion! Le WEB est un service propos\u00e9 sur ce r\u00e9seau comme la messagerie ou le streaming: c'est une couche logicielle, immat\u00e9rielle!", "title": "Le r\u00e9seau internet"}, {"location": "prem/cours_de_reseaux.html#historique", "text": "\u00c0 la fin des ann\u00e9es 1950, en pleine guerre froide, le DoD (Departement Of Defense (US)) souhaitait disposer d'un r\u00e9seau de communication capable de r\u00e9sister \u00e0 une attaque nucl\u00e9aire. Le r\u00e9seau t\u00e9l\u00e9phonique, vuln\u00e9rable ne suffirait pas. En 1957, alors que les russes lancaient le premier satellite spoutnik , les Am\u00e9ricains cr\u00e9ent une section de recherche militaire appel\u00e9e ARPA . Elle donna naissance en 1969 un r\u00e9seau Arpanet , bas\u00e9 sur la commutation de paquets. Internet \u00e9tait n\u00e9.... Cette toile ainsi tiss\u00e9e entre tous les serveurs, tous les routeurs, tous les ordinateurs, est physiquement le r\u00e9seau Internet .", "title": "Historique"}, {"location": "prem/cours_de_reseaux.html#le-reseau-domostique-de-base", "text": "Depuis 1990 et le d\u00e9but du WEB, les services rendus sur internet n'ont cess\u00e9 d'\u00e9voluer. Les fran\u00e7ais se sont \u00e9quip\u00e9s en cons\u00e9quences. Le point n\u00e9vralgique de votre r\u00e9seau est votre box internet :les principaux fournisseurs d'acc\u00e8s se disputent le march\u00e9(Orange, SFR, Free, Bouygues,...). Votre box a de super pouvoirs: elle attribue une adresse IP \u00e0 toutes les machines qui s'y connectent. C'est un serveur DHCP! elle assure la transition entre votre r\u00e9seau priv\u00e9 (le v\u00f4tre avec vos ordinateurs, vos smartphones, l'imprimante, l'aspirateur, le frigo,...) et le r\u00e9seau public, internet quoi... C'est une passerelle! elle achemine les paquets qu'elle re\u00e7oit de ses h\u00f4tes (ceux pr\u00e9c\u00e9demment cit\u00e9s...) \u00e0 la destination souhait\u00e9e et transmet la r\u00e9ponse en retour. C'est un routeur! D'autres services sont assur\u00e9s par votre box comme le NAT, DNS ou le pare feu mais nous n'en dirons pas plus ici... Vous pouvez m\u00eame communiquer avec votre box Orange de n'importe quel navigateur situ\u00e9 sur un ordinateur de votre r\u00e9seau. Dans la barre d'adresse, saisissez 192.168.1.1 et la page d'administration appara\u00eet(il faut tout de m\u00eame saisir le mot de passe administrateur...):", "title": "Le r\u00e9seau domostique de base!"}, {"location": "prem/cours_de_reseaux.html#le-reseau-du-lycee", "text": "C'est un peu la m\u00eame chose que chez vous mais en plus grand( sachez qu'il y a plus de mille ordinateurs dans le lyc\u00e9e!). Les r\u00e9seaux sont class\u00e9s selon leur extension (PAN, LAN, MAN, WAN) dans une hi\u00e9rarchie bien d\u00e9finie. Synth\u00e8se Internet est un r\u00e9seau physique reliant tous les ordinateurs entre eux. Anc\u00eatre d'ARPANET(1969), il a nettement \u00e9volu\u00e9 depuis 1990 et l'apparition du WEB, l'un des services propos\u00e9s sur ce r\u00e9seau(la messagerie, le streaming ou le transfert de fichiers en sont d'autres). Le Local Area Network est l'architecture classique d'un r\u00e9seau domestique. La box propose plusieurs services. Entres autres: DHCP: elle attribue automatiquement une adresse IP \u00e0 une machine souhaitant se connecter \u00e0 son r\u00e9seau. Passerelle: Elle assure le transfert des informations de votre r\u00e9seau vers le r\u00e9seau Internet", "title": "Le r\u00e9seau du lyc\u00e9e"}, {"location": "prem/cours_de_reseaux.html#un-reseau-logiciel", "text": "Internet est donc un r\u00e9seau physique reliant finalement tous les ordinateurs entre eux. Mais comment se fait la communication? Comment les \u00e9changes d\u2019informations se font-ils ? Pourquoi les informations ne se perdent pas dans ce r\u00e9seau monstrueux? C\u2019est une histoire de protocole... Derri\u00e8re le rideau... Je souhaite consulter un site WEB. Pour cela, j'utilise un navigateur dans lequel je saisis l'URL du site dans la barre d'adresse et miracle, les informations me parviennent! Mais que s'est-il r\u00e9ellement pass\u00e9???? Il s'agit bien d'une communication entre deux ordinateurs: celui qui effectue la requ\u00eate : c'est le client ! celui qui re\u00e7oit la requ\u00eate: c'est le serveur ! Toutes les proc\u00e9dures de connexion sont transparentes aux yeux de l'utilisateur. Mais sachez qu'elles existent et qu'elles sont ex\u00e9cut\u00e9es \u00e0 une allure vertigineuse, en principe. Vous souhaitez observer ce qui se passe lorsque vous solliciter une site web comme www.lequipe.fr ? Facile, appuyer sur F12 dans votre navigateur Firefox et visualisez dans l'onglet reseau les requ\u00eates apr\u00e8s validation de l'URL ci-dessus. Le client envoie une requ\u00eate http . On utilise ici la m\u00e9thode GET pour obtenir une ressource du serveur distant: celle_ci est la racine () du site web. Vous pouvez consulter le contenu de la requ\u00eate en cliquant sur la premi\u00e8re ligne contenant le GET ... Le serveur r\u00e9pond et fournit le code HTML de la premi\u00e8re page. Plusieurs requ\u00eates(126 exactements) permettent de charger divers \u00e9l\u00e9ments (css, js, font,...) Vous remarquerez la pr\u00e9sence de la m\u00e9thode POST qui permet de transmettre des donn\u00e9es au serveur dans le corps de la requ\u00eate (des cookies ou \u00e9quivalent sans doute ici...). Mais comment contacter le serveur qui h\u00e9berge le site www.lequipe.fr ? Lorsque vous utilisez votre smartphone pour appeler votre copain, c'est la connaissance de son num\u00e9ro qui rend possible la communication (m\u00eame si vous ne le connaissez pas votre machine l'a en m\u00e9moire!). Sur internet , le m\u00eame principe est reconduit. Le serveur a une adresse IP publique : par exemple l'adresse d'un des serveurs de google est 216.58.214.163 . Vous ne me croyez pas! Tapez cette adresse dans la barre d'adresse d'un navigateur et vous verrez... Mais suis-je obligez de conna\u00eetre les adresses IP des millions de serveurs dans le monde? Et bien, NON! Il suffit juste de conna\u00eetre son URL , et encore... les moteurs de recherche nous envoient souvent vers le site recherch\u00e9 \u00e0 partir d'un mot cl\u00e9. Un service d\u00e9di\u00e9 s'occupe alors d'associer \u00e0 cette URL son adresse IP , bien conserv\u00e9e quelque part en France dans un serveur Racine( en fait il y en a plusieurs...). C'est le protocole DNS (Domain Name Service). J'ai compris! Pour contacter un serveur web par exemple, il faut conna\u00eetre son adresse IP qu'un serveur DNS me livre. Mais le probl\u00e8me reste pos\u00e9: comment contacter le serveur racine d'un DNS??? Les routeurs auquels sont n\u00e9cessairement reli\u00e9s votre machine, ont en m\u00e9moire les adresses IP de ces serveurs (parfois m\u00eame ils se trouvent dans le cache de votre navigateur...). Les serveurs racines Les serveurs racines DNS sont g\u00e9r\u00e9s par douze organisations diff\u00e9rentes : deux sont europ\u00e9ennes, une japonaise et les neuf autres sont am\u00e9ricaines. Le sch\u00e9ma suivant montre que si vous ne poss\u00e9dez pas dans votre machine l'adresse IP du site que vous souhaitez solliciter, une premi\u00e8re requ\u00eate est effectu\u00e9e sur un serveur racine(1). Puis le serveur DNS vous r\u00e9pond en vous fournissant l'adresse du serveur web(2). Vous pouvez alors contacter ce serveur(3) qui en retour vous donne le code HTML (4). J'ai compris! Un serveur = une adresse IP ! Mais il y a des millions d'ordinateurs dans le monde. A t-on suffisamment d'adresse IP pour chacun? Le protocole IP repose sur un adressage logique des machines dans le r\u00e9seau ind\u00e9pendamment du r\u00e9seau physique( Ethernet par exemple...): c'est l'adresse IP . En fait le probl\u00e8me m\u00e9rite d\u2019\u00eatre pos\u00e9... D\u2019abord , c\u2019est quoi une adresse IP ? C\u2019est une succession de quatre octets donn\u00e9s sous forme d\u00e9cimale comme 192.172.20.24. Il y a donc \\(2^{32} = 4 294 967 296\\) adresses ! C\u2019est beaucoup et peu \u00e0 la fois. Il y a 3750 lyc\u00e9es en France et presque 1000 ordinateurs par lyc\u00e9e soit 3 750 000 ordinateurs, rien que dans les lyc\u00e9es ! \u00c0 savoir: Il y a \\(2^{32}\\) adresses IP possibles, \u00e9puis\u00e9es d\u00e8s 2011! On se dirige petit \u00e0 petit vers les adresses IPv6(128bits) Il y a historiquement cinq classes d'adresses: certaines sont priv\u00e9es, d'autres publiques. Elles sont caract\u00e9ris\u00e9es par leur NetId et leur HostId : plus le NetId est petit plus le r\u00e9seau est grand! Classe NetId HostId Nombre de clients possibles A 8 24 \\(2^{24}-2\\) B 16 16 \\(2^{16}-2\\) C 24 8 \\(2^{8}-2\\) {: .tabnsi :} Cette notion est un peu d\u00e9suette car manque de souplessse mais m\u00e9rite d'\u00eatre connue... Il existe aussi les classe D et E peu utilis\u00e9es en ce qui nous concerne... Pourquoi -2? Deux adresses sont g\u00e9n\u00e9ralement r\u00e9serv\u00e9es: celle du r\u00e9seau dont le NetId est \u00e0 0 et celle du broadcast dont le NetId est \u00e0 255 Une adresse de broadcast sert \u00e0 diffuser \u00e0 l'ensemble des ordinateurs qui constituent le r\u00e9seau. Mais comment reconna\u00eetre NetId et HostId ? C'est le r\u00f4le du masque de sous-r\u00e9seau Le masque de sous-r\u00e9seau est une adresse IP comme par exemple 255.255.255.0 qui en binaire donne l'horrible \u00e9criture : 11111111.11111111.11111111.00000000 ! Un ET logique entre le masque et une adresse IP permet de conna\u00eetre le NetId donc le HostId de la machine: NOM Adresse IP d\u00e9cimale Adresse IP binaire Address 192.168.10.7/24 11000000.10101000.0001010.0000111 Netmask 255.255.255.0/24 11111111.11111111.11111111.00000000 Network 192.168.10.0/24 11000000.10101000.0001010.0000000 Broadcast 192.168.10.255/24 11000000.10101000.0001010.11111111 {: .tabnsi :} On utilise ici l'adresse d\u00e9cimale point\u00e9e (CIDR) indiquant le nombre de bits \u00e0 1 dans l'adresse du masque de sous r\u00e9seau. Exemple Si l'adresse d'une machine est 192.168.1.121/19 cela signifie que l'adresse du masque est, en binaire 11111111.11111111.11100000.00000000 ( 19 premiers bits \u00e0 1 et le reste \u00e0 0) soit en d\u00e9cimale, 255.255.224.0 . Certaines adresses sont vou\u00e9es \u00e0 des utilisations particuli\u00e8res: Exemple L'adresse 127.0.0.1 (ou simplement ::1 ) est la boucle locale ou simplement localhost . On l'utilise par exemple si sur la m\u00eame machine, vous installez un serveur Web et un client. Synth\u00e8se Les machines reli\u00e9es \u00e0 un r\u00e9seau ont obligatoirement une adresse IP compos\u00e9e de quatre octets en Ipv4. Un adresse IP se compose d'un NetId(identifiant r\u00e9seau) et d'un HostId(identifiant de l'h\u00f4te dans le r\u00e9seau) d\u00e9termin\u00e9s par le masque de sous-r\u00e9seau(voir exercice). Deux machines qui n'ont pas le m\u00eame NetId ne peuvent pas communiquer directement. Il y a des adresses priv\u00e9es (non utilisables sur internet) et d'autres publiques (pour les machines de l'internet). Il y a en tout \\(256^4=4294967296\\) adresses possibles en v4 ce qui n'est pas suffisant pour adresser toutes les machines au monde (d'o\u00f9 le passage progressif vers v6).", "title": "Un r\u00e9seau logiciel"}, {"location": "prem/cours_de_reseaux.html#piles-de-protocoles", "text": "L'envoie de donn\u00e9es sur un r\u00e9seau repose sur le principe d' encapsulation . Chaque couche de la pile des protocoles joue son r\u00f4le et offre son travail \u00e0 la couche suivante. La vid\u00e9o suivante de notre cher Charles Poulmaire pr\u00e9sente bien le proc\u00e9d\u00e9: ici", "title": "Piles de protocoles"}, {"location": "prem/cours_de_reseaux.html#le-modele-en-couches", "text": "Le mod\u00e8le OSI d\u00e9crit et uniformise les pratiques d\u00e8s lors qu'un service r\u00e9seau est sollicit\u00e9. Con\u00e7u en 1970, il d\u00e9crit sept couches r\u00e9parties en deux groupes: (source: wikip\u00e9dia) Mais on lui pr\u00e9f\u00e8re un mod\u00e8le simplifi\u00e9 qui met en avant deux protocoles dont il faut conna\u00eetre les r\u00f4les et qui font l'objet du paragraphe suivant. (source: wikip\u00e9dia)", "title": "Le mod\u00e8le en couches"}, {"location": "prem/cours_de_reseaux.html#le-modele-tcpip", "text": "La vid\u00e9o de Charles Poulmaire d\u00e9crit parafaitement le r\u00f4le de ces deux protocoles: Le protocole TCP le mode TCP est en mode connect\u00e9 : dans ce mode les machines source et destination s'accordent avant toute transmission par ce qu'on appelle une poign\u00e9e de main (acknowledgement). On pourra oberver cette synchronisation dans les TP. le mode TCP est en mode fiable :Il d\u00e9coupe les donn\u00e9es(data) propos\u00e9es par la couche application en Datagramme en les num\u00e9rotant de telle fa\u00e7on qu'il est possible de reconstituer les donn\u00e9es \u00e0 la r\u00e9ception de ces datagrammes et de savoir aussi si il en manque. \u00c0 savoir Le protocole TCP est un protocole de la couche Transport. Il existe aussi le protocole UDP qui n'offre pas la m\u00eame efficacit\u00e9. Certes, il d\u00e9coupe les donn\u00e9es en paquet qu'il propose ensuite \u00e0 la prochaine couche mais sans se soucier de leur devenir! Il est par exemple utilis\u00e9 pour envoyer des images obtenues par une webcam dans un lieu public. S'il manque quelques pixels ce n'est pas si grave! Et avantage, la transmission est plus rapide car il n'y a pas d'accus\u00e9 de r\u00e9ception! La couche Transport (TCP ou UDP) livre donc \u00e0 la couche suivante, la couche Internet, des segments ou datagrammes qui ne connaissent pas encore leur destination... Le protocole IP Ce protocole re\u00e7oit des segments et s'assure qu'ils sont envoy\u00e9s \u00e0 la bonne destination. Il tague tous les paquets re\u00e7us par les adresses IP source et destination. \u00c0 la question comment le protocole IP conna\u00eet-il l'adresse IP du destinataire? , une premi\u00e8re r\u00e9ponse a \u00e9t\u00e9 donn\u00e9e pr\u00e9c\u00e9demment: le protocole DNS assure cette fonctionnalit\u00e9. Mais ce n'est pas aussi simple que cela... Synth\u00e8se Les r\u00e8gles pr\u00e9d\u00e9finies qui permettent \u00e0 des machines de communiquer entre elles s'appellent des protocoles . Le mod\u00e8le OSI et sa version simplifi\u00e9e TCP/IP montre le principe de mod\u00e8le en couches et celui d' encapsulation : la couche application g\u00e9n\u00e8re des donn\u00e9es qu'elle livre \u00e0 la couche Transport , puis \u00e0 la couche Internet pour enfin acc\u00e8der au r\u00e9seau . TCP est un protocole de la couche Transport: il a pour but d'assurer la livraison fiable et sans erreur des donn\u00e9es qu'il a pr\u00e9alablement d\u00e9coup\u00e9 en segments. Il fonctionne en mode connect\u00e9: l'\u00e9tablissement de la connexion se fait en trois temps (sync, sync/ack,ack ). UDP est aussi un protocole de cette couche mais n'assur aucune garantie dans la livraison des donn\u00e9es. IP est un protocole de la couche Internet: il adresse tous les datagrammes propos\u00e9s par la couche Transport des adresses Ip source et destination.", "title": "Le mod\u00e8le TCP/IP"}, {"location": "prem/frontend.html", "text": "Le WEB \u00b6 Qu\u00e9zaco??? \u00b6 Info Le WEB ou plus pr\u00e9cis\u00e9ment le WorldWideWeb est un syst\u00e8me hypertexte public fonctionnant sur l' internet . Il permet de consulter, avec un navigateur, des pages accessibles sur des sites. En 1989, Tim Berners-Lee engag\u00e9 au CERN de Gen\u00e8ve, propose de d\u00e9velopper un syst\u00e8me organis\u00e9 en toile, afin d'am\u00e9liorer la diffusion des informations internes. En 1990, na\u00eet alors le premier serveur WEB: la premi\u00e8re page existe toujours et vous pouvez la consulter ici . Le premier langage du WEB: le HTML \u00b6 Le premier langage utilis\u00e9 pour d\u00e9crire le contenu d'une page web est le langage HTML(HyperTextMarkupLanguage). Ce n'est donc pas un langage de programmation mais un langage de description comme Latex par exemple... Il repose sur des balises et leurs attributs qui d\u00e9crivent un contenu: titre, paragraphe, ent\u00eate, images, liens,.... Ci-dessous un exemple relativement simple d'une page web: Un exemple tr\u00e8s simple de page web <!DOCTYPE html> < html > < head > < title > Le titre de ma premi\u00e8re page </ title > </ head > < body > < h1 > Cool! mon premier titre </ h1 > < p > Il s'agit ici d'un paragraphe( balises p). < br > Il faut savoir que les balises ont par d\u00e9faut des attributs (qu'on peut changer ensuite...). < br > Par exemple, une balise H1 propose un titre plus grand qu'une balise H2 ou H3.... </ p > </ body > </ html > Lire ou \u00e9crire? Il faut savoir! \u00b6 On \u00e9crit du code HTML dans un \u00e9diteur ( NotePad, visualCode, blocnote,...) et on le lit avec un navigateur . La manipulation habituelle est celle d\u00e9crite dans l'exercice suivant: \u00c9diter du code et le lire Choisir un \u00e9diteur de texte (Notepad ou Visual Studio Code est id\u00e9al... mais le blocnote suffirait!) Recopier le code HTML pr\u00e9c\u00e9dent et sauvegardez ce fichier sous le nom index avec l' extension HTML . En g\u00e9n\u00e9ral, les logiciels d'\u00e9dition utilis\u00e9s permettent de le faire assez facilement... Vous venez alors de cr\u00e9er le fichier index.html qui s'ouvre par d\u00e9faut avec un navigateur. Double-cliquez sur ce fichier: un navigateur doit s'ouvrir et afficher le contenu de la page web. En observant le site sur le navigateur, \u00e0 quoi sert la balise br ? Fermez ensuite le logiciel que vous avez utilis\u00e9 pour \u00e9diter le code HTML. Il arrive fr\u00e9quemment de modifier un code existant. Par exemple, comment ajouter des \u00e9lements au fichier index.html ? Comment \u00e9crire sur ce doument? C'est simple; faites un clic-droit et le menu contextuel qui s'ouvre vous permet de choisir ouvrir avec ... , le logiciel d'\u00e9dition. Je vous rappelle que par d\u00e9faut, un fichier html s'ouvre en lecture avec un navigateur... Modifier du code HTML Ajouter le code HTML suivant au fichier pr\u00e9c\u00e9dent entre les balises fermantes <\\p> et <\\body> . < h2 > C'est mon deuxi\u00e8me titre </ h2 > < p > Remarquez que le titre H2 est plus petit que celui de H1 </ p > Lire le nouveau document pour observer les changements effectu\u00e9s. Pour actualiser une page dans un navigateur, il suffit d'appuyer sur la touche F5 . La W3C schools \u00b6 Le W3C est un consortium charg\u00e9e de d\u00e9velopper et maintenir les standards du WEB que sont les langages HTML,CSS,PHP, ... mais aussi le format d'image png (Portable Network Graphics) id\u00e9al pour les pages WEB. Il offre aussi la possibilit\u00e9 de valider votre code en vous indiquant si vous avez respect\u00e9 les normes en vigueur. Ce consortium propose une \u00e9cole d'apprentissage du code HTML et d'autres... c'est la W3schools! Vous trouverez le lien ici . Les exercices qui suivent ont \u00e9t\u00e9 inspir\u00e9s par les exemples propos\u00e9s dans cette \u00e9cole. Apprentissage du HTML \u00b6 Cette partie s'int\u00e9resse \u00e0 la partie codage et vous donne au fur et \u00e0 mesure de nouvelles fonctionnalit\u00e9s. Il faut donc \u00e0 chaque \u00e9tape modifier ou compl\u00e9ter son code HTML dans un logiciel d'\u00e9dition et visualiser dans un navigateur, le r\u00e9sultat de vos modifications. N'oubliez pas d': enregistrer votre fichier modifi\u00e9 (touches ctrl + S ) actualiser votre page dans le navigateur (touche F5 ) On utilisera comme point de d\u00e9part, le code de la page web donn\u00e9 dans la partie pr\u00e9c\u00e9dente: Code simple que nous allons compl\u00e9ter <!DOCTYPE html> < html > < head > < title > Le titre de ma premi\u00e8re page </ title > </ head > < body > < h1 > Cool! mon premier titre </ h1 > < p > Il s'agit ici d'un paragraphe( balises p). < br > Il faut savoir que les balises ont par d\u00e9faut des attributs (qu'on peut changer ensuite...). < br > Par exemple, une balise H1 propose un titre plus grand qu'une balise H2 ou H3.... </ p > < h2 > C'est mon deuxi\u00e8me titre </ h2 > < p > Remarquez que le titre H2 est plus petit que celui de H1 </ p > </ body > </ html > Des attributs pour formater \u00e0 volont\u00e9... \u00b6 Toutes les balises ont par d\u00e9faut , des attributs de couleur, de grosseur, de positionnement qui peuvent \u00eatre modifi\u00e9s. Quelques exemples sont propos\u00e9s ici. Ajouter des attributs aux balises Modifier la balise body comme ceci: < body style = \"background-color:powderblue;\" > Modifier la balise H1 : < h1 style = \"color:Tomato; font-size:300%;text-align:center;\" > Modifier la balise H2 afin qu'elle soit aussi align\u00e9e au centre avec la couleur MediumSeaGreen . Enfin faites en sorte que les paragraphes soient centr\u00e9s avec un fond de couleur que vous pouvez choisir parmi les possibilit\u00e9s offertes ici \u00c0 retenir! Tous les \u00e9l\u00e9ments HTML ont un style que vous pouvez d\u00e9finir ou red\u00e9finir \u00e0 souhait... Certains sont simples d'autres plus avanc\u00e9s. Un style balaise! Essayez ce style sur les balise p: < p style = \"background: linear-gradient(to right,#ffbe02a1 0px,#fd606aba 100%); padding: 10px; border-radius: 10px;\" > C'est joli, non? Des commentaires pour comprendre \u00b6 Dans tout langage informatique, on peut (doit?) ajouter des commentaires qui permettent d'amener quelques explications aux choix effectu\u00e9s: ces lignes ne sont pas interpr\u00e9t\u00e9es par le navigateur. Code simple que nous allons commenter <!DOCTYPE html> < html > < head > <!-- Les commentaires sont int\u00e9gr\u00e9s au code par ces balises--> < title > Le titre de ma premi\u00e8re page </ title > </ head > < body > < h1 > Cool! mon premier titre </ h1 > <!-- bg en degrad\u00e9 vers la droite d'une couleur vers une autre--> <!-- le padding est le rembourrage dans l'\u00e9l\u00e9ment m\u00e8re--> <!-- le rayon du coin de la pordure est de 10px--> < p style = \"background: linear-gradient(to right,#ffbe02a1 0px,#fd606aba 100%); padding: 10px; border-radius: 10px;\" > Il s'agit ici d'un paragraphe( balises p). < br > Il faut savoir que les balises ont par d\u00e9fauts des attributs (qu'on peut changer ensuite...). < br > Par exemple, une balise H1 propose un titre plus grand qu'une balise H2 ou H3.... </ p > </ body > </ html > On peut aussi utiliser des balises de commentaires pour isoler une partie du code afin qu'elle ne soit pas lues par le navigateur. Ins\u00e9rer des liens et des images \u00b6 Une page web contient souvent des images. Le code ci-dessous permet d'int\u00e9grer l'image du logo de la nsi du lyc\u00e9e \u00e0 r\u00e9cuperer ici . < img src = \"img/logoNSI.png\" alt = \"le logo de la NSI\" > Si vous souhaitez ins\u00e9rer un lien vers un autre site sur un mot, une image, ... il faudra alors int\u00e9grer l'instruction suivante \u00e0 votre code: < a href = \"https://lyceedebaudre.net/\" > Le lyc\u00e9e </ a > Le lien se trouve sur la phrase le lyc\u00e9e : en cliquant dessus vous \u00eates dirig\u00e9 vers le site dont l' URL est pass\u00e9 en param\u00e8tre. Ins\u00e9rer une image et un lien vers un autre site Cr\u00e9er un dossier img situ\u00e9 au m\u00eame niveau d'arborescence que votre fichier index.html et placez-y l'image du logo. Ins\u00e9rer l'image dans votre code et visualisez que tout fonctionne bien dans le navigateur. Le chemin de la source est-il absolu? relatif? Ins\u00e9rer un lien vers ce site dans votre code o\u00f9 vous le souhaitez ! Vous voulez en savoir davantage? Aucun soucis, cliquez ici Une question simple! \u00c0 quoi sert la balise map ? Un tableau? \u00b6 Vous souhaitez ins\u00e9rer un tableau \u00e0 votre code? Rien de plus simple (ou presque...). Un simple tableau! Ins\u00e9rer ce code au v\u00f4tre < table > < tr > < th > Company </ th > < th > Contact </ th > < th > Country </ th > </ tr > < tr > < td > Alfreds Futterkiste </ td > < td > Maria Anders </ td > < td > Germany </ td > </ tr > < tr > < td > Centro comercial Moctezuma </ td > < td > Francisco Chang </ td > < td > Mexico </ td > </ tr > < tr > < td > Ernst Handel </ td > < td > Roland Mendel </ td > < td > Austria </ td > </ tr > < tr > < td > Island Trading </ td > < td > Helen Bennett </ td > < td > UK </ td > </ tr > < tr > < td > Laughing Bacchus Winecellars </ td > < td > Yoshi Tannamuri </ td > < td > Canada </ td > </ tr > < tr > < td > Magazzini Alimentari Riuniti </ td > < td > Giovanni Rovelli </ td > < td > Italy </ td > </ tr > </ table > Vous souhaitez le rendre plus joli encore? Ins\u00e9rer les styles suivants aux balises concern\u00e9es... < table style = \"font-family: arial, sans-serif; border-collapse: collapse; width: 100%;\" > < tr style = \"border: 1px solid #d80d0d; text-align: left; padding: 8px; \" > Remarquez comment il est p\u00e9nible d'ajouter les attributs de style \u00e0 toutes les balises concern\u00e9es. Le paragraphe suivant permet de contourner ce probl\u00e8me! Styl\u00e9e la balise!! \u00b6 D\u00e9finir le style de chaque balise peut s'av\u00e9rer fastidieux. Dans le tableau pr\u00e9c\u00e9dent il a fallu compl\u00e9ter toutes les balises <tr> , une par une... ce qui n'est pas tr\u00e8s productif. Il existe une balise qui permet de rassembler tous les styles. \u00c0 retenir! La balise <style> dans l'ent\u00eate du fichier recense l'ensemble des styles impos\u00e9s sur les diff\u00e9rentes balises. Ainsi tous les styles sont-ils d\u00e9finis au d\u00e9part: le code s'en trouve largement simplifi\u00e9... Regrouper les styles Recopier le code suivant entre les balises head et supprimer les styles dans les balises. <!DOCTYPE html> < html > < head > < title > Le titre de ma premi\u00e8re page </ title > < style > body { background-color : powderblue ;} h1 , h2 { color : Tomato ; font-size : 300 % ; text-align : center ;} p { background : linear-gradient ( to right , #ffbe02 a1 0 px , #fd606a ba 100 % ); padding : 10 px ; border-radius : 10 px ; } table { font-family : arial , sans-serif ; border-collapse : collapse ; width : 100 % ;} tr { border : 1 px solid #d80d0d ; text-align : left ; padding : 8 px ;} </ style > </ head > < body > < h1 > Cool! mon premier titre </ h1 > < p > Il s'agit ici d'un paragraphe( balises p). < br > Il faut savoir que les balises ont par d\u00e9fauts des attributs (qu'on peut changer ensuite...). < br > Par exemple, une balise H1 propose un titre plus grand qu'une balise H2 ou H3.... </ p > < h2 > C'est mon deuxi\u00e8me titre </ h2 > ... ... Seul probl\u00e8me: les m\u00eames \u00e9l\u00e9ments ont le m\u00eame style! Mais on peut contourner le probl\u00e8me en taggant certaines balises... Les identifiants n'ont pas la classe! \u00b6 Comment faire si on veut distinguer le style de deux paragraphes par exemple? Le regroupement des styles entre les balises du m\u00eame nom ne permet plus de personnaliser ces affichages. Pas de panique! Tout est pr\u00e9vu, il suffit de tagger les balises par des classes( class ) ou des idendificateurs ( id ). Imaginons que nous souhaitions que les paragraphes d\u00e9finis pas le code pr\u00e9c\u00e9dent n'aient pas les m\u00eames couleurs. On va alors: tagger chaque balise <p> par une classe d\u00e9finir le style de la classe \u00e0 l'int\u00e9rieur de la balise <style> Le code suivant devient alors... <!DOCTYPE html> < html > < head > < title > Le titre de ma premi\u00e8re page </ title > < style > body { background-color : powderblue ;} h1 , h2 { color : Tomato ; font-size : 300 % ; text-align : center ;} p { padding : 10 px ; border-radius : 10 px ; } /* premiere classe */ . choix1 { background : linear-gradient ( to right , #ffbe02 a1 0 px , #fd606a ba 100 % ); } /* deuxieme classe: inversion du sens de degrade */ . choix2 { background : linear-gradient ( to left , #ffbe02 a1 0 px , #fd606a ba 100 % ); } table { font-family : arial , sans-serif ; border-collapse : collapse ; width : 100 % ;} tr { border : 1 px solid #d80d0d ; text-align : left ; padding : 8 px ; background-color : #dddddd ;} </ style > </ head > < body > < h1 > Cool! mon premier titre </ h1 > <!--tag du premier paragraphe--> < p class = \"choix1\" > Il s'agit ici d'un paragraphe( balises p). < br > Il faut savoir que les balises ont par d\u00e9fauts des attributs (qu'on peut changer ensuite...). < br > Par exemple, une balise H1 propose un titre plus grand qu'une balise H2 ou H3.... </ p > < h2 > C'est mon deuxi\u00e8me titre </ h2 > <!-- tag du deuxi\u00e8me paragraphe --> < p class = \"choix2\" > Remarquez que le titre H2 est plus petit que celui de H1 </ p > < table > < tr > < th > Company </ th > < th > Contact </ th > < th > Country </ th > </ tr > < tr > < td > Alfreds Futterkiste </ td > < td > Maria Anders </ td > < td > Germany </ td > </ tr > < tr > < td > Centro comercial Moctezuma </ td > < td > Francisco Chang </ td > < td > Mexico </ td > </ tr > < tr > < td > Ernst Handel </ td > < td > Roland Mendel </ td > < td > Austria </ td > </ tr > < tr > < td > Island Trading </ td > < td > Helen Bennett </ td > < td > UK </ td > </ tr > < tr > < td > Laughing Bacchus Winecellars </ td > < td > Yoshi Tannamuri </ td > < td > Canada </ td > </ tr > < tr > < td > Magazzini Alimentari Riuniti </ td > < td > Giovanni Rovelli </ td > < td > Italy </ td > </ tr > </ table > </ body > </ html > Ainsi, les paragraphes ont-ils: un style commun( padding et border-radius ) un style diff\u00e9rent (le sens du d\u00e9grad\u00e9) Cr\u00e9er des classes On peut ajouter un background-color aux balises <tr> . Je voudrais que les lignes de rang pair est une couleur d'arri\u00e8re plan de #777777 et celles de rang impair une couleur #dddddd . Pour cela: Cr\u00e9er deux classes bg1 et bg2 dans les balises <style> tagger les balises <tr> pour r\u00e9pondre \u00e0 ma volont\u00e9 Les classes ont une autre fonction: celle de pouvoir identifier des \u00e9l\u00e9ments et d'agir sur eux (vois cours sur le CSS et JS). On peut aussi utiliser un identifiant ( id ) pour d\u00e9signer un et un seul \u00e9l\u00e9ment(une balise quoi..) dans le DOM (Document Objet Model). C'est la diff\u00e9rence entre les deux tags : \u00c0 retenir! Les class permettent d'identifier plusieurs \u00e9l\u00e9ments mais l' id seulement un! Alors que les noms de classes se d\u00e9clarent dans les balises <style> avec des .nom_de_la_classe , les identifiants sont d\u00e9finis aux m\u00eames endroits par #nom_du_id . Cr\u00e9er un identifiant On va tagger la balise <h2> par un idendifiant. Pour cela suivre les instructions suivantes: Ajouter entre les balises <style> : #montitre { background-color: lightblue; color: black; padding: 40px; text-align: center; } Ajouter \u00e0 la balise <h2> l'identifiant id = \"montitre\" : < h2 id = \"montitre\" > Proposez une nouvelle couleur pour cet identifiant. C'est cool, non? En mode professionnel! \u00b6 Jusqu'\u00e0 pr\u00e9sent, les styles de toutes les balises sont regroup\u00e9s entre les balises \u00e9ponymes. En programmation comme en langage de description, on pr\u00e9f\u00e8re s\u00e9parer le contenu(le fond!) de son apparence(la forme!). Aussi va t-on cr\u00e9er un fichier particulier, appel\u00e9 feuille de style qui permettra de formater le contenu html. Ce fichier porte l'extension .css et regroupe tous les styles. Cr\u00e9er une feuille de style Suivez les instrutions suivantes: Cr\u00e9er au m\u00eame niveau d'arborescence que le fichier index.html le dossier CSS \u00e0 c\u00f4t\u00e9 de clui des images img . Ouvrez le blocnote et cr\u00e9ez un nouveau fichier. Copier dans ce dernier fichier, l'ensemble des styles entre les balises <style> (sans les balises) et supprimer ce contenu du fichier html (y compris les balises <style> et <\\style> ) Sauvegarder le fichier sous le nom monstyle.css dans le dossier CSS en s\u00e9lectionnant Tous les fichiers \u00e0 l'endroit indiqu\u00e9... F\u00e9licitations! Vous venez de cr\u00e9er votre premi\u00e8re feuille de style! Maintenant il faut indiquer au document index.html o\u00f9 se trouve la feuille de style charg\u00e9e de le formater: c'est ce que nous appelons attacher la feuille de style ! Attacher une feuille de style Suivez les instrutions suivantes: Ajouter la balise <link rel=\"stylesheet\" href=\"CSS/monstyle.css\"> entre les balises <head> dans le fichier index.html . Enregistrez et v\u00e9rifier que le chemin relatif ci-dessus est correct avant d'appeler votre professeur! Des trucs originaux maintenant! \u00b6 Quelques manipulations suppl\u00e9mentaires qui vous donneront une petite id\u00e9e des possibilit\u00e9s offertes par le HTML, le CSS ou le Javascript... On peut par ce biais ins\u00e9rer des cartes OSM m\u00eame si des probl\u00e8mes de s\u00e9curit\u00e9 peuvent surgir... Du code pour dynamiser tout cela... \u00b6 Le code HTML format\u00e9 par le CSS est statique : il n'y a pas d'\u00e9v\u00e9nements qui surviennent quelque soit l'action de l'utilisateur. On donne ici du code javascript qui va donner du dynamisme \u00e0 notre code. Il s'agit ici d'exemples et nous aurons bient\u00f4t l'occasion d'\u00e9tudier plus pr\u00e9cis\u00e9ment ce langage de programmation! Insertion de code javascript Ins\u00e9rer le code suivant en dessous du premier titre <h1> . Enregistrez puis cliquez sur le bouton: la date du jour doit appara\u00eetre. < button type = \"button\" onclick = \"document.getElementById('tag_para').innerHTML = Date()\" > Tu veux conna\u00eetre l'heure? </ button > < p id = \"tag_para\" ></ p > \u00c0 quoi sert la m\u00e9thode getElementById ? Ins\u00e9rer une vid\u00e9o ou de l'audio \u00b6 Beaucoup de sites proposent des vid\u00e9os \u00e0 lire sur leur page d'accueil. \u00c0 nous! Insertion de vid\u00e9o R\u00e9cup\u00e9rer la vid\u00e9o ici Cr\u00e9er un dossier video(sans accent \ud83d\ude09 ) \u00e0 un endroit judicieux... Ins\u00e9rer la balise: < video width = \"400\" controls > < source src = \"video/fleur.mp4\" type = \"video/mp4\" > Your browser does not support HTML video. </ video > T'es o\u00f9? \u00b6 La g\u00e9olocalisation est devenue une habitude pour les sites commerciaux. Int\u00e9gr\u00e9e au code HTML par des scripts javascript , le principe est simple. Insertion de g\u00e9olocalisation Ins\u00e9rer la balise dans le corps du document HTML: < p > Obtenir sa position par sa latitude et longitude </ p > < button onclick = \"getLocation()\" > Geolocalisez-moi! </ button > < p id = \"test\" ></ p > Ins\u00e9rer les balises suivantes dans les balises d'ent\u00eate <head> : < script > var x = document . getElementById ( \"test\" ); function getLocation () { if ( navigator . geolocation ) { navigator . geolocation . getCurrentPosition ( showPosition ); } else { x . innerHTML = \"Geolocation is not supported by this browser.\" ; } } function showPosition ( position ) { x . innerHTML = \"Latitude: \" + position . coords . latitude + \"<br>Longitude: \" + position . coords . longitude ; } </ script > Prenons de l'altitude: \u00b6 La g\u00e9olocalisation vous permet de vous situer sur une carte. Je vous propose ici une application amusante de ces derni\u00e8res techniques. Nous utilisons des cartes gratuites open source leaflet . R\u00e9cup\u00e9rer du code T\u00e9l\u00e9charger le fichier index_is.html \u00e0 cet endroit . Ouvrez-le en lecture puis en \u00e9criture en essayant d'analyser le code utilis\u00e9. Cherchez son style! \u00b6 Les feuilles de style fa\u00e7onnent votre site web. Vous trouverez de nombreux exemples sur le WEB. Vous trouverez ici les types d\u00e9velopp\u00e9s par le W3C. R\u00e9cup\u00e9rer du code et le personnaliser R\u00e9cup\u00e9rer le code du template Portfolio Template du site pr\u00e9c\u00e9dent. Modifier le code pour faire quelque chose qui vous ressemble.", "title": "D\u00e9veloppement Web"}, {"location": "prem/frontend.html#le-web", "text": "", "title": "Le WEB"}, {"location": "prem/frontend.html#quezaco", "text": "Info Le WEB ou plus pr\u00e9cis\u00e9ment le WorldWideWeb est un syst\u00e8me hypertexte public fonctionnant sur l' internet . Il permet de consulter, avec un navigateur, des pages accessibles sur des sites. En 1989, Tim Berners-Lee engag\u00e9 au CERN de Gen\u00e8ve, propose de d\u00e9velopper un syst\u00e8me organis\u00e9 en toile, afin d'am\u00e9liorer la diffusion des informations internes. En 1990, na\u00eet alors le premier serveur WEB: la premi\u00e8re page existe toujours et vous pouvez la consulter ici .", "title": "Qu\u00e9zaco???"}, {"location": "prem/frontend.html#le-premier-langage-du-web-le-html", "text": "Le premier langage utilis\u00e9 pour d\u00e9crire le contenu d'une page web est le langage HTML(HyperTextMarkupLanguage). Ce n'est donc pas un langage de programmation mais un langage de description comme Latex par exemple... Il repose sur des balises et leurs attributs qui d\u00e9crivent un contenu: titre, paragraphe, ent\u00eate, images, liens,.... Ci-dessous un exemple relativement simple d'une page web: Un exemple tr\u00e8s simple de page web <!DOCTYPE html> < html > < head > < title > Le titre de ma premi\u00e8re page </ title > </ head > < body > < h1 > Cool! mon premier titre </ h1 > < p > Il s'agit ici d'un paragraphe( balises p). < br > Il faut savoir que les balises ont par d\u00e9faut des attributs (qu'on peut changer ensuite...). < br > Par exemple, une balise H1 propose un titre plus grand qu'une balise H2 ou H3.... </ p > </ body > </ html >", "title": "Le premier langage du WEB: le HTML"}, {"location": "prem/frontend.html#lire-ou-ecrire-il-faut-savoir", "text": "On \u00e9crit du code HTML dans un \u00e9diteur ( NotePad, visualCode, blocnote,...) et on le lit avec un navigateur . La manipulation habituelle est celle d\u00e9crite dans l'exercice suivant: \u00c9diter du code et le lire Choisir un \u00e9diteur de texte (Notepad ou Visual Studio Code est id\u00e9al... mais le blocnote suffirait!) Recopier le code HTML pr\u00e9c\u00e9dent et sauvegardez ce fichier sous le nom index avec l' extension HTML . En g\u00e9n\u00e9ral, les logiciels d'\u00e9dition utilis\u00e9s permettent de le faire assez facilement... Vous venez alors de cr\u00e9er le fichier index.html qui s'ouvre par d\u00e9faut avec un navigateur. Double-cliquez sur ce fichier: un navigateur doit s'ouvrir et afficher le contenu de la page web. En observant le site sur le navigateur, \u00e0 quoi sert la balise br ? Fermez ensuite le logiciel que vous avez utilis\u00e9 pour \u00e9diter le code HTML. Il arrive fr\u00e9quemment de modifier un code existant. Par exemple, comment ajouter des \u00e9lements au fichier index.html ? Comment \u00e9crire sur ce doument? C'est simple; faites un clic-droit et le menu contextuel qui s'ouvre vous permet de choisir ouvrir avec ... , le logiciel d'\u00e9dition. Je vous rappelle que par d\u00e9faut, un fichier html s'ouvre en lecture avec un navigateur... Modifier du code HTML Ajouter le code HTML suivant au fichier pr\u00e9c\u00e9dent entre les balises fermantes <\\p> et <\\body> . < h2 > C'est mon deuxi\u00e8me titre </ h2 > < p > Remarquez que le titre H2 est plus petit que celui de H1 </ p > Lire le nouveau document pour observer les changements effectu\u00e9s. Pour actualiser une page dans un navigateur, il suffit d'appuyer sur la touche F5 .", "title": "Lire ou \u00e9crire? Il faut savoir!"}, {"location": "prem/frontend.html#la-w3c-schools", "text": "Le W3C est un consortium charg\u00e9e de d\u00e9velopper et maintenir les standards du WEB que sont les langages HTML,CSS,PHP, ... mais aussi le format d'image png (Portable Network Graphics) id\u00e9al pour les pages WEB. Il offre aussi la possibilit\u00e9 de valider votre code en vous indiquant si vous avez respect\u00e9 les normes en vigueur. Ce consortium propose une \u00e9cole d'apprentissage du code HTML et d'autres... c'est la W3schools! Vous trouverez le lien ici . Les exercices qui suivent ont \u00e9t\u00e9 inspir\u00e9s par les exemples propos\u00e9s dans cette \u00e9cole.", "title": "La W3C schools"}, {"location": "prem/frontend.html#apprentissage-du-html", "text": "Cette partie s'int\u00e9resse \u00e0 la partie codage et vous donne au fur et \u00e0 mesure de nouvelles fonctionnalit\u00e9s. Il faut donc \u00e0 chaque \u00e9tape modifier ou compl\u00e9ter son code HTML dans un logiciel d'\u00e9dition et visualiser dans un navigateur, le r\u00e9sultat de vos modifications. N'oubliez pas d': enregistrer votre fichier modifi\u00e9 (touches ctrl + S ) actualiser votre page dans le navigateur (touche F5 ) On utilisera comme point de d\u00e9part, le code de la page web donn\u00e9 dans la partie pr\u00e9c\u00e9dente: Code simple que nous allons compl\u00e9ter <!DOCTYPE html> < html > < head > < title > Le titre de ma premi\u00e8re page </ title > </ head > < body > < h1 > Cool! mon premier titre </ h1 > < p > Il s'agit ici d'un paragraphe( balises p). < br > Il faut savoir que les balises ont par d\u00e9faut des attributs (qu'on peut changer ensuite...). < br > Par exemple, une balise H1 propose un titre plus grand qu'une balise H2 ou H3.... </ p > < h2 > C'est mon deuxi\u00e8me titre </ h2 > < p > Remarquez que le titre H2 est plus petit que celui de H1 </ p > </ body > </ html >", "title": "Apprentissage du HTML"}, {"location": "prem/frontend.html#des-attributs-pour-formater-a-volonte", "text": "Toutes les balises ont par d\u00e9faut , des attributs de couleur, de grosseur, de positionnement qui peuvent \u00eatre modifi\u00e9s. Quelques exemples sont propos\u00e9s ici. Ajouter des attributs aux balises Modifier la balise body comme ceci: < body style = \"background-color:powderblue;\" > Modifier la balise H1 : < h1 style = \"color:Tomato; font-size:300%;text-align:center;\" > Modifier la balise H2 afin qu'elle soit aussi align\u00e9e au centre avec la couleur MediumSeaGreen . Enfin faites en sorte que les paragraphes soient centr\u00e9s avec un fond de couleur que vous pouvez choisir parmi les possibilit\u00e9s offertes ici \u00c0 retenir! Tous les \u00e9l\u00e9ments HTML ont un style que vous pouvez d\u00e9finir ou red\u00e9finir \u00e0 souhait... Certains sont simples d'autres plus avanc\u00e9s. Un style balaise! Essayez ce style sur les balise p: < p style = \"background: linear-gradient(to right,#ffbe02a1 0px,#fd606aba 100%); padding: 10px; border-radius: 10px;\" > C'est joli, non?", "title": "Des attributs pour formater \u00e0 volont\u00e9..."}, {"location": "prem/frontend.html#des-commentaires-pour-comprendre", "text": "Dans tout langage informatique, on peut (doit?) ajouter des commentaires qui permettent d'amener quelques explications aux choix effectu\u00e9s: ces lignes ne sont pas interpr\u00e9t\u00e9es par le navigateur. Code simple que nous allons commenter <!DOCTYPE html> < html > < head > <!-- Les commentaires sont int\u00e9gr\u00e9s au code par ces balises--> < title > Le titre de ma premi\u00e8re page </ title > </ head > < body > < h1 > Cool! mon premier titre </ h1 > <!-- bg en degrad\u00e9 vers la droite d'une couleur vers une autre--> <!-- le padding est le rembourrage dans l'\u00e9l\u00e9ment m\u00e8re--> <!-- le rayon du coin de la pordure est de 10px--> < p style = \"background: linear-gradient(to right,#ffbe02a1 0px,#fd606aba 100%); padding: 10px; border-radius: 10px;\" > Il s'agit ici d'un paragraphe( balises p). < br > Il faut savoir que les balises ont par d\u00e9fauts des attributs (qu'on peut changer ensuite...). < br > Par exemple, une balise H1 propose un titre plus grand qu'une balise H2 ou H3.... </ p > </ body > </ html > On peut aussi utiliser des balises de commentaires pour isoler une partie du code afin qu'elle ne soit pas lues par le navigateur.", "title": "Des commentaires pour comprendre"}, {"location": "prem/frontend.html#inserer-des-liens-et-des-images", "text": "Une page web contient souvent des images. Le code ci-dessous permet d'int\u00e9grer l'image du logo de la nsi du lyc\u00e9e \u00e0 r\u00e9cuperer ici . < img src = \"img/logoNSI.png\" alt = \"le logo de la NSI\" > Si vous souhaitez ins\u00e9rer un lien vers un autre site sur un mot, une image, ... il faudra alors int\u00e9grer l'instruction suivante \u00e0 votre code: < a href = \"https://lyceedebaudre.net/\" > Le lyc\u00e9e </ a > Le lien se trouve sur la phrase le lyc\u00e9e : en cliquant dessus vous \u00eates dirig\u00e9 vers le site dont l' URL est pass\u00e9 en param\u00e8tre. Ins\u00e9rer une image et un lien vers un autre site Cr\u00e9er un dossier img situ\u00e9 au m\u00eame niveau d'arborescence que votre fichier index.html et placez-y l'image du logo. Ins\u00e9rer l'image dans votre code et visualisez que tout fonctionne bien dans le navigateur. Le chemin de la source est-il absolu? relatif? Ins\u00e9rer un lien vers ce site dans votre code o\u00f9 vous le souhaitez ! Vous voulez en savoir davantage? Aucun soucis, cliquez ici Une question simple! \u00c0 quoi sert la balise map ?", "title": "Ins\u00e9rer des liens et des images"}, {"location": "prem/frontend.html#un-tableau", "text": "Vous souhaitez ins\u00e9rer un tableau \u00e0 votre code? Rien de plus simple (ou presque...). Un simple tableau! Ins\u00e9rer ce code au v\u00f4tre < table > < tr > < th > Company </ th > < th > Contact </ th > < th > Country </ th > </ tr > < tr > < td > Alfreds Futterkiste </ td > < td > Maria Anders </ td > < td > Germany </ td > </ tr > < tr > < td > Centro comercial Moctezuma </ td > < td > Francisco Chang </ td > < td > Mexico </ td > </ tr > < tr > < td > Ernst Handel </ td > < td > Roland Mendel </ td > < td > Austria </ td > </ tr > < tr > < td > Island Trading </ td > < td > Helen Bennett </ td > < td > UK </ td > </ tr > < tr > < td > Laughing Bacchus Winecellars </ td > < td > Yoshi Tannamuri </ td > < td > Canada </ td > </ tr > < tr > < td > Magazzini Alimentari Riuniti </ td > < td > Giovanni Rovelli </ td > < td > Italy </ td > </ tr > </ table > Vous souhaitez le rendre plus joli encore? Ins\u00e9rer les styles suivants aux balises concern\u00e9es... < table style = \"font-family: arial, sans-serif; border-collapse: collapse; width: 100%;\" > < tr style = \"border: 1px solid #d80d0d; text-align: left; padding: 8px; \" > Remarquez comment il est p\u00e9nible d'ajouter les attributs de style \u00e0 toutes les balises concern\u00e9es. Le paragraphe suivant permet de contourner ce probl\u00e8me!", "title": "Un tableau?"}, {"location": "prem/frontend.html#stylee-la-balise", "text": "D\u00e9finir le style de chaque balise peut s'av\u00e9rer fastidieux. Dans le tableau pr\u00e9c\u00e9dent il a fallu compl\u00e9ter toutes les balises <tr> , une par une... ce qui n'est pas tr\u00e8s productif. Il existe une balise qui permet de rassembler tous les styles. \u00c0 retenir! La balise <style> dans l'ent\u00eate du fichier recense l'ensemble des styles impos\u00e9s sur les diff\u00e9rentes balises. Ainsi tous les styles sont-ils d\u00e9finis au d\u00e9part: le code s'en trouve largement simplifi\u00e9... Regrouper les styles Recopier le code suivant entre les balises head et supprimer les styles dans les balises. <!DOCTYPE html> < html > < head > < title > Le titre de ma premi\u00e8re page </ title > < style > body { background-color : powderblue ;} h1 , h2 { color : Tomato ; font-size : 300 % ; text-align : center ;} p { background : linear-gradient ( to right , #ffbe02 a1 0 px , #fd606a ba 100 % ); padding : 10 px ; border-radius : 10 px ; } table { font-family : arial , sans-serif ; border-collapse : collapse ; width : 100 % ;} tr { border : 1 px solid #d80d0d ; text-align : left ; padding : 8 px ;} </ style > </ head > < body > < h1 > Cool! mon premier titre </ h1 > < p > Il s'agit ici d'un paragraphe( balises p). < br > Il faut savoir que les balises ont par d\u00e9fauts des attributs (qu'on peut changer ensuite...). < br > Par exemple, une balise H1 propose un titre plus grand qu'une balise H2 ou H3.... </ p > < h2 > C'est mon deuxi\u00e8me titre </ h2 > ... ... Seul probl\u00e8me: les m\u00eames \u00e9l\u00e9ments ont le m\u00eame style! Mais on peut contourner le probl\u00e8me en taggant certaines balises...", "title": "Styl\u00e9e la balise!!"}, {"location": "prem/frontend.html#les-identifiants-nont-pas-la-classe", "text": "Comment faire si on veut distinguer le style de deux paragraphes par exemple? Le regroupement des styles entre les balises du m\u00eame nom ne permet plus de personnaliser ces affichages. Pas de panique! Tout est pr\u00e9vu, il suffit de tagger les balises par des classes( class ) ou des idendificateurs ( id ). Imaginons que nous souhaitions que les paragraphes d\u00e9finis pas le code pr\u00e9c\u00e9dent n'aient pas les m\u00eames couleurs. On va alors: tagger chaque balise <p> par une classe d\u00e9finir le style de la classe \u00e0 l'int\u00e9rieur de la balise <style> Le code suivant devient alors... <!DOCTYPE html> < html > < head > < title > Le titre de ma premi\u00e8re page </ title > < style > body { background-color : powderblue ;} h1 , h2 { color : Tomato ; font-size : 300 % ; text-align : center ;} p { padding : 10 px ; border-radius : 10 px ; } /* premiere classe */ . choix1 { background : linear-gradient ( to right , #ffbe02 a1 0 px , #fd606a ba 100 % ); } /* deuxieme classe: inversion du sens de degrade */ . choix2 { background : linear-gradient ( to left , #ffbe02 a1 0 px , #fd606a ba 100 % ); } table { font-family : arial , sans-serif ; border-collapse : collapse ; width : 100 % ;} tr { border : 1 px solid #d80d0d ; text-align : left ; padding : 8 px ; background-color : #dddddd ;} </ style > </ head > < body > < h1 > Cool! mon premier titre </ h1 > <!--tag du premier paragraphe--> < p class = \"choix1\" > Il s'agit ici d'un paragraphe( balises p). < br > Il faut savoir que les balises ont par d\u00e9fauts des attributs (qu'on peut changer ensuite...). < br > Par exemple, une balise H1 propose un titre plus grand qu'une balise H2 ou H3.... </ p > < h2 > C'est mon deuxi\u00e8me titre </ h2 > <!-- tag du deuxi\u00e8me paragraphe --> < p class = \"choix2\" > Remarquez que le titre H2 est plus petit que celui de H1 </ p > < table > < tr > < th > Company </ th > < th > Contact </ th > < th > Country </ th > </ tr > < tr > < td > Alfreds Futterkiste </ td > < td > Maria Anders </ td > < td > Germany </ td > </ tr > < tr > < td > Centro comercial Moctezuma </ td > < td > Francisco Chang </ td > < td > Mexico </ td > </ tr > < tr > < td > Ernst Handel </ td > < td > Roland Mendel </ td > < td > Austria </ td > </ tr > < tr > < td > Island Trading </ td > < td > Helen Bennett </ td > < td > UK </ td > </ tr > < tr > < td > Laughing Bacchus Winecellars </ td > < td > Yoshi Tannamuri </ td > < td > Canada </ td > </ tr > < tr > < td > Magazzini Alimentari Riuniti </ td > < td > Giovanni Rovelli </ td > < td > Italy </ td > </ tr > </ table > </ body > </ html > Ainsi, les paragraphes ont-ils: un style commun( padding et border-radius ) un style diff\u00e9rent (le sens du d\u00e9grad\u00e9) Cr\u00e9er des classes On peut ajouter un background-color aux balises <tr> . Je voudrais que les lignes de rang pair est une couleur d'arri\u00e8re plan de #777777 et celles de rang impair une couleur #dddddd . Pour cela: Cr\u00e9er deux classes bg1 et bg2 dans les balises <style> tagger les balises <tr> pour r\u00e9pondre \u00e0 ma volont\u00e9 Les classes ont une autre fonction: celle de pouvoir identifier des \u00e9l\u00e9ments et d'agir sur eux (vois cours sur le CSS et JS). On peut aussi utiliser un identifiant ( id ) pour d\u00e9signer un et un seul \u00e9l\u00e9ment(une balise quoi..) dans le DOM (Document Objet Model). C'est la diff\u00e9rence entre les deux tags : \u00c0 retenir! Les class permettent d'identifier plusieurs \u00e9l\u00e9ments mais l' id seulement un! Alors que les noms de classes se d\u00e9clarent dans les balises <style> avec des .nom_de_la_classe , les identifiants sont d\u00e9finis aux m\u00eames endroits par #nom_du_id . Cr\u00e9er un identifiant On va tagger la balise <h2> par un idendifiant. Pour cela suivre les instructions suivantes: Ajouter entre les balises <style> : #montitre { background-color: lightblue; color: black; padding: 40px; text-align: center; } Ajouter \u00e0 la balise <h2> l'identifiant id = \"montitre\" : < h2 id = \"montitre\" > Proposez une nouvelle couleur pour cet identifiant. C'est cool, non?", "title": "Les identifiants n'ont pas la classe!"}, {"location": "prem/frontend.html#en-mode-professionnel", "text": "Jusqu'\u00e0 pr\u00e9sent, les styles de toutes les balises sont regroup\u00e9s entre les balises \u00e9ponymes. En programmation comme en langage de description, on pr\u00e9f\u00e8re s\u00e9parer le contenu(le fond!) de son apparence(la forme!). Aussi va t-on cr\u00e9er un fichier particulier, appel\u00e9 feuille de style qui permettra de formater le contenu html. Ce fichier porte l'extension .css et regroupe tous les styles. Cr\u00e9er une feuille de style Suivez les instrutions suivantes: Cr\u00e9er au m\u00eame niveau d'arborescence que le fichier index.html le dossier CSS \u00e0 c\u00f4t\u00e9 de clui des images img . Ouvrez le blocnote et cr\u00e9ez un nouveau fichier. Copier dans ce dernier fichier, l'ensemble des styles entre les balises <style> (sans les balises) et supprimer ce contenu du fichier html (y compris les balises <style> et <\\style> ) Sauvegarder le fichier sous le nom monstyle.css dans le dossier CSS en s\u00e9lectionnant Tous les fichiers \u00e0 l'endroit indiqu\u00e9... F\u00e9licitations! Vous venez de cr\u00e9er votre premi\u00e8re feuille de style! Maintenant il faut indiquer au document index.html o\u00f9 se trouve la feuille de style charg\u00e9e de le formater: c'est ce que nous appelons attacher la feuille de style ! Attacher une feuille de style Suivez les instrutions suivantes: Ajouter la balise <link rel=\"stylesheet\" href=\"CSS/monstyle.css\"> entre les balises <head> dans le fichier index.html . Enregistrez et v\u00e9rifier que le chemin relatif ci-dessus est correct avant d'appeler votre professeur!", "title": "En mode professionnel!"}, {"location": "prem/frontend.html#des-trucs-originaux-maintenant", "text": "Quelques manipulations suppl\u00e9mentaires qui vous donneront une petite id\u00e9e des possibilit\u00e9s offertes par le HTML, le CSS ou le Javascript... On peut par ce biais ins\u00e9rer des cartes OSM m\u00eame si des probl\u00e8mes de s\u00e9curit\u00e9 peuvent surgir...", "title": "Des trucs originaux maintenant!"}, {"location": "prem/frontend.html#du-code-pour-dynamiser-tout-cela", "text": "Le code HTML format\u00e9 par le CSS est statique : il n'y a pas d'\u00e9v\u00e9nements qui surviennent quelque soit l'action de l'utilisateur. On donne ici du code javascript qui va donner du dynamisme \u00e0 notre code. Il s'agit ici d'exemples et nous aurons bient\u00f4t l'occasion d'\u00e9tudier plus pr\u00e9cis\u00e9ment ce langage de programmation! Insertion de code javascript Ins\u00e9rer le code suivant en dessous du premier titre <h1> . Enregistrez puis cliquez sur le bouton: la date du jour doit appara\u00eetre. < button type = \"button\" onclick = \"document.getElementById('tag_para').innerHTML = Date()\" > Tu veux conna\u00eetre l'heure? </ button > < p id = \"tag_para\" ></ p > \u00c0 quoi sert la m\u00e9thode getElementById ?", "title": "Du code pour dynamiser tout cela..."}, {"location": "prem/frontend.html#inserer-une-video-ou-de-laudio", "text": "Beaucoup de sites proposent des vid\u00e9os \u00e0 lire sur leur page d'accueil. \u00c0 nous! Insertion de vid\u00e9o R\u00e9cup\u00e9rer la vid\u00e9o ici Cr\u00e9er un dossier video(sans accent \ud83d\ude09 ) \u00e0 un endroit judicieux... Ins\u00e9rer la balise: < video width = \"400\" controls > < source src = \"video/fleur.mp4\" type = \"video/mp4\" > Your browser does not support HTML video. </ video >", "title": "Ins\u00e9rer une vid\u00e9o ou de l'audio"}, {"location": "prem/frontend.html#tes-ou", "text": "La g\u00e9olocalisation est devenue une habitude pour les sites commerciaux. Int\u00e9gr\u00e9e au code HTML par des scripts javascript , le principe est simple. Insertion de g\u00e9olocalisation Ins\u00e9rer la balise dans le corps du document HTML: < p > Obtenir sa position par sa latitude et longitude </ p > < button onclick = \"getLocation()\" > Geolocalisez-moi! </ button > < p id = \"test\" ></ p > Ins\u00e9rer les balises suivantes dans les balises d'ent\u00eate <head> : < script > var x = document . getElementById ( \"test\" ); function getLocation () { if ( navigator . geolocation ) { navigator . geolocation . getCurrentPosition ( showPosition ); } else { x . innerHTML = \"Geolocation is not supported by this browser.\" ; } } function showPosition ( position ) { x . innerHTML = \"Latitude: \" + position . coords . latitude + \"<br>Longitude: \" + position . coords . longitude ; } </ script >", "title": "T'es o\u00f9?"}, {"location": "prem/frontend.html#prenons-de-laltitude", "text": "La g\u00e9olocalisation vous permet de vous situer sur une carte. Je vous propose ici une application amusante de ces derni\u00e8res techniques. Nous utilisons des cartes gratuites open source leaflet . R\u00e9cup\u00e9rer du code T\u00e9l\u00e9charger le fichier index_is.html \u00e0 cet endroit . Ouvrez-le en lecture puis en \u00e9criture en essayant d'analyser le code utilis\u00e9.", "title": "Prenons de l'altitude:"}, {"location": "prem/frontend.html#cherchez-son-style", "text": "Les feuilles de style fa\u00e7onnent votre site web. Vous trouverez de nombreux exemples sur le WEB. Vous trouverez ici les types d\u00e9velopp\u00e9s par le W3C. R\u00e9cup\u00e9rer du code et le personnaliser R\u00e9cup\u00e9rer le code du template Portfolio Template du site pr\u00e9c\u00e9dent. Modifier le code pour faire quelque chose qui vous ressemble.", "title": "Cherchez son style!"}, {"location": "prem/images_numeriques.html", "text": "D\u00e9finir une image num\u00e9rique \u00b6 Que cache une image ? \u00b6 Voici une belle photo prise devant le mus\u00e9e Guggenheim de Bilbao. On peut facilement v\u00e9rifier que: Un pixel? Une image num\u00e9ris\u00e9e est constitu\u00e9e de pixel (picture element), auquel est associ\u00e9 une couleur. son format est de 470x312 : il y a donc 470 colonnes et 312 lignes , soit 146640 pixels! cette photo est un fichier num\u00e9rique dont l'extension est png . Chaque pixel a un niveau d'intensit\u00e9 allant du noir (0) au blanc(255) en passant par une multitude de niveaux de gris... Exercice Question R\u00e9ponse Pourquoi y a t-il 256 niveaux de gris pour une image? Car ce niveau est en g\u00e9n\u00e9ral cod\u00e9 sur un octet et avec un octet on peut coder au maximum \\(2^8=256\\) informations! Nous allons dans ce travail d\u00e9couvrir comment sont structur\u00e9es les images num\u00e9riques et proposez des m\u00e9thodes de transformations connues: changement de contraste, de taille, d'orientation,... Exploration en profondeur \u00b6 L'image pr\u00e9sent\u00e9e ci-dessus est un fichier qui porte l'extension png (portable network graphic). Encore le W3C! Le consortium international W3C est charg\u00e9 du d\u00e9veloppement des standards du WEB dont le format png . Pour les plus curieux, voir ici . Rappelons que: Info L'extension d'un fichier pr\u00e9cise notamment sa nature. La sp\u00e9cification donne les inforamtions suivantes: leur signature: 8 octets le chunk IHDR pour l'en-t\u00eate : 13 octets le chunk IDAT pour les donn\u00e9es : poids variable selon l'image le chunk IEND pour la fin du fichier : 12 octets Donc une image dans ce format p\u00e8se au moins 45 octets... Le chunk IHDR donne entre autres les informations sur la largeur, la hauteur de l'image. Nous y reviendrons plus tard en diss\u00e9quant une image pour explorer ses entrailles ... Un format hyper connu :le format jpeg Attention! les fichiers .jpeg ne sont pas \u00e0 proprement dit des fichiers images mais des fichiers compress\u00e9s d'une image. Souvent, on commet une confusion, pas bien grave au final! Une image Portable Network Graphics (PNG) est un format ouvert, on peut donc explorer son contenu! Exo R\u00e9cup\u00e9rer la photo puppy.png ( T\u00e9l\u00e9charger la photo ) et l'image firefox.png ( T\u00e9l\u00e9charger l'image ). Ouvrez la photo avec les routines Python habituelles, en mode lecture binaire et visualisez l'ent\u00eate du fichier(le programme est donn\u00e9 juste apr\u00e8s). D\u00e9terminer le nombre d'octets constituants ce fichier. Le comparer \u00e0 la valeur obtenue par un clic droit sur l'image puis propri\u00e9t\u00e9s. Ouvrez l'image firefox.png et v\u00e9rifier qu'elle a la m\u00eame signature(ils commencent tous par la m\u00eame s\u00e9rie d'octets qui est leur signature...).Affichez la liste des octets dans votre console.Donnez cette signature. #Rappel sur les ouvertures en lecture ou ecritures de fichiers fichier_src = open ( \"........\" , \"rb\" ) #Completer avec le chemin relatif vers l'image #l'ouverture en mode rb ouvre le fichier en binaire (octet...) listeOctet = [ elt for elt in fichier_src . read ()] print ( len ( listeOctet )) #affiche la longueur de la liste, le nombre d'octets en fait! print ( listeOctet [: 100 ]) # affiche seulement les 100 premiers octets sinon... fichier_src . close () Vous devriez obtenir ceci: Probl\u00e8me de dimension? La largeur de l'image est 470 et sa hauteur 312! Expliquez alors les valeurs propos\u00e9es ci-dessus. Image matricielle \u00b6 En g\u00e9n\u00e9ral, les images num\u00e9riques sont des images matricielles , par opposition aux images vectorielles d\u00e9finies par des courbes math\u00e9matiques. Les fichiers .svg d\u00e9velopp\u00e9s par le W3C, sont des images vectorielles tr\u00e8s adapt\u00e9es \u00e0 la construction de logo, comme celui de Firefox, d\u00e9composable en \u00e9l\u00e9ments g\u00e9om\u00e9triques. Exo Observez le logo Firefox d\u00e9fini sous .svg \u00e0 cette adresse et trouvez sa description .svg (clic droit-> code source de la page). Zoomez(touche Crtl + molette ). Ouvrez le fichier firefox.png dans le navigateur Firefox(cliquez sur le lien pr\u00e9c\u00e9dent...). Zoomez et comparez avec la manipulation pr\u00e9c\u00e9dente. Quelle diff\u00e9rence entre une image matricielle et vectorielle? Les images vectorielles ne permettent pas de repr\u00e9senter la r\u00e9alit\u00e9 de nos photos. Aussi, ne sont-elles utilis\u00e9es que pour des repr\u00e9sentations sp\u00e9cifiques comme les logos par exemple... \u00c0 retenir! Une photo, une image est donc d\u00e9finie g\u00e9n\u00e9ralement par un tableau de valeurs, appel\u00e9e matrice , d\u00e9finissant ainsi le niveau d'intensit\u00e9 de chaque pixel de cette image. On retrouvera en g\u00e9n\u00e9ral: des images en niveaux de gris en mode L : lorsque les couleurs sont cod\u00e9es sur 8 bits, c'est-\u00e0-dire 1 octet, il y a donc 256 niveaux de quantifications possibles allant du 0(noir) au blanc(255). des images couleurs cod\u00e9es en mode RGB pour Red Green Blue: chaque couleur est cod\u00e9e sur 8 bits soit un octet. des images couleurs avec un canal alpha en mode RGBA permettant de contr\u00f4ler la transparence d'une image, notamment lorsque l'on souhaite superposer l'une sur l'autre. Exo Dans une image couleur o\u00f9 chaque couleur est cod\u00e9e sur un octet, combien de couleurs diff\u00e9rentes peut-on obtenir? Dans une image matricielle contenant des pixels, le premier pixel est celui en haut \u00e0 gauche et le dernier , celui en bas \u00e0 droite. Puis on parcourt une image ligne par ligne, de gauche \u00e0 droite. Ceci est important pour comprendre comment on peut lire ou \u00e9crire sur une image! \u00c0 savoir! On entend par: lire un pixel , donner la valeur de sa couleur qui se pr\u00e9sente sous diff\u00e9rentes formes (entier, triplet ou quadruplet d'entiers) selon le mode de repr\u00e9sentation (L, RBG ou RGBA) \u00e9crire un pixel , d\u00e9finir sa couleur par la donn\u00e9e d'un entier, d'un triplet ou un quadruplet selon le mode de repr\u00e9sentation... En mode programmation! \u00b6 Cette section propose de manipuler des images num\u00e9riques \u00e0 l'aide d'un biblioth\u00e8que Python appel\u00e9e PIL . Exo Installer la biblioth\u00e8que PILLOW dans Thonny(lors de l'import il faudra l'appeler sous son ancien nom PIL...). Il s'agit de traduire en Python l'id\u00e9e de: Les routines ! Vous allez apprendre \u00e0: ouvrir un fichier image img sur lequel on travaille; d\u00e9terminer les propri\u00e9t\u00e9s de cette image( mode,size,format ); cr\u00e9er une nouvelle image; lire et \u00e9crire sur une image (attention en g\u00e9n\u00e9ral, on lit dans l'une on \u00e9crit dans l'autre!) montrer ou enregistrer l'image obtenue. Pour illustrer les commandes python r\u00e9pondant \u00e0 ces besoins, nous allons utiliser la photo puppy.png . ATTENTION Tous les programmes doivent avoir en en-t\u00eate, l'import de la biblioth\u00e8que: from PIL import Image Ouvrir une image et lire des informations \u00b6 Exo Copier le code suivant et sauvegardez sous le nom lecture_inform.py from PIL import Image #Ouverture de l'image existante, le chemin relatif doit \u00eatre donn\u00e9 \u00e0 partir de votre fichier! im = Image . open ( \"Images\\puppy.png\" ) #pour ma part je mets les images dans un dossier Images #On peut conna\u00eetre les informations suivantes print ( im . mode , im . size , im . format ) im . close () L'objet im n'est pas une image mais un objet tampon sur lequel nous travaillerons avant de le fermer. Une image poss\u00e8de toujours une taille, un format et un mode de repr\u00e9sentation (niveaux de gris, couleurs avec alpha \u00e9ventuel). Exo Quelles sont les caract\u00e9ristiques de l'image puppy.png (mode, taille, format)? Et celles de l'image firefox.png ? Cr\u00e9ation d'une nouvelle image \u00b6 Nous allons cr\u00e9er une image d'abord en niveaux de gris (mode L ) \u00c0 savoir! Remarquez que la taille est donn\u00e9e sous la forme d'un tuple. from PIL import Image #Creation d'une nouvelle image en niveaux de gris IM = Image . new ( 'L' , ( 750 , 200 )) # en mode L pour niveaux de gris IM . save ( \"Images\\img_gris1.png\" ) #pour cr\u00e9er l'image dans le dossier Images... IM . close () Pour la cr\u00e9ation d'une image en couleur, seul le mode change (mode RGB ): \u00c0 savoir! Par d\u00e9faut et quel que soit le mode, tous les pixels de l'image sont noirs! from PIL import Image #Creation d'une nouvelle image en couleur IM = Image . new ( 'RGB' , ( 750 , 200 )) # en mode RGB pour la couleur IM . save ( \"Images\\img_coul.png\" ) #pour cr\u00e9er l'image dans le dossier Images... IM . close () Lire la valeur d'intensit\u00e9 d'un pixel \u00b6 Le code suivant permet de lire sur l'image puppy , la valeur d'intensit\u00e9 du pixel situ\u00e9 \u00e0 la colonne 20 et la ligne 30 . from PIL import Image #Ouverture de l'image existante #Le chemin relatif doit \u00eatre donn\u00e9 im = Image . open ( \"Images\\puppy.png\" ) pix = im . getpixel (( 20 , 30 )) print ( pix ) im . close () Attention , la m\u00e9thode getpixel prend en param\u00e8tre un tuple correspondant aux coordonn\u00e9es (colonne, ligne) du pixel dans l'image: dans l'exemple, 20 i\u00e8me colonne et 30i\u00e8me ligne(il faut bien s\u00fbr s'assurer que ce pixel existe...) . Donc on ne tape pas im.getpixel(20,30) mais bien im.getpixel((20,30)) Exo En s'utilisant le code pr\u00e9c\u00e9dent, donner l'intensit\u00e9 des pixels \\((105,42)\\) de l'image puppy.png . quelles sont les coordonn\u00e9es du dernier pixel de l'image(en bas \u00e0 droite).Donnez son intensit\u00e9 \u00c9crire l'intensit\u00e9 d'un pixel \u00b6 On rappelle qu'on entend par \u00e9crire un pixel, d\u00e9finir sa valeur d'intensit\u00e9! from PIL import Image #Ouverture d'une nouvelle image IM = Image . new ( 'L' , ( 750 , 200 )) IM . putpixel (( 425 , 100 ), 150 ) IM . save ( \"Images\\img_gris2.png\" ) IM . close () La m\u00e9thode putpixel s'applique \u00e0 l'objet IM et prend en param\u00e8tres l'endroit o\u00f9 l'on veut \u00e9crire (c,l) (425 et 100 dans notre exemple) et la valeur d'intensit\u00e9 p (150 dans l'exemple). Attention dans le cas d'une image couleur l'intensit\u00e9 est un triplet (r,g,b) voire (r,g,b,a) . Rappel Lorsque vous cr\u00e9ez une image, tous les pixels sont noirs par d\u00e9faut. Donc \u00e0 0 sur tous les canaux! Parcourir une image pixel par pixel \u00b6 Le code pr\u00e9c\u00e9dent permet de d\u00e9finir l'intensit\u00e9 d' un pixel. Mais comment agir sur tous les pixels d'une image? Pour parcourir une image pixel par pixel, on va utiliser une double boucle: l'une pour parcourir les lignes, l'autre pour parcourir les colonnes. from PIL import Image #Ouverture de l'image imInit = Image . open ( \"Images\\puppy.png\" ) #La double boucle permet de parcourir l'image de haut en bas de gauche \u00e0 droite for l in range ( imInit . size [ 1 ]): #l comme ligne for c in range ( imInit . size [ 0 ]): #c comme colone pix = imInit . getpixel (( c , l )) # getpixel capture la valeur de couleur du pixel (c, l) print ( pix ) imInit . close () Ce programme fait afficher la valeur d'intensit\u00e9 de tous les pixels de l'image: donc ne l'ex\u00e9cutez pas! Dans tous les exercices, on utilisera ces deux boucles pour lire ou \u00e9crire sur une image. Par exemple, cr\u00e9eons une image en couleur de taille (500, 500) dont tous les pixels sont blancs sauf ceux de la ligne 250 qui sont rouges: from PIL import Image #Ouverture d'une nouvelle image img_new = Image . new ( 'RGB' , ( 500 , 500 )) #La double boucle permet de parcourir l'image de haut en bas de gauche \u00e0 droite for l in range ( img_new . size [ 1 ]): #l comme ligne for c in range ( img_new . size [ 0 ]): #c comme colone if l == 250 : img_new . putpixel (( c , l ), ( 255 , 0 , 0 )) # composante de rouge \u00e0 la ligne 250 else : img_new . putpixel (( c , l ), ( 255 , 255 , 255 )) # composante de blanc sinon img_new . show () #pour montrer l'image img_new . close () Exo En s'inspirant du code pr\u00e9c\u00e9dent: Cr\u00e9ez une image de largeur 500 et de hauteur 100, o\u00f9 tous les pixels de la ligne 50 sont verts, les autres restant noirs... Cr\u00e9ez une image de largeur 500 et de hauteur 100, o\u00f9 tous les pixels de la colonne 250 sont bleus, les autres blancs... Cr\u00e9ez une image de largeur 500 et de hauteur 500, o\u00f9 tous les pixels des diagonales sont rouges, les autres blancs... Lire dans l'une et \u00e9crire dans l'autre \u00b6 Tous les exercices propos\u00e9s sur le traitement d'image repose sur le principe suivant: Info On lit les informations dans une image et on \u00e9crit dans une autre Pour illustrer mes propos, construisons une image destination \u00e0 partir d'une image source en ajoutant la valeur 100 \u00e0 chaque intensit\u00e9 du pixel d'origine. Nous allons travailler modulo 256 pour rester dans la plage \\([0;255]\\) . Algorithme \u00e0 suivre ouvre une image en lecture cr\u00e9e une nouvelle image de caract\u00e9ristiques identiques parcoure et lit la valeur d'intensit\u00e9 de chaque pixel de l'image initiale parcoure et \u00e9cris au m\u00eame endroit sur l'image finale la valeur captur\u00e9e \u00e0 laquelle on ajoute 100 (on travaille modulo 256 pour rester dans la plage \\([0;255]\\) ). on enregistre l'image ainsi cr\u00e9\u00e9e. L'impl\u00e9mentation de l'algorithme pr\u00e9c\u00e9dent donne en Python, le programme suivant: from PIL import Image #ETAPE 1: imInit = Image . open ( \"Images\\puppy.png\" ) #ETAPE 2: ImFin = Image . new ( imInit . mode , imInit . size ) for l in range ( imInit . size [ 1 ]): #l comme ligne for c in range ( imInit . size [ 0 ]): #c comme colone #ETAPE 3 pix = imInit . getpixel (( c , l )) # getpixel capture la valeur de couleur du pixel (x,y) #ETAPE 4 ImFin . putpixel (( c , l ), ( pix + 100 ) % 256 ) #putpixel colore le pixel (x,y) de l'image IM avec la valeur de (pix + 100)%256 ImFin . show () #ETAPE 5 ImFin . save ( \"Images\\ImageTranslate100.png\" ) imInit . close () ImFin . close () Quelques informations sur le programme pr\u00e9c\u00e9dent: imInit est un objet tampon de l'image initiale; imInit.size renvoie donc la taille de l'image de d\u00e9part sous le forme d'un tuple imInit.size[0] est donc le premier \u00e9l\u00e9ment de imInit.size , soit la largeur de l'image. Et imInit.size[1] donne donc la hauteur. Et imInit.size[2] n'existe pas ! Donc l'instruction ImFin = Image.new(imInit.mode, imInit.size) construit une nouvelle image de m\u00eame mode et taille que celle qui a \u00e9t\u00e9 ouverte. c est la variable qui prend ses valeurs de 0 \u00e0 imInit.size[0] - 1 correspondant au num\u00e9ro de chaque colonne de l'image l est la variable qui prend ses valeurs de 0 \u00e0 imInit.size[1] - 1 correspondant au num\u00e9ro de chaque ligne de l'image Exo Construire de la m\u00eame fa\u00e7on les images translat\u00e9es de 10 pixels et de 255 pixels. Pensez \u00e0 changer le nom de sauvegarde sinon vous \u00e9craserez les fichiers pr\u00e9c\u00e9demment construits. Le coin des exercices \u00b6 En n'utilisant que les routines pr\u00e9c\u00e9dentes (il y a des m\u00e9thodes de la biblioth\u00e8que Pil qui permettent de r\u00e9aliser directement les transformations demand\u00e9es...), r\u00e9alisez les exercices suivants. Exo Cr\u00e9er une image en niveaux de gris de dimension 500 sur 100 pixels o\u00f9 chaque pixel a une intensit\u00e9 \u00e9gale \u00e0 un nombre al\u00e9atoire entre 0 et 255. On sauvegardera sous le nom hasard.png cette image. Cr\u00e9er une image en couleur de dimension 500 sur 100 pixels o\u00f9 chaque pixel a une intensit\u00e9 de rouge, de vert et de bleu est \u00e9gale \u00e0 un nombre al\u00e9atoire entre 0 et 255. On sauvegardera cette image sous le nom hasardcouleur.png . Exo Cr\u00e9er l'image puppynegative.png obtenu \u00e0 partir de l'image puppy.png en transformant le pixel p en le pixel 255 - p . Exo Cr\u00e9er une image de dimension 600(width) sur 400(height) pixels qui est le drapeau fran\u00e7ais. On sauvegardera cette image sous le nom drapeau.png . Exo Cr\u00e9er une image en niveaux de gris de dimension 500 sur 100 pixels o\u00f9 chaque pixel de ligne de rang pair est blanc et les autres noir. On sauvegardera cette image sous le nom ligneblanche.png . Exo L'image Firefox.png est une image couleur qui est donc la superposition de trois images: l'une contient les composantes de rouge, l'autre de vert et la derni\u00e8re de bleu. Construire ces trois images que vous sauvegarderez sous le nom filtreRougeFirefox.png ,.... Exo Construire l'image obtenue par une sym\u00e9trie verticale. On sauvegardera l'image sous le nom puppyV.png . Construire l'image obtenue par une sym\u00e9trie horizontale.On sauvegardera l'image sous le nom puppyH.png . Exo Effet de seuillage : L'id\u00e9e est d'effectuer un seuillage sur l'image en construisant une nouvelle image selon le principe suivant: tous les pixels dont l'intensit\u00e9 est inf\u00e9rieure ou \u00e9gal \u00e0 127 sont transform\u00e9s en pixel d'intensit\u00e9 0 et ceux d'intensit\u00e9 strictement sup\u00e9rieur \u00e0 127 transform\u00e9s en pixel d'intensit\u00e9 1. On sauvegardera l'image sous le nom puppySeuil127.png . Exo M\u00eame exercice que pr\u00e9c\u00e9demment mais le choix du seuil \\(s\\) est fait par l'utilisateur. On sauvegardera l'image sous le nom puppySeuilS.png . Exo M\u00eame exercice que pr\u00e9c\u00e9demment mais n (un entier compris entre 2 et 25) seuils seront cr\u00e9\u00e9s. On sauvegardera l'image sous le nom puppyQuantificationN.png . Exo \u00c0 l'aide la biblioth\u00e8que matplotlib que vous connaissez d\u00e9j\u00e0, construire l'histogramme des intensit\u00e9s de niveaux de gris de l'image puppy.png : en abscisse, on trouve une intensit\u00e9 \\(i\\) de 0 \u00e0 255 et en ordonn\u00e9e le nombre de pixels d'intensit\u00e9 \\(i\\) dans l'image.", "title": "Travail sur les images num\u00e9riques"}, {"location": "prem/images_numeriques.html#definir-une-image-numerique", "text": "", "title": "D\u00e9finir une image num\u00e9rique"}, {"location": "prem/images_numeriques.html#que-cache-une-image", "text": "Voici une belle photo prise devant le mus\u00e9e Guggenheim de Bilbao. On peut facilement v\u00e9rifier que: Un pixel? Une image num\u00e9ris\u00e9e est constitu\u00e9e de pixel (picture element), auquel est associ\u00e9 une couleur. son format est de 470x312 : il y a donc 470 colonnes et 312 lignes , soit 146640 pixels! cette photo est un fichier num\u00e9rique dont l'extension est png . Chaque pixel a un niveau d'intensit\u00e9 allant du noir (0) au blanc(255) en passant par une multitude de niveaux de gris... Exercice Question R\u00e9ponse Pourquoi y a t-il 256 niveaux de gris pour une image? Car ce niveau est en g\u00e9n\u00e9ral cod\u00e9 sur un octet et avec un octet on peut coder au maximum \\(2^8=256\\) informations! Nous allons dans ce travail d\u00e9couvrir comment sont structur\u00e9es les images num\u00e9riques et proposez des m\u00e9thodes de transformations connues: changement de contraste, de taille, d'orientation,...", "title": "Que cache une image ?"}, {"location": "prem/images_numeriques.html#exploration-en-profondeur", "text": "L'image pr\u00e9sent\u00e9e ci-dessus est un fichier qui porte l'extension png (portable network graphic). Encore le W3C! Le consortium international W3C est charg\u00e9 du d\u00e9veloppement des standards du WEB dont le format png . Pour les plus curieux, voir ici . Rappelons que: Info L'extension d'un fichier pr\u00e9cise notamment sa nature. La sp\u00e9cification donne les inforamtions suivantes: leur signature: 8 octets le chunk IHDR pour l'en-t\u00eate : 13 octets le chunk IDAT pour les donn\u00e9es : poids variable selon l'image le chunk IEND pour la fin du fichier : 12 octets Donc une image dans ce format p\u00e8se au moins 45 octets... Le chunk IHDR donne entre autres les informations sur la largeur, la hauteur de l'image. Nous y reviendrons plus tard en diss\u00e9quant une image pour explorer ses entrailles ... Un format hyper connu :le format jpeg Attention! les fichiers .jpeg ne sont pas \u00e0 proprement dit des fichiers images mais des fichiers compress\u00e9s d'une image. Souvent, on commet une confusion, pas bien grave au final! Une image Portable Network Graphics (PNG) est un format ouvert, on peut donc explorer son contenu! Exo R\u00e9cup\u00e9rer la photo puppy.png ( T\u00e9l\u00e9charger la photo ) et l'image firefox.png ( T\u00e9l\u00e9charger l'image ). Ouvrez la photo avec les routines Python habituelles, en mode lecture binaire et visualisez l'ent\u00eate du fichier(le programme est donn\u00e9 juste apr\u00e8s). D\u00e9terminer le nombre d'octets constituants ce fichier. Le comparer \u00e0 la valeur obtenue par un clic droit sur l'image puis propri\u00e9t\u00e9s. Ouvrez l'image firefox.png et v\u00e9rifier qu'elle a la m\u00eame signature(ils commencent tous par la m\u00eame s\u00e9rie d'octets qui est leur signature...).Affichez la liste des octets dans votre console.Donnez cette signature. #Rappel sur les ouvertures en lecture ou ecritures de fichiers fichier_src = open ( \"........\" , \"rb\" ) #Completer avec le chemin relatif vers l'image #l'ouverture en mode rb ouvre le fichier en binaire (octet...) listeOctet = [ elt for elt in fichier_src . read ()] print ( len ( listeOctet )) #affiche la longueur de la liste, le nombre d'octets en fait! print ( listeOctet [: 100 ]) # affiche seulement les 100 premiers octets sinon... fichier_src . close () Vous devriez obtenir ceci: Probl\u00e8me de dimension? La largeur de l'image est 470 et sa hauteur 312! Expliquez alors les valeurs propos\u00e9es ci-dessus.", "title": "Exploration en profondeur"}, {"location": "prem/images_numeriques.html#image-matricielle", "text": "En g\u00e9n\u00e9ral, les images num\u00e9riques sont des images matricielles , par opposition aux images vectorielles d\u00e9finies par des courbes math\u00e9matiques. Les fichiers .svg d\u00e9velopp\u00e9s par le W3C, sont des images vectorielles tr\u00e8s adapt\u00e9es \u00e0 la construction de logo, comme celui de Firefox, d\u00e9composable en \u00e9l\u00e9ments g\u00e9om\u00e9triques. Exo Observez le logo Firefox d\u00e9fini sous .svg \u00e0 cette adresse et trouvez sa description .svg (clic droit-> code source de la page). Zoomez(touche Crtl + molette ). Ouvrez le fichier firefox.png dans le navigateur Firefox(cliquez sur le lien pr\u00e9c\u00e9dent...). Zoomez et comparez avec la manipulation pr\u00e9c\u00e9dente. Quelle diff\u00e9rence entre une image matricielle et vectorielle? Les images vectorielles ne permettent pas de repr\u00e9senter la r\u00e9alit\u00e9 de nos photos. Aussi, ne sont-elles utilis\u00e9es que pour des repr\u00e9sentations sp\u00e9cifiques comme les logos par exemple... \u00c0 retenir! Une photo, une image est donc d\u00e9finie g\u00e9n\u00e9ralement par un tableau de valeurs, appel\u00e9e matrice , d\u00e9finissant ainsi le niveau d'intensit\u00e9 de chaque pixel de cette image. On retrouvera en g\u00e9n\u00e9ral: des images en niveaux de gris en mode L : lorsque les couleurs sont cod\u00e9es sur 8 bits, c'est-\u00e0-dire 1 octet, il y a donc 256 niveaux de quantifications possibles allant du 0(noir) au blanc(255). des images couleurs cod\u00e9es en mode RGB pour Red Green Blue: chaque couleur est cod\u00e9e sur 8 bits soit un octet. des images couleurs avec un canal alpha en mode RGBA permettant de contr\u00f4ler la transparence d'une image, notamment lorsque l'on souhaite superposer l'une sur l'autre. Exo Dans une image couleur o\u00f9 chaque couleur est cod\u00e9e sur un octet, combien de couleurs diff\u00e9rentes peut-on obtenir? Dans une image matricielle contenant des pixels, le premier pixel est celui en haut \u00e0 gauche et le dernier , celui en bas \u00e0 droite. Puis on parcourt une image ligne par ligne, de gauche \u00e0 droite. Ceci est important pour comprendre comment on peut lire ou \u00e9crire sur une image! \u00c0 savoir! On entend par: lire un pixel , donner la valeur de sa couleur qui se pr\u00e9sente sous diff\u00e9rentes formes (entier, triplet ou quadruplet d'entiers) selon le mode de repr\u00e9sentation (L, RBG ou RGBA) \u00e9crire un pixel , d\u00e9finir sa couleur par la donn\u00e9e d'un entier, d'un triplet ou un quadruplet selon le mode de repr\u00e9sentation...", "title": "Image matricielle"}, {"location": "prem/images_numeriques.html#en-mode-programmation", "text": "Cette section propose de manipuler des images num\u00e9riques \u00e0 l'aide d'un biblioth\u00e8que Python appel\u00e9e PIL . Exo Installer la biblioth\u00e8que PILLOW dans Thonny(lors de l'import il faudra l'appeler sous son ancien nom PIL...). Il s'agit de traduire en Python l'id\u00e9e de: Les routines ! Vous allez apprendre \u00e0: ouvrir un fichier image img sur lequel on travaille; d\u00e9terminer les propri\u00e9t\u00e9s de cette image( mode,size,format ); cr\u00e9er une nouvelle image; lire et \u00e9crire sur une image (attention en g\u00e9n\u00e9ral, on lit dans l'une on \u00e9crit dans l'autre!) montrer ou enregistrer l'image obtenue. Pour illustrer les commandes python r\u00e9pondant \u00e0 ces besoins, nous allons utiliser la photo puppy.png . ATTENTION Tous les programmes doivent avoir en en-t\u00eate, l'import de la biblioth\u00e8que: from PIL import Image", "title": "En mode programmation!"}, {"location": "prem/images_numeriques.html#ouvrir-une-image-et-lire-des-informations", "text": "Exo Copier le code suivant et sauvegardez sous le nom lecture_inform.py from PIL import Image #Ouverture de l'image existante, le chemin relatif doit \u00eatre donn\u00e9 \u00e0 partir de votre fichier! im = Image . open ( \"Images\\puppy.png\" ) #pour ma part je mets les images dans un dossier Images #On peut conna\u00eetre les informations suivantes print ( im . mode , im . size , im . format ) im . close () L'objet im n'est pas une image mais un objet tampon sur lequel nous travaillerons avant de le fermer. Une image poss\u00e8de toujours une taille, un format et un mode de repr\u00e9sentation (niveaux de gris, couleurs avec alpha \u00e9ventuel). Exo Quelles sont les caract\u00e9ristiques de l'image puppy.png (mode, taille, format)? Et celles de l'image firefox.png ?", "title": "Ouvrir une image et lire des informations"}, {"location": "prem/images_numeriques.html#creation-dune-nouvelle-image", "text": "Nous allons cr\u00e9er une image d'abord en niveaux de gris (mode L ) \u00c0 savoir! Remarquez que la taille est donn\u00e9e sous la forme d'un tuple. from PIL import Image #Creation d'une nouvelle image en niveaux de gris IM = Image . new ( 'L' , ( 750 , 200 )) # en mode L pour niveaux de gris IM . save ( \"Images\\img_gris1.png\" ) #pour cr\u00e9er l'image dans le dossier Images... IM . close () Pour la cr\u00e9ation d'une image en couleur, seul le mode change (mode RGB ): \u00c0 savoir! Par d\u00e9faut et quel que soit le mode, tous les pixels de l'image sont noirs! from PIL import Image #Creation d'une nouvelle image en couleur IM = Image . new ( 'RGB' , ( 750 , 200 )) # en mode RGB pour la couleur IM . save ( \"Images\\img_coul.png\" ) #pour cr\u00e9er l'image dans le dossier Images... IM . close ()", "title": "Cr\u00e9ation d'une nouvelle image"}, {"location": "prem/images_numeriques.html#lire-la-valeur-dintensite-dun-pixel", "text": "Le code suivant permet de lire sur l'image puppy , la valeur d'intensit\u00e9 du pixel situ\u00e9 \u00e0 la colonne 20 et la ligne 30 . from PIL import Image #Ouverture de l'image existante #Le chemin relatif doit \u00eatre donn\u00e9 im = Image . open ( \"Images\\puppy.png\" ) pix = im . getpixel (( 20 , 30 )) print ( pix ) im . close () Attention , la m\u00e9thode getpixel prend en param\u00e8tre un tuple correspondant aux coordonn\u00e9es (colonne, ligne) du pixel dans l'image: dans l'exemple, 20 i\u00e8me colonne et 30i\u00e8me ligne(il faut bien s\u00fbr s'assurer que ce pixel existe...) . Donc on ne tape pas im.getpixel(20,30) mais bien im.getpixel((20,30)) Exo En s'utilisant le code pr\u00e9c\u00e9dent, donner l'intensit\u00e9 des pixels \\((105,42)\\) de l'image puppy.png . quelles sont les coordonn\u00e9es du dernier pixel de l'image(en bas \u00e0 droite).Donnez son intensit\u00e9", "title": "Lire la valeur d'intensit\u00e9 d'un pixel"}, {"location": "prem/images_numeriques.html#ecrire-lintensite-dun-pixel", "text": "On rappelle qu'on entend par \u00e9crire un pixel, d\u00e9finir sa valeur d'intensit\u00e9! from PIL import Image #Ouverture d'une nouvelle image IM = Image . new ( 'L' , ( 750 , 200 )) IM . putpixel (( 425 , 100 ), 150 ) IM . save ( \"Images\\img_gris2.png\" ) IM . close () La m\u00e9thode putpixel s'applique \u00e0 l'objet IM et prend en param\u00e8tres l'endroit o\u00f9 l'on veut \u00e9crire (c,l) (425 et 100 dans notre exemple) et la valeur d'intensit\u00e9 p (150 dans l'exemple). Attention dans le cas d'une image couleur l'intensit\u00e9 est un triplet (r,g,b) voire (r,g,b,a) . Rappel Lorsque vous cr\u00e9ez une image, tous les pixels sont noirs par d\u00e9faut. Donc \u00e0 0 sur tous les canaux!", "title": "\u00c9crire l'intensit\u00e9 d'un pixel"}, {"location": "prem/images_numeriques.html#parcourir-une-image-pixel-par-pixel", "text": "Le code pr\u00e9c\u00e9dent permet de d\u00e9finir l'intensit\u00e9 d' un pixel. Mais comment agir sur tous les pixels d'une image? Pour parcourir une image pixel par pixel, on va utiliser une double boucle: l'une pour parcourir les lignes, l'autre pour parcourir les colonnes. from PIL import Image #Ouverture de l'image imInit = Image . open ( \"Images\\puppy.png\" ) #La double boucle permet de parcourir l'image de haut en bas de gauche \u00e0 droite for l in range ( imInit . size [ 1 ]): #l comme ligne for c in range ( imInit . size [ 0 ]): #c comme colone pix = imInit . getpixel (( c , l )) # getpixel capture la valeur de couleur du pixel (c, l) print ( pix ) imInit . close () Ce programme fait afficher la valeur d'intensit\u00e9 de tous les pixels de l'image: donc ne l'ex\u00e9cutez pas! Dans tous les exercices, on utilisera ces deux boucles pour lire ou \u00e9crire sur une image. Par exemple, cr\u00e9eons une image en couleur de taille (500, 500) dont tous les pixels sont blancs sauf ceux de la ligne 250 qui sont rouges: from PIL import Image #Ouverture d'une nouvelle image img_new = Image . new ( 'RGB' , ( 500 , 500 )) #La double boucle permet de parcourir l'image de haut en bas de gauche \u00e0 droite for l in range ( img_new . size [ 1 ]): #l comme ligne for c in range ( img_new . size [ 0 ]): #c comme colone if l == 250 : img_new . putpixel (( c , l ), ( 255 , 0 , 0 )) # composante de rouge \u00e0 la ligne 250 else : img_new . putpixel (( c , l ), ( 255 , 255 , 255 )) # composante de blanc sinon img_new . show () #pour montrer l'image img_new . close () Exo En s'inspirant du code pr\u00e9c\u00e9dent: Cr\u00e9ez une image de largeur 500 et de hauteur 100, o\u00f9 tous les pixels de la ligne 50 sont verts, les autres restant noirs... Cr\u00e9ez une image de largeur 500 et de hauteur 100, o\u00f9 tous les pixels de la colonne 250 sont bleus, les autres blancs... Cr\u00e9ez une image de largeur 500 et de hauteur 500, o\u00f9 tous les pixels des diagonales sont rouges, les autres blancs...", "title": "Parcourir une image pixel par pixel"}, {"location": "prem/images_numeriques.html#lire-dans-lune-et-ecrire-dans-lautre", "text": "Tous les exercices propos\u00e9s sur le traitement d'image repose sur le principe suivant: Info On lit les informations dans une image et on \u00e9crit dans une autre Pour illustrer mes propos, construisons une image destination \u00e0 partir d'une image source en ajoutant la valeur 100 \u00e0 chaque intensit\u00e9 du pixel d'origine. Nous allons travailler modulo 256 pour rester dans la plage \\([0;255]\\) . Algorithme \u00e0 suivre ouvre une image en lecture cr\u00e9e une nouvelle image de caract\u00e9ristiques identiques parcoure et lit la valeur d'intensit\u00e9 de chaque pixel de l'image initiale parcoure et \u00e9cris au m\u00eame endroit sur l'image finale la valeur captur\u00e9e \u00e0 laquelle on ajoute 100 (on travaille modulo 256 pour rester dans la plage \\([0;255]\\) ). on enregistre l'image ainsi cr\u00e9\u00e9e. L'impl\u00e9mentation de l'algorithme pr\u00e9c\u00e9dent donne en Python, le programme suivant: from PIL import Image #ETAPE 1: imInit = Image . open ( \"Images\\puppy.png\" ) #ETAPE 2: ImFin = Image . new ( imInit . mode , imInit . size ) for l in range ( imInit . size [ 1 ]): #l comme ligne for c in range ( imInit . size [ 0 ]): #c comme colone #ETAPE 3 pix = imInit . getpixel (( c , l )) # getpixel capture la valeur de couleur du pixel (x,y) #ETAPE 4 ImFin . putpixel (( c , l ), ( pix + 100 ) % 256 ) #putpixel colore le pixel (x,y) de l'image IM avec la valeur de (pix + 100)%256 ImFin . show () #ETAPE 5 ImFin . save ( \"Images\\ImageTranslate100.png\" ) imInit . close () ImFin . close () Quelques informations sur le programme pr\u00e9c\u00e9dent: imInit est un objet tampon de l'image initiale; imInit.size renvoie donc la taille de l'image de d\u00e9part sous le forme d'un tuple imInit.size[0] est donc le premier \u00e9l\u00e9ment de imInit.size , soit la largeur de l'image. Et imInit.size[1] donne donc la hauteur. Et imInit.size[2] n'existe pas ! Donc l'instruction ImFin = Image.new(imInit.mode, imInit.size) construit une nouvelle image de m\u00eame mode et taille que celle qui a \u00e9t\u00e9 ouverte. c est la variable qui prend ses valeurs de 0 \u00e0 imInit.size[0] - 1 correspondant au num\u00e9ro de chaque colonne de l'image l est la variable qui prend ses valeurs de 0 \u00e0 imInit.size[1] - 1 correspondant au num\u00e9ro de chaque ligne de l'image Exo Construire de la m\u00eame fa\u00e7on les images translat\u00e9es de 10 pixels et de 255 pixels. Pensez \u00e0 changer le nom de sauvegarde sinon vous \u00e9craserez les fichiers pr\u00e9c\u00e9demment construits.", "title": "Lire dans l'une et \u00e9crire dans l'autre"}, {"location": "prem/images_numeriques.html#le-coin-des-exercices", "text": "En n'utilisant que les routines pr\u00e9c\u00e9dentes (il y a des m\u00e9thodes de la biblioth\u00e8que Pil qui permettent de r\u00e9aliser directement les transformations demand\u00e9es...), r\u00e9alisez les exercices suivants. Exo Cr\u00e9er une image en niveaux de gris de dimension 500 sur 100 pixels o\u00f9 chaque pixel a une intensit\u00e9 \u00e9gale \u00e0 un nombre al\u00e9atoire entre 0 et 255. On sauvegardera sous le nom hasard.png cette image. Cr\u00e9er une image en couleur de dimension 500 sur 100 pixels o\u00f9 chaque pixel a une intensit\u00e9 de rouge, de vert et de bleu est \u00e9gale \u00e0 un nombre al\u00e9atoire entre 0 et 255. On sauvegardera cette image sous le nom hasardcouleur.png . Exo Cr\u00e9er l'image puppynegative.png obtenu \u00e0 partir de l'image puppy.png en transformant le pixel p en le pixel 255 - p . Exo Cr\u00e9er une image de dimension 600(width) sur 400(height) pixels qui est le drapeau fran\u00e7ais. On sauvegardera cette image sous le nom drapeau.png . Exo Cr\u00e9er une image en niveaux de gris de dimension 500 sur 100 pixels o\u00f9 chaque pixel de ligne de rang pair est blanc et les autres noir. On sauvegardera cette image sous le nom ligneblanche.png . Exo L'image Firefox.png est une image couleur qui est donc la superposition de trois images: l'une contient les composantes de rouge, l'autre de vert et la derni\u00e8re de bleu. Construire ces trois images que vous sauvegarderez sous le nom filtreRougeFirefox.png ,.... Exo Construire l'image obtenue par une sym\u00e9trie verticale. On sauvegardera l'image sous le nom puppyV.png . Construire l'image obtenue par une sym\u00e9trie horizontale.On sauvegardera l'image sous le nom puppyH.png . Exo Effet de seuillage : L'id\u00e9e est d'effectuer un seuillage sur l'image en construisant une nouvelle image selon le principe suivant: tous les pixels dont l'intensit\u00e9 est inf\u00e9rieure ou \u00e9gal \u00e0 127 sont transform\u00e9s en pixel d'intensit\u00e9 0 et ceux d'intensit\u00e9 strictement sup\u00e9rieur \u00e0 127 transform\u00e9s en pixel d'intensit\u00e9 1. On sauvegardera l'image sous le nom puppySeuil127.png . Exo M\u00eame exercice que pr\u00e9c\u00e9demment mais le choix du seuil \\(s\\) est fait par l'utilisateur. On sauvegardera l'image sous le nom puppySeuilS.png . Exo M\u00eame exercice que pr\u00e9c\u00e9demment mais n (un entier compris entre 2 et 25) seuils seront cr\u00e9\u00e9s. On sauvegardera l'image sous le nom puppyQuantificationN.png . Exo \u00c0 l'aide la biblioth\u00e8que matplotlib que vous connaissez d\u00e9j\u00e0, construire l'histogramme des intensit\u00e9s de niveaux de gris de l'image puppy.png : en abscisse, on trouve une intensit\u00e9 \\(i\\) de 0 \u00e0 255 et en ordonn\u00e9e le nombre de pixels d'intensit\u00e9 \\(i\\) dans l'image.", "title": "Le coin des exercices"}, {"location": "prem/index_tpbash.html", "text": "Travail sur la ligne de commande \u00b6 ou comment interagir avec le syst\u00e8me d'exploitation sans utiliser son interface graphique! Une interface graphique qui a fait le succ\u00e8s de microsoft \u00b6 Microsoft est l'entreprise qui a d\u00e9velopp\u00e9 les premiers syst\u00e8mes d'exploitation proposant une interface graphique au d\u00e9but des ann\u00e9es 1990. Avant cette date, il fallait poss\u00e8der des connaissances techniques pour exploiter les ressources d'un ordinateur. Les syst\u00e8mes Windows (95, NT, XP, ...) ont d\u00e9mocratis\u00e9 l'utilisation des machines au point o\u00f9 tout le monde pouvait maintenant s'en acheter une pour son utilisation personnelle: c'est le d\u00e9but de l'\u00e8re des PC(personal computer). L' interface graphique propos\u00e9e par les syst\u00e8mes Windows est simple: il suffit de cliquer sur des ic\u00f4nes pr\u00e9sentes sur le bureau pour lancer un programme! En revanche, on ne peut pas faire ce qui n'a pas \u00e9t\u00e9 pr\u00e9vu: des t\u00e2ches d'administration par exemple... Passez la commande! \u00b6 On peut commander le syst\u00e8me d'exploitation en utilisant des commandes ou des script . Pour cela, il faut passer en ligne de commande.... Exo Tapez windows + R puis cmd dans la fen\u00eatre qui s'ouvre Vous devez obtenir quelque chose qui ressemble \u00e0 \u00e7a: c'est l'invite de commande ou le prompt ! Tapez dir puis la touche Entree . \u00c0 quoi sert cette instruction? Exo Tapez la commande dir /? dans le prompt. \u00c0 quoi sert-elle? Affichez l'aide de la commande copy Arborescence des syst\u00e8mes Windows \u00b6 Lecteurs \u00b6 Sous Windows, les diff\u00e9rentes partitions du disque dur sont identifi\u00e9es par des lettres majuscules: historiquement, la partition syst\u00e8me contenant le syst\u00e8me d'exploitation est C: une bonne installation partitionne le disque dur en au moins deux lecteurs: un pour le syst\u00e8me , l'autre pour les donn\u00e9es . En cas de panne du syst\u00e8me, on peut tout de m\u00eame acc\u00e8der aux donn\u00e9es m\u00eame si il faut formater la partition syst\u00e8me. d'autres lecteurs( E:,F:,.. ) peuvent exister: lecteurs r\u00e9seaux ou simplement une cl\u00e9 USB. Exo Ouvrez l'explorateur de documents de votre ordinateur(combinaison windows + E ). Nommez les diff\u00e9rents lecteurs que vous pouvez oberver Organisation des dossiers et des fichiers \u00b6 Les partitions contiennent des dossiers (ou r\u00e9pertoires ) et des fichiers . Les dossiers peuvent aussi contenir des dossiers appel\u00e9s sous-dossiers , qui contiennent eux-m\u00eames des dossiers et/ou des fichiers... Selon vos droits attribu\u00e9s lorsque vous vous identifiez( loggez ), vous avez diverses autorisations sur ces fichiers ou dossiers: droit de lecture , vous pouvez lire sans modifier le contenu. droit d'\u00e9criture , vous pouvez lire et modifier le contenu. aucun droit , le dossier ou le fichier existe mais vous ne pouvez m\u00eame pas le voir! D'autres droits existent que nous ne d\u00e9velopperons pas ici. Exo Quels droits avez-vous sur les lecteurs de votre ordinateur? Chemin absolu et relatif \u00b6 Pour d\u00e9signer ou pointer vers une ressource(fichier ou dossier), on utilise son chemin . Il peut \u00eatre: absolu : le chemin commence par la lettre de la partition et donne le nom de tous les dossiers qu'il faut traverser pour arriver \u00e0 la ressource. Par exemple, le chemin absolu de ce fichier est: C:\\Users\\Utilisateur\\tpbash\\docs\\index_tpbash.md relatif : le chemin identifie le chemin \u00e0 partir du r\u00e9pertoire courant. Par exemple, les images de cette page sont stock\u00e9es dans un dossier img et le chemin qui pointe vers l'image ci-dessous qui se nomme chemin.png est \\img\\chemin.png : Naviguer dans l'arborescence en ligne de commandes \u00b6 Des commandes de bases \u00b6 dir affiche le contenu du r\u00e9pertoire courant. Pour conna\u00eetre les options de cette commande , vous pouvez taper dir /? pour afficher l'aide! cd nom_du_dossier (change directory) permet de se d\u00e9placer dans le dossier nom_du_dossier si il existe! cd.. permet de remonter d'un niveau dans l'arborescence. mkdir (make directory) cr\u00e9e un nouveau dossier dans le r\u00e9pertoire courant! copy copie des fichiers ou des dossiers de la source vers la destination (tapez copy /? pour plus d'infos...) del (delete) efface le fichier pass\u00e9 en argument... Le caract\u00e8re * , appel\u00e9 joker , remplace n'importe quel texte dans le nom d'un fichier. Par exemple, la commande: copy *.txt C: \\b ackup copie tous les fichiers portant l'extension .txt dans le dossier backup situ\u00e9 \u00e0 la racine du lecteur C. Exo Ouvrez l'invite de commande. Dans le dossier Mes documents , cr\u00e9er un dossier test et un dossier backup (commande mkdir ). Allez ensuite dans ce dossier test avec la commande cd . Tapez la commande notepad coucou.txt . Normalement, le bloc notes s'ouvre avec un avertissement. Confirmez votre volont\u00e9 de cr\u00e9er ce fichier et mettez y le contenu de votre choix. Fermez notepad par la combinaison de touches Alt + F4 V\u00e9rifier que le fichier coucou.txt existe bien dans le dossier test(commande dir ). En ligne de commande, avec les instructions ci-dessus, copier ce fichier dans le dossier backup et v\u00e9rifier que la copie a fonctionn\u00e9! Attention les instructions changent en fonction du dossier dans lequel vous lancez l'instruction! Les variables d'environnement \u00b6 Comment dans la manipulation pr\u00e9c\u00e9dente, l'ex\u00e9cutable de notepad a t-il pu \u00eatre lanc\u00e9? Son seul appel suffit-il ? Bizarre... Exo En ligne de commande, tapez firefox . Que se passe t-il? Les variables d'environnement sont des variables qui peuvent \u00eatre appel\u00e9es partout par tous les programmes. Elles stockent des informations consid\u00e9r\u00e9es importantes commme: le nom de l'ordinateur, de l'utilisateur le chemin du r\u00e9pertoire TEMP contenant les fichiers temporaires la variable PATH contient le chemin d'ex\u00e9cutables(un programme en fait...) qui peuvent \u00eatre appel\u00e9s partout dans les programmes Exo Ouvrez l'invite de commande. Tapez PATH et observez les chemins propos\u00e9s Tapez echo %USERNAME% , pour afficher la valeur de la variable USERNAME Les fichiers de commande(.bat) \u00b6 On souhaite souvent ex\u00e9cuter les m\u00eames t\u00e2ches en ligne de commande. On peut alors regrouper les commandes dans un fichier qui sera directement lu par le syst\u00e8me DOS : ce sont par exemple, les fichiers dont l'extension est .bat Cr\u00e9ation En ligne de commande tapez: echo Nous sommes le %date%, il est %time% Ouvrez le bloc notes en tapant la commande notepad ( si elle est au path ...) puis copiez les instructions : @echo off echo Nous sommes le %date%, il est %time% pause Sauvegardez le fichier sous le nom dateheure avec l'extension .bat . Vous devriez voir appara\u00eetre un engrenage dans l'ic\u00f4ne d\u00e9crivant le fichier: Ex\u00e9cutez alors ce fichier par un double-clic. Que se passe t-il? Modifier le fichier en ajoutant une ligne avec l'instruction pause . Sauvegardez et ex\u00e9cutez \u00e0 nouveau le fichier. Affichage personnalis\u00e9e La commande dir sans argument permet d'afficher le contenu du dossier dans lequel elle est lanc\u00e9e. Nous allons cr\u00e9er ici un script affiche.bat qui prend en argument une extension de fichier (pdf, doc, txt, ...) et affiche les fichiers de cette extension contenu dans le dossier dans lequel il est ex\u00e9cut\u00e9. Recopier les lignes suivantes dans un fichier que vous sauvegarderez \u00e0 la racine du disque syst\u00e8me sous le nom affiche.bat . @echo off cls IF EXIST *.%1 ( dir *.%1 ) ELSE ( ECHO pas de fichier de ce type ) pause Commenter ces instructions avec la commande rem . Ouvrez la ligne de commande et tapez: C: \\> affiche txt Modifier le script pr\u00e9c\u00e9dent en ajoutant la source dans laquelle vous souhaitez afficher les fichiers.Il faudra pour cela cr\u00e9er un nouveau param\u00e8tre... Cr\u00e9ation de script de sauvegarde Vous avez t\u00e9l\u00e9charg\u00e9 un tas de fichier depuis le navigateur de votre ordinateur. \u00c9crire un script qui lorsque vous l'ex\u00e9cutez effectue une copie des fichiers pdf nouvellement t\u00e9l\u00e9charg\u00e9s vers un dossier sauvegardepdf contenu dans le dossier Mes Documents . Ce script sera lanc\u00e9 depuis le dossier script situ\u00e9 \u00e0 la racine du disque C et portera le nom de explicite de votre choix.", "title": "Passez la commande !"}, {"location": "prem/index_tpbash.html#travail-sur-la-ligne-de-commande", "text": "ou comment interagir avec le syst\u00e8me d'exploitation sans utiliser son interface graphique!", "title": "Travail sur la ligne de commande"}, {"location": "prem/index_tpbash.html#une-interface-graphique-qui-a-fait-le-succes-de-microsoft", "text": "Microsoft est l'entreprise qui a d\u00e9velopp\u00e9 les premiers syst\u00e8mes d'exploitation proposant une interface graphique au d\u00e9but des ann\u00e9es 1990. Avant cette date, il fallait poss\u00e8der des connaissances techniques pour exploiter les ressources d'un ordinateur. Les syst\u00e8mes Windows (95, NT, XP, ...) ont d\u00e9mocratis\u00e9 l'utilisation des machines au point o\u00f9 tout le monde pouvait maintenant s'en acheter une pour son utilisation personnelle: c'est le d\u00e9but de l'\u00e8re des PC(personal computer). L' interface graphique propos\u00e9e par les syst\u00e8mes Windows est simple: il suffit de cliquer sur des ic\u00f4nes pr\u00e9sentes sur le bureau pour lancer un programme! En revanche, on ne peut pas faire ce qui n'a pas \u00e9t\u00e9 pr\u00e9vu: des t\u00e2ches d'administration par exemple...", "title": "Une interface graphique qui a fait le succ\u00e8s de microsoft"}, {"location": "prem/index_tpbash.html#passez-la-commande", "text": "On peut commander le syst\u00e8me d'exploitation en utilisant des commandes ou des script . Pour cela, il faut passer en ligne de commande.... Exo Tapez windows + R puis cmd dans la fen\u00eatre qui s'ouvre Vous devez obtenir quelque chose qui ressemble \u00e0 \u00e7a: c'est l'invite de commande ou le prompt ! Tapez dir puis la touche Entree . \u00c0 quoi sert cette instruction? Exo Tapez la commande dir /? dans le prompt. \u00c0 quoi sert-elle? Affichez l'aide de la commande copy", "title": "Passez la commande!"}, {"location": "prem/index_tpbash.html#arborescence-des-systemes-windows", "text": "", "title": "Arborescence des syst\u00e8mes Windows"}, {"location": "prem/index_tpbash.html#lecteurs", "text": "Sous Windows, les diff\u00e9rentes partitions du disque dur sont identifi\u00e9es par des lettres majuscules: historiquement, la partition syst\u00e8me contenant le syst\u00e8me d'exploitation est C: une bonne installation partitionne le disque dur en au moins deux lecteurs: un pour le syst\u00e8me , l'autre pour les donn\u00e9es . En cas de panne du syst\u00e8me, on peut tout de m\u00eame acc\u00e8der aux donn\u00e9es m\u00eame si il faut formater la partition syst\u00e8me. d'autres lecteurs( E:,F:,.. ) peuvent exister: lecteurs r\u00e9seaux ou simplement une cl\u00e9 USB. Exo Ouvrez l'explorateur de documents de votre ordinateur(combinaison windows + E ). Nommez les diff\u00e9rents lecteurs que vous pouvez oberver", "title": "Lecteurs"}, {"location": "prem/index_tpbash.html#organisation-des-dossiers-et-des-fichiers", "text": "Les partitions contiennent des dossiers (ou r\u00e9pertoires ) et des fichiers . Les dossiers peuvent aussi contenir des dossiers appel\u00e9s sous-dossiers , qui contiennent eux-m\u00eames des dossiers et/ou des fichiers... Selon vos droits attribu\u00e9s lorsque vous vous identifiez( loggez ), vous avez diverses autorisations sur ces fichiers ou dossiers: droit de lecture , vous pouvez lire sans modifier le contenu. droit d'\u00e9criture , vous pouvez lire et modifier le contenu. aucun droit , le dossier ou le fichier existe mais vous ne pouvez m\u00eame pas le voir! D'autres droits existent que nous ne d\u00e9velopperons pas ici. Exo Quels droits avez-vous sur les lecteurs de votre ordinateur?", "title": "Organisation des dossiers et des fichiers"}, {"location": "prem/index_tpbash.html#chemin-absolu-et-relatif", "text": "Pour d\u00e9signer ou pointer vers une ressource(fichier ou dossier), on utilise son chemin . Il peut \u00eatre: absolu : le chemin commence par la lettre de la partition et donne le nom de tous les dossiers qu'il faut traverser pour arriver \u00e0 la ressource. Par exemple, le chemin absolu de ce fichier est: C:\\Users\\Utilisateur\\tpbash\\docs\\index_tpbash.md relatif : le chemin identifie le chemin \u00e0 partir du r\u00e9pertoire courant. Par exemple, les images de cette page sont stock\u00e9es dans un dossier img et le chemin qui pointe vers l'image ci-dessous qui se nomme chemin.png est \\img\\chemin.png :", "title": "Chemin absolu et relatif"}, {"location": "prem/index_tpbash.html#naviguer-dans-larborescence-en-ligne-de-commandes", "text": "", "title": "Naviguer dans l'arborescence en ligne de commandes"}, {"location": "prem/index_tpbash.html#des-commandes-de-bases", "text": "dir affiche le contenu du r\u00e9pertoire courant. Pour conna\u00eetre les options de cette commande , vous pouvez taper dir /? pour afficher l'aide! cd nom_du_dossier (change directory) permet de se d\u00e9placer dans le dossier nom_du_dossier si il existe! cd.. permet de remonter d'un niveau dans l'arborescence. mkdir (make directory) cr\u00e9e un nouveau dossier dans le r\u00e9pertoire courant! copy copie des fichiers ou des dossiers de la source vers la destination (tapez copy /? pour plus d'infos...) del (delete) efface le fichier pass\u00e9 en argument... Le caract\u00e8re * , appel\u00e9 joker , remplace n'importe quel texte dans le nom d'un fichier. Par exemple, la commande: copy *.txt C: \\b ackup copie tous les fichiers portant l'extension .txt dans le dossier backup situ\u00e9 \u00e0 la racine du lecteur C. Exo Ouvrez l'invite de commande. Dans le dossier Mes documents , cr\u00e9er un dossier test et un dossier backup (commande mkdir ). Allez ensuite dans ce dossier test avec la commande cd . Tapez la commande notepad coucou.txt . Normalement, le bloc notes s'ouvre avec un avertissement. Confirmez votre volont\u00e9 de cr\u00e9er ce fichier et mettez y le contenu de votre choix. Fermez notepad par la combinaison de touches Alt + F4 V\u00e9rifier que le fichier coucou.txt existe bien dans le dossier test(commande dir ). En ligne de commande, avec les instructions ci-dessus, copier ce fichier dans le dossier backup et v\u00e9rifier que la copie a fonctionn\u00e9! Attention les instructions changent en fonction du dossier dans lequel vous lancez l'instruction!", "title": "Des commandes de bases"}, {"location": "prem/index_tpbash.html#les-variables-denvironnement", "text": "Comment dans la manipulation pr\u00e9c\u00e9dente, l'ex\u00e9cutable de notepad a t-il pu \u00eatre lanc\u00e9? Son seul appel suffit-il ? Bizarre... Exo En ligne de commande, tapez firefox . Que se passe t-il? Les variables d'environnement sont des variables qui peuvent \u00eatre appel\u00e9es partout par tous les programmes. Elles stockent des informations consid\u00e9r\u00e9es importantes commme: le nom de l'ordinateur, de l'utilisateur le chemin du r\u00e9pertoire TEMP contenant les fichiers temporaires la variable PATH contient le chemin d'ex\u00e9cutables(un programme en fait...) qui peuvent \u00eatre appel\u00e9s partout dans les programmes Exo Ouvrez l'invite de commande. Tapez PATH et observez les chemins propos\u00e9s Tapez echo %USERNAME% , pour afficher la valeur de la variable USERNAME", "title": "Les variables d'environnement"}, {"location": "prem/index_tpbash.html#les-fichiers-de-commandebat", "text": "On souhaite souvent ex\u00e9cuter les m\u00eames t\u00e2ches en ligne de commande. On peut alors regrouper les commandes dans un fichier qui sera directement lu par le syst\u00e8me DOS : ce sont par exemple, les fichiers dont l'extension est .bat Cr\u00e9ation En ligne de commande tapez: echo Nous sommes le %date%, il est %time% Ouvrez le bloc notes en tapant la commande notepad ( si elle est au path ...) puis copiez les instructions : @echo off echo Nous sommes le %date%, il est %time% pause Sauvegardez le fichier sous le nom dateheure avec l'extension .bat . Vous devriez voir appara\u00eetre un engrenage dans l'ic\u00f4ne d\u00e9crivant le fichier: Ex\u00e9cutez alors ce fichier par un double-clic. Que se passe t-il? Modifier le fichier en ajoutant une ligne avec l'instruction pause . Sauvegardez et ex\u00e9cutez \u00e0 nouveau le fichier. Affichage personnalis\u00e9e La commande dir sans argument permet d'afficher le contenu du dossier dans lequel elle est lanc\u00e9e. Nous allons cr\u00e9er ici un script affiche.bat qui prend en argument une extension de fichier (pdf, doc, txt, ...) et affiche les fichiers de cette extension contenu dans le dossier dans lequel il est ex\u00e9cut\u00e9. Recopier les lignes suivantes dans un fichier que vous sauvegarderez \u00e0 la racine du disque syst\u00e8me sous le nom affiche.bat . @echo off cls IF EXIST *.%1 ( dir *.%1 ) ELSE ( ECHO pas de fichier de ce type ) pause Commenter ces instructions avec la commande rem . Ouvrez la ligne de commande et tapez: C: \\> affiche txt Modifier le script pr\u00e9c\u00e9dent en ajoutant la source dans laquelle vous souhaitez afficher les fichiers.Il faudra pour cela cr\u00e9er un nouveau param\u00e8tre... Cr\u00e9ation de script de sauvegarde Vous avez t\u00e9l\u00e9charg\u00e9 un tas de fichier depuis le navigateur de votre ordinateur. \u00c9crire un script qui lorsque vous l'ex\u00e9cutez effectue une copie des fichiers pdf nouvellement t\u00e9l\u00e9charg\u00e9s vers un dossier sauvegardepdf contenu dans le dossier Mes Documents . Ce script sera lanc\u00e9 depuis le dossier script situ\u00e9 \u00e0 la racine du disque C et portera le nom de explicite de votre choix.", "title": "Les fichiers de commande(.bat)"}, {"location": "prem/interface_graphique.html", "text": "Sortir de la console \u00b6 Nous avons vu comment construire une interface graphique donnant les diff\u00e9rentes combinaisons possibles des composantes RGB. Le travail suivant permet en autonomie la cr\u00e9ation puis la gestion d\u2019interfaces graphiques (fen\u00eatre, boutons, labels,...) qui donne une v\u00e9ritable Interface Homme-Machine (IHM). Nous ainsi allons cr\u00e9er une interface qui permet de construire des cercles et des carr\u00e9s de diff\u00e9rentes couleurs dans une zone de dessin. Dans une seconde partie nous cr\u00e9erons des animations pour dynamiser tout cela. Tout cela dans un seul objectif: cr\u00e9er des jeux! Notre interface graphique \u00b6 Analyse de notre interface \u00b6 Exemple d'interface graphique Dans cette interface vous trouverez: une zone de commandes contenant les diverses commandes (boutons, \u00e9chelles, entr\u00e9e,...) une zone de dessin, le canvas. Achev\u00e9e, elle permettra de construire des cercles ou des carr\u00e9s dans le canvas, d\u00e9finis dans leur forme et couleur par les valeurs des diff\u00e9rents boutons de commandes... Vous trouverez ci-dessous, une partie du code qui permet sa construction et que vous devrez compl\u00e9ter tout au long de ce travail: Code \u00e0 copier from tkinter import * from random import randint ################################# ZONE FONCTIONS ########################### ################################################################################## ############### CONSTRUCTION DES OBJETS DANS LA FENETRE ########################## ################################################################################## fen = Tk () fen . title ( \"Les objets graphiques\" ) fen . geometry ( '1000x600+100+100' ) fen . resizable ( False , False ) #widthxheight+bordecran ################################################################################## ZoneDessin = Frame ( fen , borderwidth = 2 , relief = RIDGE ) ZoneDessin . grid ( row = 0 , column = 0 ) ################################################################################## Can = Canvas ( ZoneDessin , bg = 'grey' , width = 800 , height = 580 ) Can . grid () ################################################################################### ZoneOptions = LabelFrame ( fen , borderwidth = 2 , text = 'Options' , labelanchor = 'n' , relief = RIDGE , width = 200 , height = 580 ) ZoneOptions . grid ( row = 0 , column = 1 ) ZoneOptions . grid_propagate ( 0 ) ################################################################################### BouDebut = Button ( ZoneOptions , text = 'Construire' , command = fen . destroy ) BouDebut . grid ( row = 0 , pady = 20 , columnspan = 2 ) ################################################################################### EchelleRayon = Scale ( ZoneOptions , orient = 'horizontal' , from_ = 0 , to = 100 , resolution = 1 , tickinterval = 10 , length = 190 , label = 'Dimension du cercle ou du carre' ) EchelleRayon . grid ( row = 1 , columnspan = 2 ) #---------------------------------------------------------------------------------# #################INSERER DESSOUS LES AUTRES CONSTRUCTEURS ##################### #---------------------------------------------------------------------------------# ################ NE RIEN METTRE EN DESSOUS DE CETTE LIGNE ######################## fen . mainloop () Exo Copier ce code et enregistrez-le dans un nouveau fichier que vous nommerez interface_graphique.py Analyse du code \u00b6 Pour construire une interface graphique, on fait appel \u00e0 des constructeurs : Frame, Scale, Button en sont des exemples. Chaque constructeur est d\u00e9fini dans un \u00e9l\u00e9ment parent et poss\u00e8de des attributs obligatoires ou optionnels qui lui sont propres. Info Le premier constructeur appel\u00e9 est Tk() qui construit la fen\u00eatre, appel\u00e9e fen ici. Ce constructeur poss\u00e8de les attributs title, geometry ou encore resizable et s\u00fbrement bien d'autres. Remarquez que le constructeur Scale pour faire des curseurs contient beaucoup plus d'attributs... En r\u00e9sum\u00e9... Et si vous voulez conna\u00eetre tous les attributs du constructeur Button , il suffit de se documenter: Pour se documenter Vous trouverez ici ou l\u00e0 de quoi vous documentez sur les diff\u00e9rents widgets que vous pouvez utiliser. Le gestionnaire de positionnement \u00b6 Il ne suffit pas de cr\u00e9er les \u00e9l\u00e9ments graphiques ; il faut aussi les placer dans leur conteneur. D\u2019ailleurs, les diff\u00e9rents widgets n\u2019appara\u00eetront pas s\u2019ils ne sont pas plac\u00e9s ! Il existe plusieurs fa\u00e7ons de positionner des objets mais nous n'utiliserons que le gestionnaire grid , qui permet de placer les objets dans une grille virtuelle, pr\u00e9alablement r\u00e9fl\u00e9chie... Positionnement relatif Les objets (widgets) sont positionn\u00e9s dans leur parent respectif et direct. Le canvas Can est positionn\u00e9 dans la ZoneDessin et le bouton Boudebut dans la ZoneOptions ! Il est donc important de bien concevoir son projet avant de le r\u00e9aliser! Enrichissons notre interface! \u00b6 Nous allons compl\u00e9ter le code propos\u00e9 ci-dessus afin d'enrichir l'interface par d'autres widgets et voir comment on peut dessiner dans le canvas (zone d\u00e9di\u00e9 au dessin...). Commande pour dessiner dans le canvas... \u00b6 Un canvas est une zone destin\u00e9e \u00e0 contenir des dessins ou autres figures complexes (et m\u00eame des images...). Par exemple pour cr\u00e9er un cercle rouge dans le canvas Can , il faut utiliser le constructeur : x = 400 y = 300 r = 50 Can . create_oval ( x - r , y - r , x + r , y + r , fill = 'red' ) Exo Ins\u00e9rer ce code dans la zone d'insertion et vous devriez voir appara\u00eetre un cercle rouge dans le canvas. Cr\u00e9er un autre cercle de couleur verte dont les coordonn\u00e9es du centre sont 225 et 458 de rayon 200 Pour dessiner un rectangle rose de largeur l , de hauteur h centr\u00e9 au point de coordonn\u00e9es (x,y) , il suffit d'utiliser le constructeur: Can . create_rectangle ( x - l / 2 , y - h / 2 , x + l / 2 , y + h / 2 , fill = 'pink' ) Exo Cr\u00e9er dans le canvas, un rectangle bleu centr\u00e9 en (500, 140) de largeur 100 et de hauteur 60 . N'oubliez pas de cr\u00e9er les variables x, y et l,h ! Il existe d'autres constructeurs pour ins\u00e9rer du texte par exemple ( create_text() ) ou des polygones plus complexes ( create_polygon() ) mais int\u00e9ressons nous \u00e0 la fa\u00e7on d'int\u00e9grer une image! Exo R\u00e9cup\u00e9rer l'image pacman.png ( ici ). Supprimer les cercles et les rectangles puis ins\u00e9rer le code suivant pour afficher l'image au milieu du canvas: img = PhotoImage ( file = \"pacman.png\" ) Can . create_image ( 400 , 290 , image = img ) Associer la valeur des widgets \u00e0 la construction d'une figure \u00e9l\u00e9mentaire... \u00b6 Dans cette partie, on souhaite construire des cercles ou des rectangles dont les dimensions sont donn\u00e9es par la valeur des quelques widgets pr\u00e9sents... Par exemple, r\u00e9cup\u00e9rer la valeur donn\u00e9e par le curseur et construire le cercle dont le rayon est cette valeur. On utilise pour cela une variable de contr\u00f4le . Info Une variable de contr\u00f4le est une variable gobale associ\u00e9e \u00e0 un widget et sa valeur peut \u00eatre r\u00e9cup\u00e9r\u00e9e partout dans le programme. Le code suivant permet de d\u00e9finir une variable de contr\u00f4le de type Int . Exo Ajouter le code suivant juste avant le constructeur EchelleRayon : valeur_curseur = IntVar ( ZoneOptions ) valeur_curseur . set ( 5 ) Ajouter au constructeur EchelleRayon l'attribut variable = valeur_curseur . Nous allons maintenant associer au bouton la commande qui permet de dessiner un cercle dans le canvas. Pour cela, nous allons d\u00e9finir la fonction cercle qui sera appel\u00e9e \u00e0 l'appui sur le bouton. Exo Ajouter dans la zone d\u00e9di\u00e9e aux fonctions, le code suivant: def cercle (): x , y = randint ( 0 , 800 ), randint ( 0 , 580 ) r = valeur_curseur . get () #permet de r\u00e9cup\u00e9rer la valeur de la variable valeur_curseur et la stocker dans la variable r Can . create_oval ( x - r , y - r , x + r , y + r , fill = 'red' ) Changer l'attibut command du bouton, en lui attibuant la valeur cercle . Modifier la valeur du curseur et tester la construction pour constater que le rayon du cercle change. Nous allons maintenant cr\u00e9er de nouveaux widgets pour : choisir la couleur(menu d\u00e9roulant dont le constructuer se nomme OptionMenu ) choisir la forme(menu d\u00e9roulant dont le constructeur se nomme OptionMenu ) saisir la valeur du c\u00f4t\u00e9 du carr\u00e9 (zone de saisir dont le constructeur se nomme Entry ) donner des indications (texte dont le constructeur se nomme Label ) Exo R\u00e9aliser la construction des widgets ci-dessus ainsi que les variables de contr\u00f4les n\u00e9cessaires. Je rappelle le lien vers l'aide (voir ici ) Et la souris mainenant! \u00b6 Nouvel objectif: dessiner dans le canvas une forme (carr\u00e9 ou cercle) aux coordonn\u00e9es donn\u00e9es par le clic de souris dans le canvas. Info L'appel de la fonction cercle va maintenant \u00eatre r\u00e9alis\u00e9 par un \u00e9v\u00e9nement ext\u00e9rieur (du type clavier ou souris). Il faut donc l'indiquer \u00e0 la fonction en lui ajoutant le param\u00e8tre event ou plus simplement evt La m\u00e9thode fen.mainloop() en fin de programme permet d'\u00e9couter les \u00e9v\u00e9nements ext\u00e9rieurs... Exo Changer la fonction cercle comme suit: def cercle ( evt ): x , y = evt . x , evt . y r = valeur_curseur . get () Can . create_oval ( x - r , y - r , x + r , y + r , fill = 'red' ) Ajouter enfin le code suivant juste avant l'instruction fen.mainloop() : Can . bind ( \"<Button-1>\" , cercle ) Vous comprendrez que: les coordonn\u00e9es du clic de souris sont r\u00e9cup\u00e9r\u00e9es par les instructions etv.x et evt.y . la derni\u00e8re instruction \u00e9tablit un lien entre le clic sur le bouton gauche de la souris ( Button-1 ) et la fonction cercle sur le canvas. Exo Modifier les codes afin de construire un objet au clic de souris dans le canvas dont les formes, les couleurs et les dimensions sont donn\u00e9es par les diff\u00e9rents widgets. Pilotage au clavier \u00b6 Dans le paragraphe pr\u00e9c\u00e9dent, nous avons vu comment int\u00e9ragir avec le clic de souris. Je vous propose ici de piloter un objet au clavier \u00e0 l'aide des fl\u00e8ches directionnelles. Exo R\u00e9cup\u00e9rer le code ci-dessous et enregistrez le fichier sous le nom pilotage_cercle.py Code \u00e0 copier from tkinter import * ####################### VARIABLES ########################################## x , y = 400 , 400 #d\u00e9fini les coordonn\u00e9es initiales de l'objet r = 25 # d\u00e9fini le rayon initial couleur = 'red' ######################### FONCTIONS ####################################### def bouge_balle ( evt ): global x , y , r touche = evt . keysym if touche == \"Left\" : x = x - 2 can . coords ( baballe , x - r , y - r , x + r , y + r ) elif touche == \"Right\" : x = x + 2 can . coords ( baballe , x - r , y - r , x + r , y + r ) elif touche == \"Up\" : pass elif touche == \"Down\" : pass ###################### CONSTRUCTEURS ################################### fen = Tk () fen . title ( \"Pilotage au clavier dans un canvas\" ) fen . geometry ( '800x800+100+100' ) fen . resizable ( False , False ) ###################################################################################### can = Canvas ( fen , bg = 'white' , width = 800 , height = 800 ) can . grid () ###################################################################################### baballe = can . create_oval ( x - r , y - r , x + r , y + r , fill = \"red\" ) ###################################################################################### fen . bind ( \"<Key>\" , bouge_balle ) fen . mainloop () Vous devriez \u00eatre en mesure de piloter la balle rouge vers la gauche ou la droite. Quelques \u00e9l\u00e9ments qui m\u00e9ritent notre attention: l'instruction fen.bind(\"<Key>\", bouge_balle) \u00e9tablit une lien entre l'action au clavier et la fonction bouge_balle ; l'instruction touche = evt.keysym permet d'affecter \u00e0 la variable touche la valeur de la touche enfonc\u00e9e au clavier; l'instruction can.coords(baballe,...) change les coordonn\u00e9es de l'objet baballe (qui existe!) dans le canvas can . Exo Changer les instructions pass de la fonction bouge_balle pour piloter vers le haut et vers le bas la balle rouge. Pour terminer ce travail, on se propose de faire \u00e9voluer la couleur la balle en appuyant sur les touches b pour la couleur bleu, r pour le rouge et n pour le noir. Exo Ajouter deux cas \u00e0 la fonction bouge_balle pour modifier la couleur de la balle Il faudra sans doute reconfigurer la balle...", "title": "Interface graphique en Python"}, {"location": "prem/interface_graphique.html#sortir-de-la-console", "text": "Nous avons vu comment construire une interface graphique donnant les diff\u00e9rentes combinaisons possibles des composantes RGB. Le travail suivant permet en autonomie la cr\u00e9ation puis la gestion d\u2019interfaces graphiques (fen\u00eatre, boutons, labels,...) qui donne une v\u00e9ritable Interface Homme-Machine (IHM). Nous ainsi allons cr\u00e9er une interface qui permet de construire des cercles et des carr\u00e9s de diff\u00e9rentes couleurs dans une zone de dessin. Dans une seconde partie nous cr\u00e9erons des animations pour dynamiser tout cela. Tout cela dans un seul objectif: cr\u00e9er des jeux!", "title": "Sortir de la console"}, {"location": "prem/interface_graphique.html#notre-interface-graphique", "text": "", "title": "Notre interface graphique"}, {"location": "prem/interface_graphique.html#analyse-de-notre-interface", "text": "Exemple d'interface graphique Dans cette interface vous trouverez: une zone de commandes contenant les diverses commandes (boutons, \u00e9chelles, entr\u00e9e,...) une zone de dessin, le canvas. Achev\u00e9e, elle permettra de construire des cercles ou des carr\u00e9s dans le canvas, d\u00e9finis dans leur forme et couleur par les valeurs des diff\u00e9rents boutons de commandes... Vous trouverez ci-dessous, une partie du code qui permet sa construction et que vous devrez compl\u00e9ter tout au long de ce travail: Code \u00e0 copier from tkinter import * from random import randint ################################# ZONE FONCTIONS ########################### ################################################################################## ############### CONSTRUCTION DES OBJETS DANS LA FENETRE ########################## ################################################################################## fen = Tk () fen . title ( \"Les objets graphiques\" ) fen . geometry ( '1000x600+100+100' ) fen . resizable ( False , False ) #widthxheight+bordecran ################################################################################## ZoneDessin = Frame ( fen , borderwidth = 2 , relief = RIDGE ) ZoneDessin . grid ( row = 0 , column = 0 ) ################################################################################## Can = Canvas ( ZoneDessin , bg = 'grey' , width = 800 , height = 580 ) Can . grid () ################################################################################### ZoneOptions = LabelFrame ( fen , borderwidth = 2 , text = 'Options' , labelanchor = 'n' , relief = RIDGE , width = 200 , height = 580 ) ZoneOptions . grid ( row = 0 , column = 1 ) ZoneOptions . grid_propagate ( 0 ) ################################################################################### BouDebut = Button ( ZoneOptions , text = 'Construire' , command = fen . destroy ) BouDebut . grid ( row = 0 , pady = 20 , columnspan = 2 ) ################################################################################### EchelleRayon = Scale ( ZoneOptions , orient = 'horizontal' , from_ = 0 , to = 100 , resolution = 1 , tickinterval = 10 , length = 190 , label = 'Dimension du cercle ou du carre' ) EchelleRayon . grid ( row = 1 , columnspan = 2 ) #---------------------------------------------------------------------------------# #################INSERER DESSOUS LES AUTRES CONSTRUCTEURS ##################### #---------------------------------------------------------------------------------# ################ NE RIEN METTRE EN DESSOUS DE CETTE LIGNE ######################## fen . mainloop () Exo Copier ce code et enregistrez-le dans un nouveau fichier que vous nommerez interface_graphique.py", "title": "Analyse de notre interface"}, {"location": "prem/interface_graphique.html#analyse-du-code", "text": "Pour construire une interface graphique, on fait appel \u00e0 des constructeurs : Frame, Scale, Button en sont des exemples. Chaque constructeur est d\u00e9fini dans un \u00e9l\u00e9ment parent et poss\u00e8de des attributs obligatoires ou optionnels qui lui sont propres. Info Le premier constructeur appel\u00e9 est Tk() qui construit la fen\u00eatre, appel\u00e9e fen ici. Ce constructeur poss\u00e8de les attributs title, geometry ou encore resizable et s\u00fbrement bien d'autres. Remarquez que le constructeur Scale pour faire des curseurs contient beaucoup plus d'attributs... En r\u00e9sum\u00e9... Et si vous voulez conna\u00eetre tous les attributs du constructeur Button , il suffit de se documenter: Pour se documenter Vous trouverez ici ou l\u00e0 de quoi vous documentez sur les diff\u00e9rents widgets que vous pouvez utiliser.", "title": "Analyse du code"}, {"location": "prem/interface_graphique.html#le-gestionnaire-de-positionnement", "text": "Il ne suffit pas de cr\u00e9er les \u00e9l\u00e9ments graphiques ; il faut aussi les placer dans leur conteneur. D\u2019ailleurs, les diff\u00e9rents widgets n\u2019appara\u00eetront pas s\u2019ils ne sont pas plac\u00e9s ! Il existe plusieurs fa\u00e7ons de positionner des objets mais nous n'utiliserons que le gestionnaire grid , qui permet de placer les objets dans une grille virtuelle, pr\u00e9alablement r\u00e9fl\u00e9chie... Positionnement relatif Les objets (widgets) sont positionn\u00e9s dans leur parent respectif et direct. Le canvas Can est positionn\u00e9 dans la ZoneDessin et le bouton Boudebut dans la ZoneOptions ! Il est donc important de bien concevoir son projet avant de le r\u00e9aliser!", "title": "Le gestionnaire de positionnement"}, {"location": "prem/interface_graphique.html#enrichissons-notre-interface", "text": "Nous allons compl\u00e9ter le code propos\u00e9 ci-dessus afin d'enrichir l'interface par d'autres widgets et voir comment on peut dessiner dans le canvas (zone d\u00e9di\u00e9 au dessin...).", "title": "Enrichissons notre interface!"}, {"location": "prem/interface_graphique.html#commande-pour-dessiner-dans-le-canvas", "text": "Un canvas est une zone destin\u00e9e \u00e0 contenir des dessins ou autres figures complexes (et m\u00eame des images...). Par exemple pour cr\u00e9er un cercle rouge dans le canvas Can , il faut utiliser le constructeur : x = 400 y = 300 r = 50 Can . create_oval ( x - r , y - r , x + r , y + r , fill = 'red' ) Exo Ins\u00e9rer ce code dans la zone d'insertion et vous devriez voir appara\u00eetre un cercle rouge dans le canvas. Cr\u00e9er un autre cercle de couleur verte dont les coordonn\u00e9es du centre sont 225 et 458 de rayon 200 Pour dessiner un rectangle rose de largeur l , de hauteur h centr\u00e9 au point de coordonn\u00e9es (x,y) , il suffit d'utiliser le constructeur: Can . create_rectangle ( x - l / 2 , y - h / 2 , x + l / 2 , y + h / 2 , fill = 'pink' ) Exo Cr\u00e9er dans le canvas, un rectangle bleu centr\u00e9 en (500, 140) de largeur 100 et de hauteur 60 . N'oubliez pas de cr\u00e9er les variables x, y et l,h ! Il existe d'autres constructeurs pour ins\u00e9rer du texte par exemple ( create_text() ) ou des polygones plus complexes ( create_polygon() ) mais int\u00e9ressons nous \u00e0 la fa\u00e7on d'int\u00e9grer une image! Exo R\u00e9cup\u00e9rer l'image pacman.png ( ici ). Supprimer les cercles et les rectangles puis ins\u00e9rer le code suivant pour afficher l'image au milieu du canvas: img = PhotoImage ( file = \"pacman.png\" ) Can . create_image ( 400 , 290 , image = img )", "title": "Commande pour dessiner dans le canvas..."}, {"location": "prem/interface_graphique.html#associer-la-valeur-des-widgets-a-la-construction-dune-figure-elementaire", "text": "Dans cette partie, on souhaite construire des cercles ou des rectangles dont les dimensions sont donn\u00e9es par la valeur des quelques widgets pr\u00e9sents... Par exemple, r\u00e9cup\u00e9rer la valeur donn\u00e9e par le curseur et construire le cercle dont le rayon est cette valeur. On utilise pour cela une variable de contr\u00f4le . Info Une variable de contr\u00f4le est une variable gobale associ\u00e9e \u00e0 un widget et sa valeur peut \u00eatre r\u00e9cup\u00e9r\u00e9e partout dans le programme. Le code suivant permet de d\u00e9finir une variable de contr\u00f4le de type Int . Exo Ajouter le code suivant juste avant le constructeur EchelleRayon : valeur_curseur = IntVar ( ZoneOptions ) valeur_curseur . set ( 5 ) Ajouter au constructeur EchelleRayon l'attribut variable = valeur_curseur . Nous allons maintenant associer au bouton la commande qui permet de dessiner un cercle dans le canvas. Pour cela, nous allons d\u00e9finir la fonction cercle qui sera appel\u00e9e \u00e0 l'appui sur le bouton. Exo Ajouter dans la zone d\u00e9di\u00e9e aux fonctions, le code suivant: def cercle (): x , y = randint ( 0 , 800 ), randint ( 0 , 580 ) r = valeur_curseur . get () #permet de r\u00e9cup\u00e9rer la valeur de la variable valeur_curseur et la stocker dans la variable r Can . create_oval ( x - r , y - r , x + r , y + r , fill = 'red' ) Changer l'attibut command du bouton, en lui attibuant la valeur cercle . Modifier la valeur du curseur et tester la construction pour constater que le rayon du cercle change. Nous allons maintenant cr\u00e9er de nouveaux widgets pour : choisir la couleur(menu d\u00e9roulant dont le constructuer se nomme OptionMenu ) choisir la forme(menu d\u00e9roulant dont le constructeur se nomme OptionMenu ) saisir la valeur du c\u00f4t\u00e9 du carr\u00e9 (zone de saisir dont le constructeur se nomme Entry ) donner des indications (texte dont le constructeur se nomme Label ) Exo R\u00e9aliser la construction des widgets ci-dessus ainsi que les variables de contr\u00f4les n\u00e9cessaires. Je rappelle le lien vers l'aide (voir ici )", "title": "Associer la valeur des widgets \u00e0 la construction d'une figure \u00e9l\u00e9mentaire..."}, {"location": "prem/interface_graphique.html#et-la-souris-mainenant", "text": "Nouvel objectif: dessiner dans le canvas une forme (carr\u00e9 ou cercle) aux coordonn\u00e9es donn\u00e9es par le clic de souris dans le canvas. Info L'appel de la fonction cercle va maintenant \u00eatre r\u00e9alis\u00e9 par un \u00e9v\u00e9nement ext\u00e9rieur (du type clavier ou souris). Il faut donc l'indiquer \u00e0 la fonction en lui ajoutant le param\u00e8tre event ou plus simplement evt La m\u00e9thode fen.mainloop() en fin de programme permet d'\u00e9couter les \u00e9v\u00e9nements ext\u00e9rieurs... Exo Changer la fonction cercle comme suit: def cercle ( evt ): x , y = evt . x , evt . y r = valeur_curseur . get () Can . create_oval ( x - r , y - r , x + r , y + r , fill = 'red' ) Ajouter enfin le code suivant juste avant l'instruction fen.mainloop() : Can . bind ( \"<Button-1>\" , cercle ) Vous comprendrez que: les coordonn\u00e9es du clic de souris sont r\u00e9cup\u00e9r\u00e9es par les instructions etv.x et evt.y . la derni\u00e8re instruction \u00e9tablit un lien entre le clic sur le bouton gauche de la souris ( Button-1 ) et la fonction cercle sur le canvas. Exo Modifier les codes afin de construire un objet au clic de souris dans le canvas dont les formes, les couleurs et les dimensions sont donn\u00e9es par les diff\u00e9rents widgets.", "title": "Et la souris mainenant!"}, {"location": "prem/interface_graphique.html#pilotage-au-clavier", "text": "Dans le paragraphe pr\u00e9c\u00e9dent, nous avons vu comment int\u00e9ragir avec le clic de souris. Je vous propose ici de piloter un objet au clavier \u00e0 l'aide des fl\u00e8ches directionnelles. Exo R\u00e9cup\u00e9rer le code ci-dessous et enregistrez le fichier sous le nom pilotage_cercle.py Code \u00e0 copier from tkinter import * ####################### VARIABLES ########################################## x , y = 400 , 400 #d\u00e9fini les coordonn\u00e9es initiales de l'objet r = 25 # d\u00e9fini le rayon initial couleur = 'red' ######################### FONCTIONS ####################################### def bouge_balle ( evt ): global x , y , r touche = evt . keysym if touche == \"Left\" : x = x - 2 can . coords ( baballe , x - r , y - r , x + r , y + r ) elif touche == \"Right\" : x = x + 2 can . coords ( baballe , x - r , y - r , x + r , y + r ) elif touche == \"Up\" : pass elif touche == \"Down\" : pass ###################### CONSTRUCTEURS ################################### fen = Tk () fen . title ( \"Pilotage au clavier dans un canvas\" ) fen . geometry ( '800x800+100+100' ) fen . resizable ( False , False ) ###################################################################################### can = Canvas ( fen , bg = 'white' , width = 800 , height = 800 ) can . grid () ###################################################################################### baballe = can . create_oval ( x - r , y - r , x + r , y + r , fill = \"red\" ) ###################################################################################### fen . bind ( \"<Key>\" , bouge_balle ) fen . mainloop () Vous devriez \u00eatre en mesure de piloter la balle rouge vers la gauche ou la droite. Quelques \u00e9l\u00e9ments qui m\u00e9ritent notre attention: l'instruction fen.bind(\"<Key>\", bouge_balle) \u00e9tablit une lien entre l'action au clavier et la fonction bouge_balle ; l'instruction touche = evt.keysym permet d'affecter \u00e0 la variable touche la valeur de la touche enfonc\u00e9e au clavier; l'instruction can.coords(baballe,...) change les coordonn\u00e9es de l'objet baballe (qui existe!) dans le canvas can . Exo Changer les instructions pass de la fonction bouge_balle pour piloter vers le haut et vers le bas la balle rouge. Pour terminer ce travail, on se propose de faire \u00e9voluer la couleur la balle en appuyant sur les touches b pour la couleur bleu, r pour le rouge et n pour le noir. Exo Ajouter deux cas \u00e0 la fonction bouge_balle pour modifier la couleur de la balle Il faudra sans doute reconfigurer la balle...", "title": "Pilotage au clavier"}, {"location": "prem/jscript.html", "text": "Le javascript pour donner du tonus \u00e0 notre code Le principe! \u00b6 Le cours pr\u00e9c\u00e9dent rappelle que le HTML d\u00e9crit le contenu des pages web que le CSS vient par la suite le formater. Il ne s'agit pas d'un langage de programmation et on ne peut donc pas interagir avec des \u00e9v\u00e9nements comme le clic de la souris, l'appui sur une touche du clavier ou le chargement d'une page... Le javascript est un langage de programmation cr\u00e9\u00e9 en 1995 et int\u00e9gr\u00e9 au navigateur Netscape Navigator afin de dynamiser les pages webs statiques . \u00c0 une action d'un utilisateur, on peut par exemple associer un comportement comme le changement de couleur d'un texte, d'un paragraphe,... Info Le javascript est un langage de programmation et le HTML un langage de description ! Le Document Object Model (D.O.M) \u00b6 Le DOM est la repr\u00e9sentation sch\u00e9matique et hi\u00e9rarchique de votre page web permettant de visualiser l'ensemble des balises HTML qui la constituent. Le javascript agit sur les objets du DOM. Il les rep\u00e8re soit par le nom de leur balise soit par leur idendifiant ( id ) ou bien encore leur classe ( class ). L'exemple de base... \u00b6 Nous utiliserons le code HTML index.html et la feuille de style style.css qui va avec ... Construire son arborescence Cr\u00e9er un dossier WEBJS contenant les dossiers img, css et js . Attention de bien respecter la casse ! T\u00e9l\u00e9chargez puis enregistrez le fichier index.html (clic droit->code source de la page) \u00e0 la racine du dossier WEBJS et le fichier style.css dans le dossier css . Visualiser alors le fichier index.html avec un navigateur et appelez le professeur pour validation. Le DOM de ce code HTML, volontairement incomplet , pourrait ressembler \u00e0 cela: Et c'est parti! \u00b6 Les exercices suivants n'ont rien d'original. Ils montrent seulement comment int\u00e9grer du code javascript dans un document HTML afin de dynamiser son contenu: essentiellement r\u00e9pondre aux solliciations ext\u00e9rieures comme le clic de souris, le chargement d'une page,... Une manipulation simple! \u00b6 Mon premier js... Int\u00e9grer entre les balises <head> le code suivant: < script > alert ( \"Le JavaScript fonctionne maintenant!\" ) < /script> Enregistrez votre fichier HTML et rafra\u00eechissez le navigateur afin de voir appara\u00eetre l'effet attendu. Ce code est ex\u00e9cut\u00e9 suite \u00e0 un \u00e9v\u00e9nement: le chargement de la page web. Mais on peut modifier cela! Mon deuxi\u00e8me js... Effacer les balises <script> pr\u00e9c\u00e9dente. Ins\u00e9rer dans le corps du document HTML juste apr\u00e8s la balise <body> , le code suivant: < button onclick = \"alert('\u00c7a marche aussi comme cela! ') \" > Appuyez ici! </ button > Enregistrez et rafra\u00eechissez! On a d\u00e9j\u00e0 expos\u00e9 dans un cours pr\u00e9c\u00e9dent le principe de s\u00e9parer les codes selon leur utilisation: le css dans un dossier css , les images dans un dossier img ,... Continuons ce rangement en enregistrant le code javascript dans son dossier de destination js . Mon troisi\u00e8me js... Avec notepad , ouvrer un nouveau document (language = javascript) que vous enregistrez sous le nom monpremierjs.js dans le dossier js . Copiez-y le code suivant: function ma_fonc_test (){ window . alert ( \"C'est encore mieux de faire ainsi!!\" ); } 3.Il faut maintenant indiquer au document courant o\u00f9 se situe le code javascript. Ins\u00e9rer alors le code suivant dans l'ent\u00eate (balises <head> ) de la page HTML: < script src = \"js\\monpremierjs.js\" ></ script > 4. Il faut aussi modifier notre bouton pour associer \u00e0 sa fonction onclick l'ex\u00e9cution de la fonction ma_fonc_test : < button onclick = \"ma_fonc_test()\" > Appuyez ici! </ button > 5. Enregistrez et rafra\u00eechissez, tout doit fonctionner! Remarquez! Chaque instruction javascript se terminer par un ; . Son oubli est souvent une source d'erreur... Il y a une diff\u00e9rence que l'on retrouve dans le langage python entre ma_fonc_test et ma_fonc_test() : le premier invoque le nom d'une fonction le deuxi\u00e8me l'ex\u00e9cute ! En mode debug... \u00b6 Souvent, le code javascript est long et complet et disons-le ne fonctionne pas toujours comme on le voudrait... Aussi prenons-nous l'habitude d'imprimer dans la console javascript l'\u00e9tat de certaines variables pour savoir si elles \u00e9voluent dans le bon sens... On retrouve cette habitude dans d'autres langages de programmation, en python par exemple... Info On appelle d\u00e9bugger , l'action de rechercher et corriger les erreurs d'un programme informatique. L'utilisation des print pour visualiser l'\u00e9tat des variables, permet souvent de d\u00e9bugger... Mais o\u00f9 se trouve la console javascript??? Dans Firefox, tapez F12 et vous verrez appara\u00eetre plusieurs onglets dont la console... Pour imprimer dans la console, rien de plus simple! Affichage dans la console... Ajouter \u00e0 la fonction ma_fonc_test() , l'instruction suivante: function ma_fonc_test (){ window . alert ( \"C'est encore mieux de faire ainsi!!\" ); console . log ( \"Ma javascript fonctionne\" ); } Enregistrez, rafra\u00eechissez et visualisez dans la console que tout va bien! \u00c9changez les deux instructions et commentez ce qui se passe. Remarquez la pr\u00e9sence du ; \u00e0 la fin de chaque instruction et la position des accolades qui englobent les deux instructions: \u00e0 l'appel de la fonction, les deux instructions sont alors ex\u00e9cut\u00e9es! Bouton et \u00e9v\u00e9nements \u00b6 Dans la partie pr\u00e9c\u00e9dente, nous avons: cr\u00e9er un bouton: les balises HTML du m\u00eame nom permettent de le faire associer un \u00e9v\u00e9nement \u00e0 l'appui sur ce bouton: le bouton a un attribut onclick auquel on peut associer une fonction javascript \u00e0 condition qu'elle soit bien entendu cod\u00e9e dans le fichier js. On se propose ici de cr\u00e9er de nouvelles fonctionnalit\u00e9s pour montrer ce dont javascript est capable de faire. Un bouton plus styl\u00e9! \u00b6 Notre bouton n'est pas tr\u00e8s joli... modifions son style! En mode styl\u00e9! Dans le fichier style.css , ajouter le code suivant: button { display: inline-block; background-color: #7b38d8; border-radius: 10px; border: 4px double #cccccc; color: #eeeeee; text-align: center; font-size: 28px; padding: 20px; width: 200px; transition: all 0.5s; cursor: pointer; margin: 5px; } button:hover { background-color: #f7c2f9; } Enregistrez, rafra\u00eechissez et admirez! Pour centrer le bouton, nous allons utiliser une astuce qui consiste \u00e0 la positionner dans une zone, un conteneur que nous allons centrer. Nous utiliserons alors les balises <div></div> . Utiliser un conteneur Ajouter les balises <div></div> tagg\u00e9es par la classe b_haut autour des balises <button> : < div class = \"b_haut\" >< button onclick = \"ma_fonc_test()\" > Essai </ button ></ div > Dans le css, on va indiquer que cette balise tagg\u00e9e <div> doit \u00eatre centr\u00e9e: div . b_haut { display : flex ; justify-content : center ; } Enregistrez et rafra\u00eechissez. Enfin, taggez la balise <div> contenant les autres boutons pour uniformiser notre affichage. Changement d'apparence \u00b6 Les paragraphes existants ont un background-color en rgb(20,100,100) d\u00e9fini dans la feuille de style. On souhaite ici modifier cette couleur en appuyant sur notre bouton de test... L'algorithme est donc: rechercher tous les \u00e9l\u00e9ments <p> dans le DOM changer leur bg associer l'\u00e9tape 1 et 2 au clic du bouton. Changer le bg Compl\u00e9ter le fichier monpremierjs.js (inutile d'effacer son contenu existant) comme suit: function new_bg (){ const elt = document . getElementsByTagName ( \"p\" ); console . log ( elt ); elt [ 0 ]. style . backgroundColor = \"rgb(200,200,0)\" ; elt [ 1 ]. style . backgroundColor = \"#00FF00\" ; elt [ 2 ]. style . backgroundColor = \"white\" ; } Changer le nom de la fonction javascript dans l'attribut onclick : < button onclick = \"new_bg()\" > L'affichage de la constante elt permet de conna\u00eetre son type et son contenu. En fouillant un peu, on voit qu'il y a quatre paragraphes trouv\u00e9s et on peut aussi explorer leurs attributs... M\u00eame si cela fonctionne, on peut faire beaucoup mieux en utilisant les classes ou les identificateurs. Taguage g\u00e9n\u00e9ral! Taguer les balises <p> selon le principe suivant: la premier balise est <p id =\"p1\"> , la deuxi\u00e8me <p id =\"p2\"> , etc... Modifier la fonction js pr\u00e9c\u00e9dente: function new_bg (){ document . getElementById ( \"p1\" ). style . backgroundColor = \"red\" ; document . getElementById ( \"p2\" ). style . backgroundColor = \"yellow\" ; document . getElementById ( \"p3\" ). style . backgroundColor = \"purple\" ; } 3. Enregistrez et rafra\u00eechissez. On peut aussi changer d'autres styles que celui du background. Essayez par exemple les changements suivants: Quelques changements sympas! \u00c0 ajouter dans le corps de la fonction pr\u00e9c\u00e9dente (entre les accolades sinon cela ne fonctionnera pas...) document . getElementById ( \"p1\" ). style . visibility = 'hidden' ; document . getElementById ( \"p2\" ). style . border = \"dashed red\" ; document . getElementById ( \"p3\" ). style . fontSize = \"500%\" ; document . getElementById ( \"p3\" ). style . fontFamily = \"Brush Script MT\" ; Info On tague les diff\u00e9rents \u00e9l\u00e9ments du DOM afin de pouvoir y acc\u00e9der par un programme javascript: si on tague par un id alors la recherche se fait par l'instruction document.getElementById(nom_id) si on tague par une classe alors la recherche se fait par l'instruction document.getElementByClassName(nom_class) Exercice de synth\u00e8se Supprimez le premier bouton du document HTML puis: en appuyant sur le bouton de gauche, le style des paragraphes changent : vous changerez les couleurs, les fontes, les tailles, ... et chaque paragraphe aura son propre style. en appuyant sur le bouton de droite, le style revient dans sa configuration originale... pour les meilleurs d'entre vous, changez aussi le style des listes (balises <ul> )! Cr\u00e9ation de nouveaux objets dans le DOM \u00b6 Le javascript permet aussi de modifier ou cr\u00e9er du contenant dans le document HTML himself! Modifier un fils... Ins\u00e9rer apr\u00e8s la balise <body> , le code HTML suivant: < div class = \"b_haut\" >< button onclick = \"ma_fonc_bonjour()\" > Essai </ button ></ div > < p id = \"demo\" ></ p > Cela cr\u00e9e le bouton que nous avions effac\u00e9 \u00e0 l'exercice pr\u00e9c\u00e9dent et un paragraphe vide... Cr\u00e9er un nouveau fichier javascript avec notepad, nomm\u00e9 monscript.js que vous enregistrez dans le dossier js . Ajoutez-y le code suivant: function ma_fonc_bonjour (){ document . getElementById ( \"demo\" ). innerHTML = \"Bonjour, nous sommes le \" + Date (); } Enfin, n'oubliez pas de changer le chemin de la source js dans les balises <script> pour pointer vers le bon fichier js... Enregistrez, rafra\u00eechissez et visualisez... Info La m\u00e9thode .innerTHML permet de modifier le contenu d'une balise HTML Utiliser la m\u00e9thode .innerTHML Taguer le premier titre <h1> par id = premiertitre . Compl\u00e9ter la fonction pr\u00e9c\u00e9dente pour que ce titre change en Qu'est ce que le Javascript? L'affichage de l'heure est dynamique mais invariant: quiconque appuie sur le bouton verra le m\u00eame message. Ne peut-on pas personnaliser cet affichage? Ouvrir une fen\u00eatre de saisie Dans le fichier monscript.js , ajoutez le code suivant: function debut (){ nom = window . prompt ( \"Donner votre nom avant de commencer!\" ); document . getElementById ( \"nom\" ). innerHTML = \"C'est parti!, \" + nom ; } Changer l' id du paragraphe <p> de demo en nom . Enfin, associer au clic de bouton la bonne fonction: < button onclick = \"debut()\" > Autre possibilit\u00e9: ins\u00e9rer une zone de saisie au sein du document HTML. Ins\u00e9rer une zone de saisie Ajouter le code HTML suivant sous le premier paragraphe(celui o\u00f9 id = nom ): < h1 > Donner votre \u00e2ge </ h1 > < div id = \"zone_saisie\" > < input id = \"choix_age\" pattern = \"[0-9]{2}\" value = 16 > < button type = \"button\" onclick = \"affiche_age()\" > Valider </ button > </ div > < p id = \"age\" ></ p > Ajouter la fonction javascript suivante dans le fichier monscript.js . function affiche_age (){ let choix = document . getElementById ( \"choix_age\" ). value ; const d = new Date (); const an = d . getFullYear () - choix document . getElementById ( \"age\" ). innerHTML = \"Vous \u00eates n\u00e9 en \" + an ; } Et si vous voulez centrer tout cela, ajouter \u00e0 la feuille de style, les instructions suivantes: # zone_saisie { display : flex ; justify-content : center ; } Les exemples pr\u00e9c\u00e9dents montrent des usages r\u00e9pandus du javascript: modification du DOM, interaction avec l'utilisateur, ... et bien d'autres choses que vous d\u00e9couvrirez dans votre vie de d\u00e9veloppeur! Bien entendu les possibilit\u00e9s sont vastes mais on peut d\u00e9j\u00e0 faire beaucoup de choses avec les quelques routines ci-dessus. Exercice de synth\u00e8se Construire une page web qui permet de saisir deux nombres et d'afficher leur somme. M\u00eame exercice mais les nombres saisis sont binaires!", "title": "Dynamisons le Web"}, {"location": "prem/jscript.html#le-principe", "text": "Le cours pr\u00e9c\u00e9dent rappelle que le HTML d\u00e9crit le contenu des pages web que le CSS vient par la suite le formater. Il ne s'agit pas d'un langage de programmation et on ne peut donc pas interagir avec des \u00e9v\u00e9nements comme le clic de la souris, l'appui sur une touche du clavier ou le chargement d'une page... Le javascript est un langage de programmation cr\u00e9\u00e9 en 1995 et int\u00e9gr\u00e9 au navigateur Netscape Navigator afin de dynamiser les pages webs statiques . \u00c0 une action d'un utilisateur, on peut par exemple associer un comportement comme le changement de couleur d'un texte, d'un paragraphe,... Info Le javascript est un langage de programmation et le HTML un langage de description !", "title": "Le principe!"}, {"location": "prem/jscript.html#le-document-object-model-dom", "text": "Le DOM est la repr\u00e9sentation sch\u00e9matique et hi\u00e9rarchique de votre page web permettant de visualiser l'ensemble des balises HTML qui la constituent. Le javascript agit sur les objets du DOM. Il les rep\u00e8re soit par le nom de leur balise soit par leur idendifiant ( id ) ou bien encore leur classe ( class ).", "title": "Le Document Object Model (D.O.M)"}, {"location": "prem/jscript.html#lexemple-de-base", "text": "Nous utiliserons le code HTML index.html et la feuille de style style.css qui va avec ... Construire son arborescence Cr\u00e9er un dossier WEBJS contenant les dossiers img, css et js . Attention de bien respecter la casse ! T\u00e9l\u00e9chargez puis enregistrez le fichier index.html (clic droit->code source de la page) \u00e0 la racine du dossier WEBJS et le fichier style.css dans le dossier css . Visualiser alors le fichier index.html avec un navigateur et appelez le professeur pour validation. Le DOM de ce code HTML, volontairement incomplet , pourrait ressembler \u00e0 cela:", "title": "L'exemple de base..."}, {"location": "prem/jscript.html#et-cest-parti", "text": "Les exercices suivants n'ont rien d'original. Ils montrent seulement comment int\u00e9grer du code javascript dans un document HTML afin de dynamiser son contenu: essentiellement r\u00e9pondre aux solliciations ext\u00e9rieures comme le clic de souris, le chargement d'une page,...", "title": "Et c'est parti!"}, {"location": "prem/jscript.html#une-manipulation-simple", "text": "Mon premier js... Int\u00e9grer entre les balises <head> le code suivant: < script > alert ( \"Le JavaScript fonctionne maintenant!\" ) < /script> Enregistrez votre fichier HTML et rafra\u00eechissez le navigateur afin de voir appara\u00eetre l'effet attendu. Ce code est ex\u00e9cut\u00e9 suite \u00e0 un \u00e9v\u00e9nement: le chargement de la page web. Mais on peut modifier cela! Mon deuxi\u00e8me js... Effacer les balises <script> pr\u00e9c\u00e9dente. Ins\u00e9rer dans le corps du document HTML juste apr\u00e8s la balise <body> , le code suivant: < button onclick = \"alert('\u00c7a marche aussi comme cela! ') \" > Appuyez ici! </ button > Enregistrez et rafra\u00eechissez! On a d\u00e9j\u00e0 expos\u00e9 dans un cours pr\u00e9c\u00e9dent le principe de s\u00e9parer les codes selon leur utilisation: le css dans un dossier css , les images dans un dossier img ,... Continuons ce rangement en enregistrant le code javascript dans son dossier de destination js . Mon troisi\u00e8me js... Avec notepad , ouvrer un nouveau document (language = javascript) que vous enregistrez sous le nom monpremierjs.js dans le dossier js . Copiez-y le code suivant: function ma_fonc_test (){ window . alert ( \"C'est encore mieux de faire ainsi!!\" ); } 3.Il faut maintenant indiquer au document courant o\u00f9 se situe le code javascript. Ins\u00e9rer alors le code suivant dans l'ent\u00eate (balises <head> ) de la page HTML: < script src = \"js\\monpremierjs.js\" ></ script > 4. Il faut aussi modifier notre bouton pour associer \u00e0 sa fonction onclick l'ex\u00e9cution de la fonction ma_fonc_test : < button onclick = \"ma_fonc_test()\" > Appuyez ici! </ button > 5. Enregistrez et rafra\u00eechissez, tout doit fonctionner! Remarquez! Chaque instruction javascript se terminer par un ; . Son oubli est souvent une source d'erreur... Il y a une diff\u00e9rence que l'on retrouve dans le langage python entre ma_fonc_test et ma_fonc_test() : le premier invoque le nom d'une fonction le deuxi\u00e8me l'ex\u00e9cute !", "title": "Une manipulation simple!"}, {"location": "prem/jscript.html#en-mode-debug", "text": "Souvent, le code javascript est long et complet et disons-le ne fonctionne pas toujours comme on le voudrait... Aussi prenons-nous l'habitude d'imprimer dans la console javascript l'\u00e9tat de certaines variables pour savoir si elles \u00e9voluent dans le bon sens... On retrouve cette habitude dans d'autres langages de programmation, en python par exemple... Info On appelle d\u00e9bugger , l'action de rechercher et corriger les erreurs d'un programme informatique. L'utilisation des print pour visualiser l'\u00e9tat des variables, permet souvent de d\u00e9bugger... Mais o\u00f9 se trouve la console javascript??? Dans Firefox, tapez F12 et vous verrez appara\u00eetre plusieurs onglets dont la console... Pour imprimer dans la console, rien de plus simple! Affichage dans la console... Ajouter \u00e0 la fonction ma_fonc_test() , l'instruction suivante: function ma_fonc_test (){ window . alert ( \"C'est encore mieux de faire ainsi!!\" ); console . log ( \"Ma javascript fonctionne\" ); } Enregistrez, rafra\u00eechissez et visualisez dans la console que tout va bien! \u00c9changez les deux instructions et commentez ce qui se passe. Remarquez la pr\u00e9sence du ; \u00e0 la fin de chaque instruction et la position des accolades qui englobent les deux instructions: \u00e0 l'appel de la fonction, les deux instructions sont alors ex\u00e9cut\u00e9es!", "title": "En mode debug..."}, {"location": "prem/jscript.html#bouton-et-evenements", "text": "Dans la partie pr\u00e9c\u00e9dente, nous avons: cr\u00e9er un bouton: les balises HTML du m\u00eame nom permettent de le faire associer un \u00e9v\u00e9nement \u00e0 l'appui sur ce bouton: le bouton a un attribut onclick auquel on peut associer une fonction javascript \u00e0 condition qu'elle soit bien entendu cod\u00e9e dans le fichier js. On se propose ici de cr\u00e9er de nouvelles fonctionnalit\u00e9s pour montrer ce dont javascript est capable de faire.", "title": "Bouton et \u00e9v\u00e9nements"}, {"location": "prem/jscript.html#un-bouton-plus-style", "text": "Notre bouton n'est pas tr\u00e8s joli... modifions son style! En mode styl\u00e9! Dans le fichier style.css , ajouter le code suivant: button { display: inline-block; background-color: #7b38d8; border-radius: 10px; border: 4px double #cccccc; color: #eeeeee; text-align: center; font-size: 28px; padding: 20px; width: 200px; transition: all 0.5s; cursor: pointer; margin: 5px; } button:hover { background-color: #f7c2f9; } Enregistrez, rafra\u00eechissez et admirez! Pour centrer le bouton, nous allons utiliser une astuce qui consiste \u00e0 la positionner dans une zone, un conteneur que nous allons centrer. Nous utiliserons alors les balises <div></div> . Utiliser un conteneur Ajouter les balises <div></div> tagg\u00e9es par la classe b_haut autour des balises <button> : < div class = \"b_haut\" >< button onclick = \"ma_fonc_test()\" > Essai </ button ></ div > Dans le css, on va indiquer que cette balise tagg\u00e9e <div> doit \u00eatre centr\u00e9e: div . b_haut { display : flex ; justify-content : center ; } Enregistrez et rafra\u00eechissez. Enfin, taggez la balise <div> contenant les autres boutons pour uniformiser notre affichage.", "title": "Un bouton plus styl\u00e9!"}, {"location": "prem/jscript.html#changement-dapparence", "text": "Les paragraphes existants ont un background-color en rgb(20,100,100) d\u00e9fini dans la feuille de style. On souhaite ici modifier cette couleur en appuyant sur notre bouton de test... L'algorithme est donc: rechercher tous les \u00e9l\u00e9ments <p> dans le DOM changer leur bg associer l'\u00e9tape 1 et 2 au clic du bouton. Changer le bg Compl\u00e9ter le fichier monpremierjs.js (inutile d'effacer son contenu existant) comme suit: function new_bg (){ const elt = document . getElementsByTagName ( \"p\" ); console . log ( elt ); elt [ 0 ]. style . backgroundColor = \"rgb(200,200,0)\" ; elt [ 1 ]. style . backgroundColor = \"#00FF00\" ; elt [ 2 ]. style . backgroundColor = \"white\" ; } Changer le nom de la fonction javascript dans l'attribut onclick : < button onclick = \"new_bg()\" > L'affichage de la constante elt permet de conna\u00eetre son type et son contenu. En fouillant un peu, on voit qu'il y a quatre paragraphes trouv\u00e9s et on peut aussi explorer leurs attributs... M\u00eame si cela fonctionne, on peut faire beaucoup mieux en utilisant les classes ou les identificateurs. Taguage g\u00e9n\u00e9ral! Taguer les balises <p> selon le principe suivant: la premier balise est <p id =\"p1\"> , la deuxi\u00e8me <p id =\"p2\"> , etc... Modifier la fonction js pr\u00e9c\u00e9dente: function new_bg (){ document . getElementById ( \"p1\" ). style . backgroundColor = \"red\" ; document . getElementById ( \"p2\" ). style . backgroundColor = \"yellow\" ; document . getElementById ( \"p3\" ). style . backgroundColor = \"purple\" ; } 3. Enregistrez et rafra\u00eechissez. On peut aussi changer d'autres styles que celui du background. Essayez par exemple les changements suivants: Quelques changements sympas! \u00c0 ajouter dans le corps de la fonction pr\u00e9c\u00e9dente (entre les accolades sinon cela ne fonctionnera pas...) document . getElementById ( \"p1\" ). style . visibility = 'hidden' ; document . getElementById ( \"p2\" ). style . border = \"dashed red\" ; document . getElementById ( \"p3\" ). style . fontSize = \"500%\" ; document . getElementById ( \"p3\" ). style . fontFamily = \"Brush Script MT\" ; Info On tague les diff\u00e9rents \u00e9l\u00e9ments du DOM afin de pouvoir y acc\u00e9der par un programme javascript: si on tague par un id alors la recherche se fait par l'instruction document.getElementById(nom_id) si on tague par une classe alors la recherche se fait par l'instruction document.getElementByClassName(nom_class) Exercice de synth\u00e8se Supprimez le premier bouton du document HTML puis: en appuyant sur le bouton de gauche, le style des paragraphes changent : vous changerez les couleurs, les fontes, les tailles, ... et chaque paragraphe aura son propre style. en appuyant sur le bouton de droite, le style revient dans sa configuration originale... pour les meilleurs d'entre vous, changez aussi le style des listes (balises <ul> )!", "title": "Changement d'apparence"}, {"location": "prem/jscript.html#creation-de-nouveaux-objets-dans-le-dom", "text": "Le javascript permet aussi de modifier ou cr\u00e9er du contenant dans le document HTML himself! Modifier un fils... Ins\u00e9rer apr\u00e8s la balise <body> , le code HTML suivant: < div class = \"b_haut\" >< button onclick = \"ma_fonc_bonjour()\" > Essai </ button ></ div > < p id = \"demo\" ></ p > Cela cr\u00e9e le bouton que nous avions effac\u00e9 \u00e0 l'exercice pr\u00e9c\u00e9dent et un paragraphe vide... Cr\u00e9er un nouveau fichier javascript avec notepad, nomm\u00e9 monscript.js que vous enregistrez dans le dossier js . Ajoutez-y le code suivant: function ma_fonc_bonjour (){ document . getElementById ( \"demo\" ). innerHTML = \"Bonjour, nous sommes le \" + Date (); } Enfin, n'oubliez pas de changer le chemin de la source js dans les balises <script> pour pointer vers le bon fichier js... Enregistrez, rafra\u00eechissez et visualisez... Info La m\u00e9thode .innerTHML permet de modifier le contenu d'une balise HTML Utiliser la m\u00e9thode .innerTHML Taguer le premier titre <h1> par id = premiertitre . Compl\u00e9ter la fonction pr\u00e9c\u00e9dente pour que ce titre change en Qu'est ce que le Javascript? L'affichage de l'heure est dynamique mais invariant: quiconque appuie sur le bouton verra le m\u00eame message. Ne peut-on pas personnaliser cet affichage? Ouvrir une fen\u00eatre de saisie Dans le fichier monscript.js , ajoutez le code suivant: function debut (){ nom = window . prompt ( \"Donner votre nom avant de commencer!\" ); document . getElementById ( \"nom\" ). innerHTML = \"C'est parti!, \" + nom ; } Changer l' id du paragraphe <p> de demo en nom . Enfin, associer au clic de bouton la bonne fonction: < button onclick = \"debut()\" > Autre possibilit\u00e9: ins\u00e9rer une zone de saisie au sein du document HTML. Ins\u00e9rer une zone de saisie Ajouter le code HTML suivant sous le premier paragraphe(celui o\u00f9 id = nom ): < h1 > Donner votre \u00e2ge </ h1 > < div id = \"zone_saisie\" > < input id = \"choix_age\" pattern = \"[0-9]{2}\" value = 16 > < button type = \"button\" onclick = \"affiche_age()\" > Valider </ button > </ div > < p id = \"age\" ></ p > Ajouter la fonction javascript suivante dans le fichier monscript.js . function affiche_age (){ let choix = document . getElementById ( \"choix_age\" ). value ; const d = new Date (); const an = d . getFullYear () - choix document . getElementById ( \"age\" ). innerHTML = \"Vous \u00eates n\u00e9 en \" + an ; } Et si vous voulez centrer tout cela, ajouter \u00e0 la feuille de style, les instructions suivantes: # zone_saisie { display : flex ; justify-content : center ; } Les exemples pr\u00e9c\u00e9dents montrent des usages r\u00e9pandus du javascript: modification du DOM, interaction avec l'utilisateur, ... et bien d'autres choses que vous d\u00e9couvrirez dans votre vie de d\u00e9veloppeur! Bien entendu les possibilit\u00e9s sont vastes mais on peut d\u00e9j\u00e0 faire beaucoup de choses avec les quelques routines ci-dessus. Exercice de synth\u00e8se Construire une page web qui permet de saisir deux nombres et d'afficher leur somme. M\u00eame exercice mais les nombres saisis sont binaires!", "title": "Cr\u00e9ation de nouveaux objets dans le DOM"}, {"location": "prem/premnsi.html", "text": "Premi\u00e8re NSI \u00b6 Programme de la classe \u00b6 Le programme de la sp\u00e9cialit\u00e9 NSI en classe de premi\u00e8re ici Les documents d'accompagnement l\u00e0", "title": "Accueil"}, {"location": "prem/premnsi.html#premiere-nsi", "text": "", "title": "Premi\u00e8re NSI"}, {"location": "prem/premnsi.html#programme-de-la-classe", "text": "Le programme de la sp\u00e9cialit\u00e9 NSI en classe de premi\u00e8re ici Les documents d'accompagnement l\u00e0", "title": "Programme de la classe"}, {"location": "prem/testpyodide.html", "text": "Int\u00e9grer Pyodide dans mkdocs pour tester du code \u00b6 ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder Utilisation des macros \u00b6 success \"Cours\" ext \"Pour aller plus loin\"", "title": "Int\u00e9grer Pyodide dans mkdocs pour tester du code :bomb:"}, {"location": "prem/testpyodide.html#integrer-pyodide-dans-mkdocs-pour-tester-du-code", "text": "### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder", "title": "Int\u00e9grer Pyodide dans mkdocs pour tester du code"}, {"location": "prem/testpyodide.html#utilisation-des-macros", "text": "success \"Cours\" ext \"Pour aller plus loin\"", "title": "Utilisation des macros"}, {"location": "prem/traitement_donnees.html", "text": "Capturer, visualiser et analyser des donn\u00e9es \u00b6 Les donn\u00e9es num\u00e9riques repr\u00e9sentent une v\u00e9ritable richesse. Les Intelligences Artificielles s'en nourrissent pour construire des r\u00e9flexions pertinentes dignes des pens\u00e9es humaines. Les GAFAM analysent vos donn\u00e9es personnelles pour mieux vous conna\u00eetre et vous proposer alors des contenus (surtout publicitaires) adapt\u00e9s... On se propose dans ce chapitre, de travailler sur des donn\u00e9es num\u00e9riques. Donn\u00e9es qui peuvent \u00eatre obtenues de diverses fa\u00e7ons. En particulier, par des requ\u00eates sur des serveurs qui nous livrent des informations; par le t\u00e9l\u00e9chargement de fichiers comportant une quantit\u00e9 \u00e9norme d'enregistrements. Vous trouverez ici diverses fa\u00e7ons de r\u00e9cup\u00e9rer, repr\u00e9senter et analyser des donn\u00e9es de tout type... Des donn\u00e9es qui explosent! \u00b6 Wikip\u00e9dia Le big data d\u00e9signe les ressources d\u2019informations dont les caract\u00e9ristiques en termes de volume, de v\u00e9locit\u00e9 et de vari\u00e9t\u00e9 imposent l\u2019utilisation de technologies et de m\u00e9thodes analytiques particuli\u00e8res pour cr\u00e9er de la valeur, et qui d\u00e9passent en g\u00e9n\u00e9ral les capacit\u00e9s d'une seule et unique machine et n\u00e9cessitent des traitements parall\u00e9lis\u00e9s. Le volume colossal de donn\u00e9es num\u00e9riques disponibles, implique de mettre en oeuvre de nouveaux ordres de grandeur concernant la capture, le stockage, la recherche, le partage, l'analyse et la visualisation des donn\u00e9es. Requ\u00eates sur serveur \u00b6 Dans une architecture classique, votre ordinateur (le client ) sollicite un service sur Internet h\u00e9berg\u00e9 par un autre ordinateur (le serveur ). On appelle requ\u00eate la demande r\u00e9alis\u00e9e par le client vers le serveur: Comment sont r\u00e9alis\u00e9es les requ\u00eates? Lorsque vous souhaitez visualiser le contenu d'un site https://www.parcoursup.fr/ par exemple, vous saisissez cette URL dans la barre d'adresse du navigateur et vous tapez sur ENTREE . Votre navigateur effectue alors une requ\u00eate sur le serveur qui h\u00e9berge le site sollicit\u00e9. Vous souhaitez visualiser cette requ\u00eate? Aucun souci! Exo Ouvrez Firefox et saisissez l'adresse https://www.parcoursup.fr/ Appuyer sur F12 pour ouvrir la console des outils de d\u00e9veloppement. Choisir l'onglet R\u00e9seau et rafraichissez la page en appuyant sur F5 Vous devriez obtenir quelque chose qui ressemble \u00e0 cela: Vous remarquerez plusieurs choses: La m\u00e9thode utilis\u00e9e est GET avec le protocole https . Cette m\u00e9thode demande une ressource au serveur. L'\u00e9tat de la r\u00e9ponse \u00e0 200(en vert) qui indique que tout c'est bien pass\u00e9... L'adresse IP du serveur : 193.54.151.224 D'autres requ\u00eates suivent la premi\u00e8re! \u00c0 retenir HTTP( et sa version s\u00e9curis\u00e9e HTTPS) est un protocole de transmission. Il permet \u00e0 un client de r\u00e9cup\u00e9rer aupr\u00e8s d\u2019un serveur web des donn\u00e9es. Si le client est un navigateur web, ce protocole permet d\u2019obtenir les donn\u00e9es n\u00e9cessaires \u00e0 l\u2019affichage d\u2019une page internet. Le protocole fonctionne par l\u2019interm\u00e9diaire de requ\u00eates \u00e9mises par le client et de r\u00e9ponses fournies par le serveur. Les m\u00e9thodes disponibles pour ce protocole sont nombreuses: La m\u00e9thode GET est la plus utilis\u00e9e et sollicite les ressources d'un serveur. Typiquement, le serveur renvoie la page index.html si il s'agit d'un serveur web. Si cette m\u00e9thode doit fournir des informations au serveur, elle le fait dans l'URL, ce qui peut poser des probl\u00e8mes de s\u00e9curit\u00e9... Il existe aussi la m\u00e9thode POST qui permet d'envoyer une ressource au serveur en m\u00eame temps que la requ\u00eate. Mais cette fois, les informations sont moins visibles car int\u00e9gr\u00e9es dans le corps du message. C'est ce qui se passe lorsque par exemple, vous remplissez un formulaire et que les informations saisies sont fournies au serveur. Peut-on faire une requ\u00eate http sans l'aide d'un navigateur ? La r\u00e9ponse est \u00e9videmment oui! Et nous allons utiliser le module request de python pour cela. Requ\u00eates en Python \u00b6 Exo Ouvrez Edupython ou Thonny et installer le module request au besoin. Copiez le code suivant: import requests reponse = requests . get ( 'https://www.parcoursup.fr/' ) print ( reponse . headers ) La m\u00e9thode headers permet d'afficher les ent\u00eates de la r\u00e9ponse et pas son contenu. Vous obtenez une r\u00e9ponse sous la forme d'un dictionnaire. \u00c9crire un script python simple qui permet de lister l'ensemble des cl\u00e9s. Quelle instruction python permet de faire afficher la valeur de la cl\u00e9 Content-Encoding ? L'instruction reponse.text permet d'afficher le contenu de la r\u00e9ponse. Modifiez le code pr\u00e9c\u00e9dent pour visualiser le contenu de la r\u00e9ponse. De quoi s'agit-il? Les sollicitations sur serveur sont si nombreuses qu'un nouveau format d'\u00e9changes a \u00e9t\u00e9 d\u00e9fini au d\u00e9but des ann\u00e9es 2000 pour uniformiser les pratiques. Il s'agit du format json . \u00c0 retenir JavaScript Object Notation (JSON) est un format de donn\u00e9es textuel d\u00e9riv\u00e9 de la notation des objets du langage JavaScript. Un exemple de fichier json : remarquez que cela ressemble \u00e9trangement aux dictionnaires en Python! mes_courses = { \"fruits\" : [ { \"kiwis\" : 3 , \"mangues\" : 4 , \"pommes\" : 0 }, { \"panier\" : True } ], \"legumes\" : { \"patates\" : \"amandine\" , \"poireaux\" : False }, \"viandes\" : [ \"poisson\" , \"poulet\" , \"boeuf\" ] } Il existe aussi le standard XML qui permet l'\u00e9chande de donn\u00e9es d'un logiciel \u00e0 un autre: les QCM de pronote utilisent ce standard! Exemple de fichiers XML (ici un QCM de Pronote) Exo Copier le dictionnaire mes_courses pr\u00e9c\u00e9dent dans Edupython ou Thonny. Combien de dictionnaire y-a-t'il dans cette variable? Combien de cl\u00e9 poss\u00e8de ce dictionnaire? Ecrire un script python qui affiche toutes les cl\u00e9s. Quelle instruction python permet de faire afficher la valeur \"poulet\" ? On verra plus tard comment manipuler des fichiers json en javascript... Requ\u00eates sur API \u00b6 L'API(Application Programming Interface) est un serveur qui livre des informations cibl\u00e9es sous la forme d'un fichier json en g\u00e9n\u00e9ral. Il existe de nombreuses API, parfois payantes, qui n\u00e9cessitent en plus de poss\u00e9der une API_KEY (un token...) pour pouvoir l'utiliser. Une premi\u00e8re manipulation! Exo Recopiez le code suivant et testez-le: \"\"\"Ce fichier effectue une requete sur un serveur web dont l url est donne ci-dessous les donnees recues sont formatees en json \"\"\" import requests url = \"https://geo.api.gouv.fr/communes?codePostal=47240&fields=nom,lon,lat,population&format=json&geometry=centre\" response = requests . get ( url ) #contenu de la reponse data = response . json () #formatage en json print ( data ) Modifier l'URL afin de faire une requ\u00eate pour obtenir seulement la population de la ville de Bordeaux. Allez ici pour savoir comment faire une requ\u00eate pour obtenir des informations sur l'adresse \"10 rue Victor Hugo\" Une API tr\u00e8s connue et utile: celle de openweathermap qui offre des informations sur la m\u00e9t\u00e9o. Exo Allez \u00e0 cette adresse ici pour vous inscrire \u00e0 l'API. Vous recevrez ensuite un token, une API_KEY sur votre email fourni lors de l'inscription. Effectuez ensuite une requ\u00eate sur l'API en rempla\u00e7ant dans le code suivant l' API_KEY par votre cl\u00e9! import requests url = \"http://api.openweathermap.org/data/2.5/weather?q=agen&appid=API_KEY\" content = requests . get ( url ) data = content . json () print ( data ) Compl\u00e9tez le code avec les deux lignes suivantes afin d'afficher dans la console la temp\u00e9rature actuelle \u00e0 AGEN. t = ..... # \u00c0 compl\u00e9ter pour que t soit la temp\u00e9rature. print ( \"La t\u00e9mp\u00e9rature est de {} degr\u00e9s C\" . format ( t - 273.15 )) On peut donc effectuer des requ\u00eates sur des serveurs distants afin de r\u00e9cup\u00e9rer des donn\u00e9es. Python propose des routines pour obtenir des donn\u00e9es json . Mais que faire de ces valeurs? Comment les mettre en valeurs? Le travail suivant permet la cr\u00e9ation d'une Interface Homme Machine(IHM) . Le but est de construire une interface WEB( on aurait pu le faire en Tkinter...) pour illustrer les informations obtenues par la requ\u00eate. Nous allons d'une part utiliser le langage javascript pour effectuer des requ\u00eates et le code HTML et CSS pour les mettre en valeurs! Requ\u00eates en Javascript \u00b6 Nous allons cr\u00e9er une application web qui permet d'afficher des informations m\u00e9t\u00e9orologiques sur une ville choisie. Exo R\u00e9cup\u00e9rer les fichiers necessaires ici . Ouvrez le fichier script.js en \u00e9criture pour modifier la variable API_KEY (remplacer les pointill\u00e9s par votre cl\u00e9 openweather). Pensez \u00e0 enregistrer. Ouvrez le fichier index.html en lecture et saisissez le nom d'une ville. Cette page affiche donc la temp\u00e9rature de la ville saisie au moment o\u00f9 vous sollicitez le service. \u00c0 retenir Le code HTML d\u00e9crit le contenu de la page et le CSS le met en forme. C'est le fichier javascript qui assure la fonctionnalit\u00e9 de contacter le site OpenWeather , de r\u00e9cup\u00e9rer les donn\u00e9es demand\u00e9es et de les afficher sur la page index.html . Nous allons analyser le fichier script.js puis nous allons le modifier pour r\u00e9cup\u00e9rer des informations suppl\u00e9mentaires. Exo Le code commence par une fonction javascript. Donner son nom et ses param\u00e8tres. Quelle m\u00e9thode est utilis\u00e9e pour effectuer la requ\u00eate sur l' url ? Expliquer la ligne var city = form.elements.cityName.value; Que fait l'instruction console.log(data); ? Quelle instruction permet de r\u00e9cup\u00e9rer la temp\u00e9rature de la ville? Expliquer les instructions: var cityName = document . createElement ( \"h2\" ); cityName . textContent = data . name ; document . getElementById ( \"resp\" ). appendChild ( cityName ); Ainsi, la seconde partie du fichier javascript repose sur une fonction qui r\u00e9cup\u00e8re des donn\u00e9es sur un serveur, cr\u00e9e des \u00e9l\u00e9ments HTML et les ajoute \u00e0 la page courante. Nous allons ainsi compl\u00e9ter les informations fournies par le service. Exo Il s'agit d'ajouter la temp\u00e9rature ressentie. La variable data est format\u00e9e en json et l'instruction data.main.temp r\u00e9cup\u00e8re la valeur de la temp\u00e9rature. Quelle instruction permet de r\u00e9cup\u00e9rer la temp\u00e9rature ressentie? En s'inspirant du code pr\u00e9c\u00e9dent, cr\u00e9er un affichage sur la page HTML qui affiche aussi la temp\u00e9rature ressentie. Il s'agit maintenant d'agr\u00e9menter l'interface par la description de la situation m\u00e9t\u00e9orologique ainsi qu'une ic\u00f4ne associ\u00e9e. Exo On souhaite ajouter une ic\u00f4ne pour illustrer le temps qu'il fait. Explorer la variable data dans la console de Firefox. Il y a une entr\u00e9e weather . Quel est son type? Ce tableau d\u00e9crit le temps qu'il fait et donne le code de l'ic\u00f4ne associ\u00e9e. Quel est cette description, ce code? Allez ici pour visualiser tous les ic\u00f4nes possibles. Compl\u00e9ter puis ajouter au fichier js le bout de code suivant: var descriptionCode = document . createElement ( \"h2\" ); descriptionCode . textContent = data . weather [ 0 ]. description ; var iconCode = .............; var iconUrl = \"http://openweathermap.org/img/w/\" + iconCode + \".png\" ; var icon = document . createElement ( \"img\" ); icon . setAttribute ( \"src\" , .........); document . getElementById ( \"resp\" ). appendChild (............); document . getElementById ( \"resp\" ). appendChild ( descriptionCode ); Finaliser le travail en construisant l'interface propos\u00e9e ci-dessous. Travailler sur des fichiers csv \u00b6 Dans la partie pr\u00e9c\u00e9dente, les donn\u00e9es \u00e0 exploiter sont obtenues par des requ\u00eates sur des serveurs distants dont la vocation est de fournir ce genre de service. Il existe aussi une pratique courante qui consiste \u00e0 exploiter les donn\u00e9es stock\u00e9es dans des fichiers bruts format\u00e9s (comme le json ). Nous allons donc exploiter maintenant les fichiers csv . Info Comma-separated values , connu sous le sigle CSV, est un format texte ouvert repr\u00e9sentant des donn\u00e9es tabulaires sous forme de valeurs s\u00e9par\u00e9es par des virgules(wikip\u00e9dia). Le format CSV pr\u00e9sente entre autres inconv\u00e9nients, d'\u00eatre interpr\u00e9t\u00e9 par Microsoft Excel comme \u00e9tant au format anglais (s\u00e9parateur de colonnes : virgule ; s\u00e9parateur de d\u00e9cimales : point) ou format de France (s\u00e9parateur de colonnes : point-virgule ; s\u00e9parateur de d\u00e9cimales : virgule) en fonction de l'origine du fichier. Mais on peut facilement les manipuler en Python. Et puis de nombreux sites permettent de r\u00e9cup\u00e9rer des donn\u00e9es de toutes sortes dans ce format. Info Le site data.gouv est une plateforme qui permet de r\u00e9cup\u00e9rer des donn\u00e9es publiques fran\u00e7aises. Les donn\u00e9es propos\u00e9es sont publiques et soumis \u00e0 la licence LICENCE OUVERTE qui permet une grande libert\u00e9 de r\u00e9utilisation de ces donn\u00e9es. Exo R\u00e9cup\u00e9rer \u00e0 cette adresse , le fichier radars.csv , donnant la liste des radars automatiques en France(MAJ 2018). Ouvrez ce fichier avec le bloc note pour visualiser son contenu(attention par d\u00e9faut, il s'ouvre avec Excel...). Nous avons rappelons les routines python qui permettent d'ouvrir, de cr\u00e9er, de lire ou d'\u00e9crire sur un fichier. source = open ( \"radars.csv\" , \"r\" ) #ouverture en lecture du fichier radars.csv entete = source . readline () print ( entete ) destination = open ( \"new_file.csv\" , \"w\" ) # cr\u00e9e un nouveau fichier csv en \u00e9criture La m\u00e9thode readline() appliqu\u00e9e \u00e0 l'objet source permet de lire la premi\u00e8re ligne du fichier: ici cette ligne est stock\u00e9e dans la variable entete . En rappelant cette instruction, vous pourrez alors lire la seconde ligne, et ainsi de suite. Exo Quel est le type de la variable entete ? Nous souhaitons exploiter les donn\u00e9es de ce fichier. Si chaque enregistrement est renvoy\u00e9 comme une cha\u00eene de caract\u00e8res, ce n'est pas l'id\u00e9al. On pr\u00e9ferait une liste ou un dictionnaire pour acc\u00e9der plus facilement aux donn\u00e9es qu'elles contiennent. Une m\u00e9thode importante: la m\u00e9thode split La m\u00e9thode readline() appliqu\u00e9e \u00e0 l'objet source renvoie une cha\u00eene de caract\u00e8res. La m\u00e9thode split appliqu\u00e9e \u00e0 une cha\u00eene de caract\u00e8res prend en param\u00e8tre un caract\u00e8re (la virgule par exemple) et d\u00e9coupe la cha\u00eene de caract\u00e8res en plusieurs \u00e9l\u00e9ments qui seront alors stock\u00e9s dans une liste. Le d\u00e9coupage se fait au caract\u00e8re indiqu\u00e9 en param\u00e8tre dans la fonction. Un exemple pour mieux comprendre: ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder entete = \"Pour comprendre, analyser et ensuite, utiliser la m\u00e9thode split\"bksl-nlL1 = entete.split(',')bksl-nlprint(L1)bksl-nlL2 = entete.split('e')bksl-nlprint(L2)bksl-nlL3 = entete.split(' ')bksl-nlprint(L3)bksl-nl A Z On d\u00e9sire maintenant exploiter le fichier radars.csv afin d'extraire : seulement les donn\u00e9es suivantes sur les radars automatiques du lot-et-garonne(47): emplacement, longitude et latitude, type de radars et de les stocker dans le fichier radars47.csv . Exo Compl\u00e9ter puis ex\u00e9cuter le fichier python suivant afin qu'il r\u00e9alise le voeu pr\u00e9c\u00e9dent. # fichier \u00e0 enregistrer au m\u00eame endroit que le fichier radars.csv source = open ( \"radars.csv\" , \"r\" , encoding = \"utf-8\" ) source47 = open ( \"radars47.csv\" , ..... , encoding = \"utf-8\" ) entete = source . readline () source47 . write ( \"emplacement, latitude, longitude, type de radars \\n \" ) enregistrement = .................. while enregistrement != '' : liste = enregistrement . split ( ',' ) if liste [ 2 ] == ....... : source47 . write ( f \" { liste [ ..... ] } , float( { liste [ ..... ]) } , float( { liste [ ..... ] } ), { liste [ ..... ] } \\n \" ) enregistrement = ............... source . close () source47 . close () 2. V\u00e9rifier avec le bloc note que le fichier radars47.csv contient bien les donn\u00e9es demand\u00e9es. Importation des donn\u00e9es sur une carte \u00b6 Il s'agit maintenant d'exploiter le fichier radars47.csv afin de situer les diff\u00e9rents radars sur une carte. Nous allons pour cela utiliser le module folium de python qui g\u00e9n\u00e9re des cartes de OpenStreetMap . Exo Installer le module folium dans Thonny ou Edupython. La documentation du module est simple et se trouve ici Exo Cr\u00e9er une carte nomm\u00e9e carte_47 centr\u00e9e sur le Lot-et-Garonne. Ajouter un param\u00e8tre de zoom. La carte ainsi cr\u00e9e, on peut ajouter des marqueurs ( Marker ) comme indiqu\u00e9 dans la documentation en pr\u00e9cisant la longitude et la latitude du lieu que vous souhaitez mettre en avant. Exo Ajouter un marqueur rouge avec une ic\u00f4ne information sur le lyc\u00e9e Jean Baptiste de Baudre. Quand la souris passe sur ce marqueur est affich\u00e9e le nom de la ville et quand on clique dessus, c'est le nom du lyc\u00e9e qui est affich\u00e9. Ajouter un marqueur vert avec une ic\u00f4ne information sur e point de coordonn\u00e9es lat = 44.2969 et lon = 0.0397 . Vous remplirez le popup et le tooltip en fonction de ce que vous y trouverez! Vous devriez alors obtenir \u00e0 peu pr\u00e8s ceci... Retour \u00e0 nos radars du 47! L'objectif est de cr\u00e9er une carte du Lot-et-Garonne contenant les marques de tous les radars. L'algorithme de construction ressemble alors \u00e0 cela: Cr\u00e9er carte du Lot et Garonne Pour chaque \u00e9l\u00e9ment radar du fichier radar47 . csv Cr\u00e9er le marqueur au coordonn\u00e9es du radar , popup = type de radar , tooltip = Nom du lieu Sauvegarder la carte Afficher la carte Exo \u00c9crire le programme qui impl\u00e9mente l'algorithme suivant. Vous devriez obtenir la carte ci-dessous( celle-ci n'est pas interactive, la v\u00f4tre si!):", "title": "Traitement des donn\u00e9es"}, {"location": "prem/traitement_donnees.html#capturer-visualiser-et-analyser-des-donnees", "text": "Les donn\u00e9es num\u00e9riques repr\u00e9sentent une v\u00e9ritable richesse. Les Intelligences Artificielles s'en nourrissent pour construire des r\u00e9flexions pertinentes dignes des pens\u00e9es humaines. Les GAFAM analysent vos donn\u00e9es personnelles pour mieux vous conna\u00eetre et vous proposer alors des contenus (surtout publicitaires) adapt\u00e9s... On se propose dans ce chapitre, de travailler sur des donn\u00e9es num\u00e9riques. Donn\u00e9es qui peuvent \u00eatre obtenues de diverses fa\u00e7ons. En particulier, par des requ\u00eates sur des serveurs qui nous livrent des informations; par le t\u00e9l\u00e9chargement de fichiers comportant une quantit\u00e9 \u00e9norme d'enregistrements. Vous trouverez ici diverses fa\u00e7ons de r\u00e9cup\u00e9rer, repr\u00e9senter et analyser des donn\u00e9es de tout type...", "title": "Capturer, visualiser et analyser des donn\u00e9es"}, {"location": "prem/traitement_donnees.html#des-donnees-qui-explosent", "text": "Wikip\u00e9dia Le big data d\u00e9signe les ressources d\u2019informations dont les caract\u00e9ristiques en termes de volume, de v\u00e9locit\u00e9 et de vari\u00e9t\u00e9 imposent l\u2019utilisation de technologies et de m\u00e9thodes analytiques particuli\u00e8res pour cr\u00e9er de la valeur, et qui d\u00e9passent en g\u00e9n\u00e9ral les capacit\u00e9s d'une seule et unique machine et n\u00e9cessitent des traitements parall\u00e9lis\u00e9s. Le volume colossal de donn\u00e9es num\u00e9riques disponibles, implique de mettre en oeuvre de nouveaux ordres de grandeur concernant la capture, le stockage, la recherche, le partage, l'analyse et la visualisation des donn\u00e9es.", "title": "Des donn\u00e9es qui explosent!"}, {"location": "prem/traitement_donnees.html#requetes-sur-serveur", "text": "Dans une architecture classique, votre ordinateur (le client ) sollicite un service sur Internet h\u00e9berg\u00e9 par un autre ordinateur (le serveur ). On appelle requ\u00eate la demande r\u00e9alis\u00e9e par le client vers le serveur: Comment sont r\u00e9alis\u00e9es les requ\u00eates? Lorsque vous souhaitez visualiser le contenu d'un site https://www.parcoursup.fr/ par exemple, vous saisissez cette URL dans la barre d'adresse du navigateur et vous tapez sur ENTREE . Votre navigateur effectue alors une requ\u00eate sur le serveur qui h\u00e9berge le site sollicit\u00e9. Vous souhaitez visualiser cette requ\u00eate? Aucun souci! Exo Ouvrez Firefox et saisissez l'adresse https://www.parcoursup.fr/ Appuyer sur F12 pour ouvrir la console des outils de d\u00e9veloppement. Choisir l'onglet R\u00e9seau et rafraichissez la page en appuyant sur F5 Vous devriez obtenir quelque chose qui ressemble \u00e0 cela: Vous remarquerez plusieurs choses: La m\u00e9thode utilis\u00e9e est GET avec le protocole https . Cette m\u00e9thode demande une ressource au serveur. L'\u00e9tat de la r\u00e9ponse \u00e0 200(en vert) qui indique que tout c'est bien pass\u00e9... L'adresse IP du serveur : 193.54.151.224 D'autres requ\u00eates suivent la premi\u00e8re! \u00c0 retenir HTTP( et sa version s\u00e9curis\u00e9e HTTPS) est un protocole de transmission. Il permet \u00e0 un client de r\u00e9cup\u00e9rer aupr\u00e8s d\u2019un serveur web des donn\u00e9es. Si le client est un navigateur web, ce protocole permet d\u2019obtenir les donn\u00e9es n\u00e9cessaires \u00e0 l\u2019affichage d\u2019une page internet. Le protocole fonctionne par l\u2019interm\u00e9diaire de requ\u00eates \u00e9mises par le client et de r\u00e9ponses fournies par le serveur. Les m\u00e9thodes disponibles pour ce protocole sont nombreuses: La m\u00e9thode GET est la plus utilis\u00e9e et sollicite les ressources d'un serveur. Typiquement, le serveur renvoie la page index.html si il s'agit d'un serveur web. Si cette m\u00e9thode doit fournir des informations au serveur, elle le fait dans l'URL, ce qui peut poser des probl\u00e8mes de s\u00e9curit\u00e9... Il existe aussi la m\u00e9thode POST qui permet d'envoyer une ressource au serveur en m\u00eame temps que la requ\u00eate. Mais cette fois, les informations sont moins visibles car int\u00e9gr\u00e9es dans le corps du message. C'est ce qui se passe lorsque par exemple, vous remplissez un formulaire et que les informations saisies sont fournies au serveur. Peut-on faire une requ\u00eate http sans l'aide d'un navigateur ? La r\u00e9ponse est \u00e9videmment oui! Et nous allons utiliser le module request de python pour cela.", "title": "Requ\u00eates sur serveur"}, {"location": "prem/traitement_donnees.html#requetes-en-python", "text": "Exo Ouvrez Edupython ou Thonny et installer le module request au besoin. Copiez le code suivant: import requests reponse = requests . get ( 'https://www.parcoursup.fr/' ) print ( reponse . headers ) La m\u00e9thode headers permet d'afficher les ent\u00eates de la r\u00e9ponse et pas son contenu. Vous obtenez une r\u00e9ponse sous la forme d'un dictionnaire. \u00c9crire un script python simple qui permet de lister l'ensemble des cl\u00e9s. Quelle instruction python permet de faire afficher la valeur de la cl\u00e9 Content-Encoding ? L'instruction reponse.text permet d'afficher le contenu de la r\u00e9ponse. Modifiez le code pr\u00e9c\u00e9dent pour visualiser le contenu de la r\u00e9ponse. De quoi s'agit-il? Les sollicitations sur serveur sont si nombreuses qu'un nouveau format d'\u00e9changes a \u00e9t\u00e9 d\u00e9fini au d\u00e9but des ann\u00e9es 2000 pour uniformiser les pratiques. Il s'agit du format json . \u00c0 retenir JavaScript Object Notation (JSON) est un format de donn\u00e9es textuel d\u00e9riv\u00e9 de la notation des objets du langage JavaScript. Un exemple de fichier json : remarquez que cela ressemble \u00e9trangement aux dictionnaires en Python! mes_courses = { \"fruits\" : [ { \"kiwis\" : 3 , \"mangues\" : 4 , \"pommes\" : 0 }, { \"panier\" : True } ], \"legumes\" : { \"patates\" : \"amandine\" , \"poireaux\" : False }, \"viandes\" : [ \"poisson\" , \"poulet\" , \"boeuf\" ] } Il existe aussi le standard XML qui permet l'\u00e9chande de donn\u00e9es d'un logiciel \u00e0 un autre: les QCM de pronote utilisent ce standard! Exemple de fichiers XML (ici un QCM de Pronote) Exo Copier le dictionnaire mes_courses pr\u00e9c\u00e9dent dans Edupython ou Thonny. Combien de dictionnaire y-a-t'il dans cette variable? Combien de cl\u00e9 poss\u00e8de ce dictionnaire? Ecrire un script python qui affiche toutes les cl\u00e9s. Quelle instruction python permet de faire afficher la valeur \"poulet\" ? On verra plus tard comment manipuler des fichiers json en javascript...", "title": "Requ\u00eates en Python"}, {"location": "prem/traitement_donnees.html#requetes-sur-api", "text": "L'API(Application Programming Interface) est un serveur qui livre des informations cibl\u00e9es sous la forme d'un fichier json en g\u00e9n\u00e9ral. Il existe de nombreuses API, parfois payantes, qui n\u00e9cessitent en plus de poss\u00e9der une API_KEY (un token...) pour pouvoir l'utiliser. Une premi\u00e8re manipulation! Exo Recopiez le code suivant et testez-le: \"\"\"Ce fichier effectue une requete sur un serveur web dont l url est donne ci-dessous les donnees recues sont formatees en json \"\"\" import requests url = \"https://geo.api.gouv.fr/communes?codePostal=47240&fields=nom,lon,lat,population&format=json&geometry=centre\" response = requests . get ( url ) #contenu de la reponse data = response . json () #formatage en json print ( data ) Modifier l'URL afin de faire une requ\u00eate pour obtenir seulement la population de la ville de Bordeaux. Allez ici pour savoir comment faire une requ\u00eate pour obtenir des informations sur l'adresse \"10 rue Victor Hugo\" Une API tr\u00e8s connue et utile: celle de openweathermap qui offre des informations sur la m\u00e9t\u00e9o. Exo Allez \u00e0 cette adresse ici pour vous inscrire \u00e0 l'API. Vous recevrez ensuite un token, une API_KEY sur votre email fourni lors de l'inscription. Effectuez ensuite une requ\u00eate sur l'API en rempla\u00e7ant dans le code suivant l' API_KEY par votre cl\u00e9! import requests url = \"http://api.openweathermap.org/data/2.5/weather?q=agen&appid=API_KEY\" content = requests . get ( url ) data = content . json () print ( data ) Compl\u00e9tez le code avec les deux lignes suivantes afin d'afficher dans la console la temp\u00e9rature actuelle \u00e0 AGEN. t = ..... # \u00c0 compl\u00e9ter pour que t soit la temp\u00e9rature. print ( \"La t\u00e9mp\u00e9rature est de {} degr\u00e9s C\" . format ( t - 273.15 )) On peut donc effectuer des requ\u00eates sur des serveurs distants afin de r\u00e9cup\u00e9rer des donn\u00e9es. Python propose des routines pour obtenir des donn\u00e9es json . Mais que faire de ces valeurs? Comment les mettre en valeurs? Le travail suivant permet la cr\u00e9ation d'une Interface Homme Machine(IHM) . Le but est de construire une interface WEB( on aurait pu le faire en Tkinter...) pour illustrer les informations obtenues par la requ\u00eate. Nous allons d'une part utiliser le langage javascript pour effectuer des requ\u00eates et le code HTML et CSS pour les mettre en valeurs!", "title": "Requ\u00eates sur API"}, {"location": "prem/traitement_donnees.html#requetes-en-javascript", "text": "Nous allons cr\u00e9er une application web qui permet d'afficher des informations m\u00e9t\u00e9orologiques sur une ville choisie. Exo R\u00e9cup\u00e9rer les fichiers necessaires ici . Ouvrez le fichier script.js en \u00e9criture pour modifier la variable API_KEY (remplacer les pointill\u00e9s par votre cl\u00e9 openweather). Pensez \u00e0 enregistrer. Ouvrez le fichier index.html en lecture et saisissez le nom d'une ville. Cette page affiche donc la temp\u00e9rature de la ville saisie au moment o\u00f9 vous sollicitez le service. \u00c0 retenir Le code HTML d\u00e9crit le contenu de la page et le CSS le met en forme. C'est le fichier javascript qui assure la fonctionnalit\u00e9 de contacter le site OpenWeather , de r\u00e9cup\u00e9rer les donn\u00e9es demand\u00e9es et de les afficher sur la page index.html . Nous allons analyser le fichier script.js puis nous allons le modifier pour r\u00e9cup\u00e9rer des informations suppl\u00e9mentaires. Exo Le code commence par une fonction javascript. Donner son nom et ses param\u00e8tres. Quelle m\u00e9thode est utilis\u00e9e pour effectuer la requ\u00eate sur l' url ? Expliquer la ligne var city = form.elements.cityName.value; Que fait l'instruction console.log(data); ? Quelle instruction permet de r\u00e9cup\u00e9rer la temp\u00e9rature de la ville? Expliquer les instructions: var cityName = document . createElement ( \"h2\" ); cityName . textContent = data . name ; document . getElementById ( \"resp\" ). appendChild ( cityName ); Ainsi, la seconde partie du fichier javascript repose sur une fonction qui r\u00e9cup\u00e8re des donn\u00e9es sur un serveur, cr\u00e9e des \u00e9l\u00e9ments HTML et les ajoute \u00e0 la page courante. Nous allons ainsi compl\u00e9ter les informations fournies par le service. Exo Il s'agit d'ajouter la temp\u00e9rature ressentie. La variable data est format\u00e9e en json et l'instruction data.main.temp r\u00e9cup\u00e8re la valeur de la temp\u00e9rature. Quelle instruction permet de r\u00e9cup\u00e9rer la temp\u00e9rature ressentie? En s'inspirant du code pr\u00e9c\u00e9dent, cr\u00e9er un affichage sur la page HTML qui affiche aussi la temp\u00e9rature ressentie. Il s'agit maintenant d'agr\u00e9menter l'interface par la description de la situation m\u00e9t\u00e9orologique ainsi qu'une ic\u00f4ne associ\u00e9e. Exo On souhaite ajouter une ic\u00f4ne pour illustrer le temps qu'il fait. Explorer la variable data dans la console de Firefox. Il y a une entr\u00e9e weather . Quel est son type? Ce tableau d\u00e9crit le temps qu'il fait et donne le code de l'ic\u00f4ne associ\u00e9e. Quel est cette description, ce code? Allez ici pour visualiser tous les ic\u00f4nes possibles. Compl\u00e9ter puis ajouter au fichier js le bout de code suivant: var descriptionCode = document . createElement ( \"h2\" ); descriptionCode . textContent = data . weather [ 0 ]. description ; var iconCode = .............; var iconUrl = \"http://openweathermap.org/img/w/\" + iconCode + \".png\" ; var icon = document . createElement ( \"img\" ); icon . setAttribute ( \"src\" , .........); document . getElementById ( \"resp\" ). appendChild (............); document . getElementById ( \"resp\" ). appendChild ( descriptionCode ); Finaliser le travail en construisant l'interface propos\u00e9e ci-dessous.", "title": "Requ\u00eates en Javascript"}, {"location": "prem/traitement_donnees.html#travailler-sur-des-fichiers-csv", "text": "Dans la partie pr\u00e9c\u00e9dente, les donn\u00e9es \u00e0 exploiter sont obtenues par des requ\u00eates sur des serveurs distants dont la vocation est de fournir ce genre de service. Il existe aussi une pratique courante qui consiste \u00e0 exploiter les donn\u00e9es stock\u00e9es dans des fichiers bruts format\u00e9s (comme le json ). Nous allons donc exploiter maintenant les fichiers csv . Info Comma-separated values , connu sous le sigle CSV, est un format texte ouvert repr\u00e9sentant des donn\u00e9es tabulaires sous forme de valeurs s\u00e9par\u00e9es par des virgules(wikip\u00e9dia). Le format CSV pr\u00e9sente entre autres inconv\u00e9nients, d'\u00eatre interpr\u00e9t\u00e9 par Microsoft Excel comme \u00e9tant au format anglais (s\u00e9parateur de colonnes : virgule ; s\u00e9parateur de d\u00e9cimales : point) ou format de France (s\u00e9parateur de colonnes : point-virgule ; s\u00e9parateur de d\u00e9cimales : virgule) en fonction de l'origine du fichier. Mais on peut facilement les manipuler en Python. Et puis de nombreux sites permettent de r\u00e9cup\u00e9rer des donn\u00e9es de toutes sortes dans ce format. Info Le site data.gouv est une plateforme qui permet de r\u00e9cup\u00e9rer des donn\u00e9es publiques fran\u00e7aises. Les donn\u00e9es propos\u00e9es sont publiques et soumis \u00e0 la licence LICENCE OUVERTE qui permet une grande libert\u00e9 de r\u00e9utilisation de ces donn\u00e9es. Exo R\u00e9cup\u00e9rer \u00e0 cette adresse , le fichier radars.csv , donnant la liste des radars automatiques en France(MAJ 2018). Ouvrez ce fichier avec le bloc note pour visualiser son contenu(attention par d\u00e9faut, il s'ouvre avec Excel...). Nous avons rappelons les routines python qui permettent d'ouvrir, de cr\u00e9er, de lire ou d'\u00e9crire sur un fichier. source = open ( \"radars.csv\" , \"r\" ) #ouverture en lecture du fichier radars.csv entete = source . readline () print ( entete ) destination = open ( \"new_file.csv\" , \"w\" ) # cr\u00e9e un nouveau fichier csv en \u00e9criture La m\u00e9thode readline() appliqu\u00e9e \u00e0 l'objet source permet de lire la premi\u00e8re ligne du fichier: ici cette ligne est stock\u00e9e dans la variable entete . En rappelant cette instruction, vous pourrez alors lire la seconde ligne, et ainsi de suite. Exo Quel est le type de la variable entete ? Nous souhaitons exploiter les donn\u00e9es de ce fichier. Si chaque enregistrement est renvoy\u00e9 comme une cha\u00eene de caract\u00e8res, ce n'est pas l'id\u00e9al. On pr\u00e9ferait une liste ou un dictionnaire pour acc\u00e9der plus facilement aux donn\u00e9es qu'elles contiennent. Une m\u00e9thode importante: la m\u00e9thode split La m\u00e9thode readline() appliqu\u00e9e \u00e0 l'objet source renvoie une cha\u00eene de caract\u00e8res. La m\u00e9thode split appliqu\u00e9e \u00e0 une cha\u00eene de caract\u00e8res prend en param\u00e8tre un caract\u00e8re (la virgule par exemple) et d\u00e9coupe la cha\u00eene de caract\u00e8res en plusieurs \u00e9l\u00e9ments qui seront alors stock\u00e9s dans une liste. Le d\u00e9coupage se fait au caract\u00e8re indiqu\u00e9 en param\u00e8tre dans la fonction. Un exemple pour mieux comprendre: ### Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder entete = \"Pour comprendre, analyser et ensuite, utiliser la m\u00e9thode split\"bksl-nlL1 = entete.split(',')bksl-nlprint(L1)bksl-nlL2 = entete.split('e')bksl-nlprint(L2)bksl-nlL3 = entete.split(' ')bksl-nlprint(L3)bksl-nl A Z On d\u00e9sire maintenant exploiter le fichier radars.csv afin d'extraire : seulement les donn\u00e9es suivantes sur les radars automatiques du lot-et-garonne(47): emplacement, longitude et latitude, type de radars et de les stocker dans le fichier radars47.csv . Exo Compl\u00e9ter puis ex\u00e9cuter le fichier python suivant afin qu'il r\u00e9alise le voeu pr\u00e9c\u00e9dent. # fichier \u00e0 enregistrer au m\u00eame endroit que le fichier radars.csv source = open ( \"radars.csv\" , \"r\" , encoding = \"utf-8\" ) source47 = open ( \"radars47.csv\" , ..... , encoding = \"utf-8\" ) entete = source . readline () source47 . write ( \"emplacement, latitude, longitude, type de radars \\n \" ) enregistrement = .................. while enregistrement != '' : liste = enregistrement . split ( ',' ) if liste [ 2 ] == ....... : source47 . write ( f \" { liste [ ..... ] } , float( { liste [ ..... ]) } , float( { liste [ ..... ] } ), { liste [ ..... ] } \\n \" ) enregistrement = ............... source . close () source47 . close () 2. V\u00e9rifier avec le bloc note que le fichier radars47.csv contient bien les donn\u00e9es demand\u00e9es.", "title": "Travailler sur des fichiers csv"}, {"location": "prem/traitement_donnees.html#importation-des-donnees-sur-une-carte", "text": "Il s'agit maintenant d'exploiter le fichier radars47.csv afin de situer les diff\u00e9rents radars sur une carte. Nous allons pour cela utiliser le module folium de python qui g\u00e9n\u00e9re des cartes de OpenStreetMap . Exo Installer le module folium dans Thonny ou Edupython. La documentation du module est simple et se trouve ici Exo Cr\u00e9er une carte nomm\u00e9e carte_47 centr\u00e9e sur le Lot-et-Garonne. Ajouter un param\u00e8tre de zoom. La carte ainsi cr\u00e9e, on peut ajouter des marqueurs ( Marker ) comme indiqu\u00e9 dans la documentation en pr\u00e9cisant la longitude et la latitude du lieu que vous souhaitez mettre en avant. Exo Ajouter un marqueur rouge avec une ic\u00f4ne information sur le lyc\u00e9e Jean Baptiste de Baudre. Quand la souris passe sur ce marqueur est affich\u00e9e le nom de la ville et quand on clique dessus, c'est le nom du lyc\u00e9e qui est affich\u00e9. Ajouter un marqueur vert avec une ic\u00f4ne information sur e point de coordonn\u00e9es lat = 44.2969 et lon = 0.0397 . Vous remplirez le popup et le tooltip en fonction de ce que vous y trouverez! Vous devriez alors obtenir \u00e0 peu pr\u00e8s ceci... Retour \u00e0 nos radars du 47! L'objectif est de cr\u00e9er une carte du Lot-et-Garonne contenant les marques de tous les radars. L'algorithme de construction ressemble alors \u00e0 cela: Cr\u00e9er carte du Lot et Garonne Pour chaque \u00e9l\u00e9ment radar du fichier radar47 . csv Cr\u00e9er le marqueur au coordonn\u00e9es du radar , popup = type de radar , tooltip = Nom du lieu Sauvegarder la carte Afficher la carte Exo \u00c9crire le programme qui impl\u00e9mente l'algorithme suivant. Vous devriez obtenir la carte ci-dessous( celle-ci n'est pas interactive, la v\u00f4tre si!):", "title": "Importation des donn\u00e9es sur une carte"}, {"location": "prem/widget.html", "text": "CREATION DE WIDGET PAR LA BIBLIOTHEQUE TKINTER \u00b6 Il s'agit dans ce travail d'utiliser les constructeurs et les m\u00e9thodes de la biblioth\u00e8ques Tkinter afin de r\u00e9aliser des interfaces graphiques (bouton, champ de saisie, \u00e9chelle, label, fen\u00eatre,...) et tout cela dans le langage python . L'apprentissage se r\u00e9sume \u00e0 l'\u00e9laboration de la fen\u00eatre ci-dessous qui donne la couleur obtenue dans le m\u00e9lange des trois composantes RGB (Red Green Blue): \u00c9tape1: Construction de la fen\u00eatre m\u00e8re L'id\u00e9e principale est de construire un conteneur principal, l'\u00e9l\u00e9ment m\u00e8re qui va contenir d'autres \u00e9l\u00e9ments filles . Le code Python est donn\u00e9 ci-apr\u00e8s. from tkinter import * ################################################### fen = Tk () fen . title ( \"Visualisation des couleurs\" ) fen . resizable ( False , False ) fen . iconbitmap ( 'logoNSIsite.ico' ) ################################################### ######################CONSTRUCTEURS ################ ################################################### fen . mainloop () Le constructeur principal est l'\u00e9l\u00e9ment fen : on lui applique des m\u00e9thodes explicites qui changent son titre, la possibilit\u00e9 de redimensionner et l'ic\u00f4ne de la fen\u00eatre principale.Il y a d'autres possibilit\u00e9s que je vous laisse d\u00e9couvrir en toute autonomie... Personnaliser sa fen\u00eatre Recopier le code pr\u00e9c\u00e9dent que vous enregistrez sous le nom interface_couleur.py dans un dossier TP_interface_graphique Personnalisez votre fen\u00eatre en changeant le titre et en trouvant un logo qui vous correspond. Attention ce logo doit \u00eatre un fichier .ico et doit \u00eatre situ\u00e9 \u00e0 la racine de votre projet(ou alors dans un dossier d\u00e9di\u00e9...)! Il existe de nombreuses fa\u00e7ons de convertir une image au format png vers le format ico . \u00c9tape2: ajouter les \u00e9l\u00e9ments filles La fen\u00eatre que nous devons r\u00e9aliser contient plusieurs widgets (composants graphiques): un bouton pour valider, trois champs de saisies pour le choix des couleurs, et une zone de dessin, appel\u00e9e canvas dont la couleur d'arri\u00e8re plan (le bg ) correspond aux choix faits dans les zones de saisies et une zone de texte, le label contenant le titre g\u00e9n\u00e9ral de la fen\u00eatre. On appelle les constructeurs correspondant pour la conception de ces widgets en les stockant dans des variables aux noms explicites. Les constructeurs sont par exemple Label,Button ou Entry ... Ajouter les widgets Ajouter le code python suivant au programme pr\u00e9c\u00e9dent \u00e0 l'endroit indiqu\u00e9. Changer la couleur d'arri\u00e8re plan du canvas On peut aussi exprimer la couleur en hexad\u00e9cimal. Essayez l'instruction bg= '#FF00FF' puis une autre de votre choix. ######################CONSTRUCTEURS ########################### text1 = Label ( fen , text = \" Choix des couleurs\" , font = \"arial 30\" ) text1 . grid ( row = 0 , column = 0 , columnspan = 5 ) btn1 = Button ( fen , text = \"visualiser\" , width = 10 , command = fen . destroy ) btn1 . grid ( row = 1 , column = 0 , columnspan = 5 ) rou = Entry ( fen ) rou . grid ( row = 4 , column = 2 ) ver = Entry ( fen ) ver . grid ( row = 4 , column = 3 ) bleu = Entry ( fen ) bleu . grid ( row = 4 , column = 4 ) zone_couleur = Canvas ( fen , bg = 'white' ) zone_couleur . grid ( row = 5 , column = 0 , columnspan = 5 ) ################################################################ Vous remarquerez qu'\u00e0 chaque fois qu'un \u00e9l\u00e9ment est cr\u00e9\u00e9 il est positionn\u00e9 par la m\u00e9thode grid dans une grille virtuelle contenant des lignes et des colonnes. Par exemple, le Label nomm\u00e9 text1 est positionn\u00e9 dans la premi\u00e8re ligne ( row = 0 ), dans la premi\u00e8re colonne ( column = 0 ) et s' \u00e9tend sur 5 colonnes( columnspan = 5 ). Il existe plusieurs gestionnaires de positionnement mais nous utiliserons en g\u00e9n\u00e9ral la m\u00e9thode grid . Attention! Si vous oubliez de positionner un widget, il ne sera pas pris en compte. Tous les widgets cr\u00e9\u00e9s ont des attributs : par exemple l'\u00e9l\u00e9ment btn1 est situ\u00e9 dans le conteneur parent fen , poss\u00e8de un attribut text de type cha\u00eene de caract\u00e8res, correspondant au texte affich\u00e9 sur le bouton. L'attribut command d\u00e9signe l'action \u00e0 r\u00e9aliser lorsque on appuie sur le bouton. Ici, l'appui sur le bouton d\u00e9truit l'\u00e9l\u00e9ment parent fen et donc aussi, tous ses fils et filles... donc tous les autres widgets. On changera cette fonction plus tard dans ce travail pour que l'action du bouton colore la partie canvas . \u00c9tape3: les variables globales Une variable globale est une variable qui peut \u00eatre appel\u00e9e partout dans le programme. Nous souhaiterions ici cr\u00e9er trois variables qui seront associer \u00e0 la valeur saisie dans les champs pr\u00e9vus \u00e0 cet effet. Dans tkinter , les variables globales sont les variables de contr\u00f4le (voir ici ): elles sont associ\u00e9es \u00e0 la valeur ou au texte saisie dans les widgets qui le permettent! Ajouter des variables de contr\u00f4les Ajouter le code python suivant juste apr\u00e8s l'instruction fen.iconbitmap . r = StringVar ( value = '12' ) Modifier le constructeur Entry nomm\u00e9 rou en lui ajoutant l'attribut textvariable = r comme ceci: rou = Entry ( fen , textvariable = r ) Quelques explications! La variable r est une variable globale de stype string , initialis\u00e9e \u00e0 12, associ\u00e9e \u00e0 la valeur saisie dans l'entr\u00e9e rou . Si vous proposez une valeur dans cette entr\u00e9e elle sera alors affect\u00e9e \u00e0 la valeur de r . Cette association est possible gr\u00e2ce \u00e0 l'attribut textvariable du constructeur rou auquel on a associ\u00e9 la variable r . Compl\u00e9ter les variables de contr\u00f4les Cr\u00e9er les variables de contr\u00f4les v et b , de type cha\u00eene de caract\u00e8re, initialis\u00e9e respectivement \u00e0 200 et 100. Ajouter les attributs textvariable aux entr\u00e9es ver et bleu en leur affectant les variables pr\u00e9c\u00e9demment d\u00e9finies. \u00c9tape4: Colorer le canvas La prochaine \u00e9tape consiste \u00e0 colorer le background du canvas zone_couleur avec la couleur d\u00e9finie \u00e0 l'aide des valeurs des variables r,v et b . C'est l'appui sur le bouton qui d\u00e9clenchera l'action de coloriage. Les couleurs accept\u00e9es L'attribut bg d'un canvas n'accepte des couleurs que sous deux formes: sous forme de nom comme 'white' , 'red', 'blue', ... sous forme hexad\u00e9cimale #FF00AA par exemple Mais probl\u00e8me! Les couleurs saisies sont d\u00e9cimales. Il faut donc construire un outil qui prend en entr\u00e9e un triplet comme (12,200,100) et le transforme en '#0CC864' . Nous allons pour cela cr\u00e9er la fonction rgb_10to16 qui prend en param\u00e8tre un tuple de trois couleurs et retourne une cha\u00eene de caract\u00e8res format\u00e9e et r\u00e9pondant \u00e0 notre besoin. Ajouter une fonction Ajouter le code python suivant apr\u00e8s la variable b: ############# ACTIONS ############################ def rgb_10to16 ( t ): return \"# %.2x \" % t [ 0 ] + \" %.2x \" % t [ 1 ] + \" %.2x \" % t [ 2 ] Rappelez le nom de l'op\u00e9ration + pour les cha\u00eenes de caract\u00e8res. Expliquer le r\u00f4le de l'instruction .2x Justifier que cette fonction retourne une cha\u00eene de caract\u00e8res. Testez votre fonction en console sur des entr\u00e9es simples comme (255, 0, 0) \u00c0 ce stade, il reste l'\u00e9tape qui consiste \u00e0 colorer le canvas \u00e0 l'appui sur le bouton visualiser ... \u00c9tape5: Cr\u00e9ation de la fonction de coloriage Nous allons cr\u00e9er la fonction colorer qui: r\u00e9cup\u00e8re la valeur d\u00e9cimale des trois entr\u00e9es convertit le triplet en cha\u00eene hexad\u00e9cimale change la couleur du background du canvas en cons\u00e9quence. Compl\u00e9ter le code Ajouter la fonction suivante apr\u00e8s la pr\u00e9c\u00e9dente: def colorer (): rouge = int ( r . get ()) vert = int ( v . get ()) bleu = int ( b . get ()) zone_couleur [ 'bg' ] = rgb_10to16 (( rouge , vert , bleu )) Changer la valeur de l'attribut command du bouton btn1 en lui donnant la valeur colorer (sans parenth\u00e8ses...) Ex\u00e9cuter le code, tout devrait bien fonctionner! Pour r\u00e9cup\u00e9rer la valeur d'une variable globale ( r par exemple), on lui applique la m\u00e9thode .get() . Ainsi l'instruction r.get() contient la valeur de r mais prudence : cette instruction retourne une cha\u00eene de caract\u00e8res. On comprend mieux alors l'instruction int dans int(r.get()) qui transforme la cha\u00eene de caract\u00e8res en entier... Enfin, l'instruction zone_couleur['bg'] = rgb_10to16((rouge, vert, bleu)) red\u00e9finit clairement l'attribut 'bg' de zone_couleur ! Pour information Nous n'avons pas justifier l'instruction fen.mainloop() : elle rend l'objet fen sensible aux \u00e9v\u00e9nements ext\u00e9rieurs comme l'appui d'un clic de souris ou du clavier. Elle \u00e9coute en continue ce qui se passe autour de ses constructeurs. Dommage que cette fonction n'existe pas chez nos \u00e9l\u00e8ves \ud83d\ude0a! Utiliser une \u00e9chelle Au lieu de saisir les valeurs, on souhaite utiliser des \u00e9chelles qui permettent \u00e0 l'aide de curseur de choisir la valeur de la composante de rouge, de vert ou de bleu(voir ci-dessous...). Documentez-vous par exemple ici et remplacez les entr\u00e9es par trois \u00e9chelles.", "title": "Cr\u00e9ation de widgets"}, {"location": "prem/widget.html#creation-de-widget-par-la-bibliotheque-tkinter", "text": "Il s'agit dans ce travail d'utiliser les constructeurs et les m\u00e9thodes de la biblioth\u00e8ques Tkinter afin de r\u00e9aliser des interfaces graphiques (bouton, champ de saisie, \u00e9chelle, label, fen\u00eatre,...) et tout cela dans le langage python . L'apprentissage se r\u00e9sume \u00e0 l'\u00e9laboration de la fen\u00eatre ci-dessous qui donne la couleur obtenue dans le m\u00e9lange des trois composantes RGB (Red Green Blue): \u00c9tape1: Construction de la fen\u00eatre m\u00e8re L'id\u00e9e principale est de construire un conteneur principal, l'\u00e9l\u00e9ment m\u00e8re qui va contenir d'autres \u00e9l\u00e9ments filles . Le code Python est donn\u00e9 ci-apr\u00e8s. from tkinter import * ################################################### fen = Tk () fen . title ( \"Visualisation des couleurs\" ) fen . resizable ( False , False ) fen . iconbitmap ( 'logoNSIsite.ico' ) ################################################### ######################CONSTRUCTEURS ################ ################################################### fen . mainloop () Le constructeur principal est l'\u00e9l\u00e9ment fen : on lui applique des m\u00e9thodes explicites qui changent son titre, la possibilit\u00e9 de redimensionner et l'ic\u00f4ne de la fen\u00eatre principale.Il y a d'autres possibilit\u00e9s que je vous laisse d\u00e9couvrir en toute autonomie... Personnaliser sa fen\u00eatre Recopier le code pr\u00e9c\u00e9dent que vous enregistrez sous le nom interface_couleur.py dans un dossier TP_interface_graphique Personnalisez votre fen\u00eatre en changeant le titre et en trouvant un logo qui vous correspond. Attention ce logo doit \u00eatre un fichier .ico et doit \u00eatre situ\u00e9 \u00e0 la racine de votre projet(ou alors dans un dossier d\u00e9di\u00e9...)! Il existe de nombreuses fa\u00e7ons de convertir une image au format png vers le format ico . \u00c9tape2: ajouter les \u00e9l\u00e9ments filles La fen\u00eatre que nous devons r\u00e9aliser contient plusieurs widgets (composants graphiques): un bouton pour valider, trois champs de saisies pour le choix des couleurs, et une zone de dessin, appel\u00e9e canvas dont la couleur d'arri\u00e8re plan (le bg ) correspond aux choix faits dans les zones de saisies et une zone de texte, le label contenant le titre g\u00e9n\u00e9ral de la fen\u00eatre. On appelle les constructeurs correspondant pour la conception de ces widgets en les stockant dans des variables aux noms explicites. Les constructeurs sont par exemple Label,Button ou Entry ... Ajouter les widgets Ajouter le code python suivant au programme pr\u00e9c\u00e9dent \u00e0 l'endroit indiqu\u00e9. Changer la couleur d'arri\u00e8re plan du canvas On peut aussi exprimer la couleur en hexad\u00e9cimal. Essayez l'instruction bg= '#FF00FF' puis une autre de votre choix. ######################CONSTRUCTEURS ########################### text1 = Label ( fen , text = \" Choix des couleurs\" , font = \"arial 30\" ) text1 . grid ( row = 0 , column = 0 , columnspan = 5 ) btn1 = Button ( fen , text = \"visualiser\" , width = 10 , command = fen . destroy ) btn1 . grid ( row = 1 , column = 0 , columnspan = 5 ) rou = Entry ( fen ) rou . grid ( row = 4 , column = 2 ) ver = Entry ( fen ) ver . grid ( row = 4 , column = 3 ) bleu = Entry ( fen ) bleu . grid ( row = 4 , column = 4 ) zone_couleur = Canvas ( fen , bg = 'white' ) zone_couleur . grid ( row = 5 , column = 0 , columnspan = 5 ) ################################################################ Vous remarquerez qu'\u00e0 chaque fois qu'un \u00e9l\u00e9ment est cr\u00e9\u00e9 il est positionn\u00e9 par la m\u00e9thode grid dans une grille virtuelle contenant des lignes et des colonnes. Par exemple, le Label nomm\u00e9 text1 est positionn\u00e9 dans la premi\u00e8re ligne ( row = 0 ), dans la premi\u00e8re colonne ( column = 0 ) et s' \u00e9tend sur 5 colonnes( columnspan = 5 ). Il existe plusieurs gestionnaires de positionnement mais nous utiliserons en g\u00e9n\u00e9ral la m\u00e9thode grid . Attention! Si vous oubliez de positionner un widget, il ne sera pas pris en compte. Tous les widgets cr\u00e9\u00e9s ont des attributs : par exemple l'\u00e9l\u00e9ment btn1 est situ\u00e9 dans le conteneur parent fen , poss\u00e8de un attribut text de type cha\u00eene de caract\u00e8res, correspondant au texte affich\u00e9 sur le bouton. L'attribut command d\u00e9signe l'action \u00e0 r\u00e9aliser lorsque on appuie sur le bouton. Ici, l'appui sur le bouton d\u00e9truit l'\u00e9l\u00e9ment parent fen et donc aussi, tous ses fils et filles... donc tous les autres widgets. On changera cette fonction plus tard dans ce travail pour que l'action du bouton colore la partie canvas . \u00c9tape3: les variables globales Une variable globale est une variable qui peut \u00eatre appel\u00e9e partout dans le programme. Nous souhaiterions ici cr\u00e9er trois variables qui seront associer \u00e0 la valeur saisie dans les champs pr\u00e9vus \u00e0 cet effet. Dans tkinter , les variables globales sont les variables de contr\u00f4le (voir ici ): elles sont associ\u00e9es \u00e0 la valeur ou au texte saisie dans les widgets qui le permettent! Ajouter des variables de contr\u00f4les Ajouter le code python suivant juste apr\u00e8s l'instruction fen.iconbitmap . r = StringVar ( value = '12' ) Modifier le constructeur Entry nomm\u00e9 rou en lui ajoutant l'attribut textvariable = r comme ceci: rou = Entry ( fen , textvariable = r ) Quelques explications! La variable r est une variable globale de stype string , initialis\u00e9e \u00e0 12, associ\u00e9e \u00e0 la valeur saisie dans l'entr\u00e9e rou . Si vous proposez une valeur dans cette entr\u00e9e elle sera alors affect\u00e9e \u00e0 la valeur de r . Cette association est possible gr\u00e2ce \u00e0 l'attribut textvariable du constructeur rou auquel on a associ\u00e9 la variable r . Compl\u00e9ter les variables de contr\u00f4les Cr\u00e9er les variables de contr\u00f4les v et b , de type cha\u00eene de caract\u00e8re, initialis\u00e9e respectivement \u00e0 200 et 100. Ajouter les attributs textvariable aux entr\u00e9es ver et bleu en leur affectant les variables pr\u00e9c\u00e9demment d\u00e9finies. \u00c9tape4: Colorer le canvas La prochaine \u00e9tape consiste \u00e0 colorer le background du canvas zone_couleur avec la couleur d\u00e9finie \u00e0 l'aide des valeurs des variables r,v et b . C'est l'appui sur le bouton qui d\u00e9clenchera l'action de coloriage. Les couleurs accept\u00e9es L'attribut bg d'un canvas n'accepte des couleurs que sous deux formes: sous forme de nom comme 'white' , 'red', 'blue', ... sous forme hexad\u00e9cimale #FF00AA par exemple Mais probl\u00e8me! Les couleurs saisies sont d\u00e9cimales. Il faut donc construire un outil qui prend en entr\u00e9e un triplet comme (12,200,100) et le transforme en '#0CC864' . Nous allons pour cela cr\u00e9er la fonction rgb_10to16 qui prend en param\u00e8tre un tuple de trois couleurs et retourne une cha\u00eene de caract\u00e8res format\u00e9e et r\u00e9pondant \u00e0 notre besoin. Ajouter une fonction Ajouter le code python suivant apr\u00e8s la variable b: ############# ACTIONS ############################ def rgb_10to16 ( t ): return \"# %.2x \" % t [ 0 ] + \" %.2x \" % t [ 1 ] + \" %.2x \" % t [ 2 ] Rappelez le nom de l'op\u00e9ration + pour les cha\u00eenes de caract\u00e8res. Expliquer le r\u00f4le de l'instruction .2x Justifier que cette fonction retourne une cha\u00eene de caract\u00e8res. Testez votre fonction en console sur des entr\u00e9es simples comme (255, 0, 0) \u00c0 ce stade, il reste l'\u00e9tape qui consiste \u00e0 colorer le canvas \u00e0 l'appui sur le bouton visualiser ... \u00c9tape5: Cr\u00e9ation de la fonction de coloriage Nous allons cr\u00e9er la fonction colorer qui: r\u00e9cup\u00e8re la valeur d\u00e9cimale des trois entr\u00e9es convertit le triplet en cha\u00eene hexad\u00e9cimale change la couleur du background du canvas en cons\u00e9quence. Compl\u00e9ter le code Ajouter la fonction suivante apr\u00e8s la pr\u00e9c\u00e9dente: def colorer (): rouge = int ( r . get ()) vert = int ( v . get ()) bleu = int ( b . get ()) zone_couleur [ 'bg' ] = rgb_10to16 (( rouge , vert , bleu )) Changer la valeur de l'attribut command du bouton btn1 en lui donnant la valeur colorer (sans parenth\u00e8ses...) Ex\u00e9cuter le code, tout devrait bien fonctionner! Pour r\u00e9cup\u00e9rer la valeur d'une variable globale ( r par exemple), on lui applique la m\u00e9thode .get() . Ainsi l'instruction r.get() contient la valeur de r mais prudence : cette instruction retourne une cha\u00eene de caract\u00e8res. On comprend mieux alors l'instruction int dans int(r.get()) qui transforme la cha\u00eene de caract\u00e8res en entier... Enfin, l'instruction zone_couleur['bg'] = rgb_10to16((rouge, vert, bleu)) red\u00e9finit clairement l'attribut 'bg' de zone_couleur ! Pour information Nous n'avons pas justifier l'instruction fen.mainloop() : elle rend l'objet fen sensible aux \u00e9v\u00e9nements ext\u00e9rieurs comme l'appui d'un clic de souris ou du clavier. Elle \u00e9coute en continue ce qui se passe autour de ses constructeurs. Dommage que cette fonction n'existe pas chez nos \u00e9l\u00e8ves \ud83d\ude0a! Utiliser une \u00e9chelle Au lieu de saisir les valeurs, on souhaite utiliser des \u00e9chelles qui permettent \u00e0 l'aide de curseur de choisir la valeur de la composante de rouge, de vert ou de bleu(voir ci-dessous...). Documentez-vous par exemple ici et remplacez les entr\u00e9es par trois \u00e9chelles.", "title": "CREATION DE WIDGET PAR LA BIBLIOTHEQUE TKINTER"}, {"location": "term/complex_struc.html", "text": "Complexit\u00e9 des structures de donn\u00e9es lin\u00e9aires \u00b6 D\u00e9finissons nos objets! \u00b6 En informatique, les listes et les tableaux sont des structures de donn\u00e9es abstraites permettant de stocker de fa\u00e7on ordonn\u00e9e des \u00e9l\u00e9ments. Ce que dit Wikip\u00e9dia sur les listes... En informatique, une liste est une structure de donn\u00e9es permettant de regrouper des donn\u00e9es de mani\u00e8re \u00e0 pouvoir y acc\u00e9der librement (contrairement aux files et aux piles, dont l'acc\u00e8s se fait respectivement en mode FIFO et LIFO). Le c\u00e9l\u00e8bre site donne aussi les premi\u00e8res primitives qui op\u00e9rent sur cette structure: Insertion, Suppression, Pr\u00e9dicat(la liste est-elle vide?), D\u00e9nombrement,... Ce que dit Wikip\u00e9dia sur les tableaux... En informatique, un tableau est une structure de donn\u00e9es repr\u00e9sentant une s\u00e9quence finie d'\u00e9l\u00e9ments auxquels on peut acc\u00e9der efficacement par leur position, ou indice, dans la s\u00e9quence. C'est un type de conteneur que l'on retrouve dans un grand nombre de langages de programmation. Le langage Python cr\u00e9e une ambiguit\u00e9 dans les d\u00e9finitions de ces deux types. En effet, parmi les listes, on peut distinguer de mani\u00e8re g\u00e9n\u00e9rale de deux types: les tableaux les listes cha\u00een\u00e9es Dans cette le\u00e7on, nous nous int\u00e9resserons \u00e0 : la mani\u00e8re dont ces structures sont stock\u00e9es en m\u00e9moire la complexit\u00e9 des op\u00e9rations de bases(insertion, suppression, parcours,...) sur ces structures Nous finirons par d\u00e9finir la notion d\u00e9j\u00e0 connue de dictionnaire avec de nouvelles consid\u00e9rations... Impl\u00e9mentation des tableaux en m\u00e9moire \u00b6 Consid\u00e9rons le tableau de quatre \u00e9l\u00e9ments : 200, 3, 175, 8900 que nous souhaitons stocker en m\u00e9moire. Contrairement au langage Python o\u00f9 la manipulation est ais\u00e9e, la d\u00e9claration des tableaux dans le langage C est plus rigoureuse: int tab [ 4 ] //declaration du tableau tab de 4 elements du m\u00eame type int Chaque entier est cod\u00e9 sur 16 bits(ou 32), soit 2 octets: il faut donc r\u00e9server en m\u00e9moire 4 cases de 2 octets pour stocker ce tableau. En supposant que la m\u00e9moire d'un ordinateur est un long, tr\u00e8s long, ruban de cases alors l' allocation en m\u00e9moire du tableau peut s'illustrer ainsi: Les cases vides mod\u00e9lisent des emplacements m\u00e9moires vides ou contenant d'autres donn\u00e9es... L'adresse du tableau est #A (valeur hexad\u00e9cimale sur deux octets) et c'est aussi celle de tab[0] . Celle de tab[i] est alors #A+i*2 ... Donc comme le pr\u00e9cise le site openclassrooms : Impl\u00e9mentation en m\u00e9moire des tableaux statiques Lorsqu'un tableau est cr\u00e9\u00e9, il prend un espace contigu en m\u00e9moire : les cases sont les unes \u00e0 la suite des autres. Toutes les cases d'un tableau sont du m\u00eame type. Ainsi, un tableau de int contiendra uniquement des int , et pas autre chose. Naturellement, il est donc interdit de cr\u00e9er un tableau dont la taille d\u00e9pend de la valeur d'une variable: c'est ce que nous appelons une allocation dynamique , et c'est un peu ce que fait Python dans la gestion transparente de ses listes! Avantages et inconv\u00e9nients de cette structure \u00b6 L'acc\u00e8s \u00e0 un \u00e9l\u00e9ment du tableau se fait en temps constant : en d'autres termes, si n est la taille du tableau, l'acc\u00e8s ne d\u00e9pend pas de n . Pour l'insertion d'un nouveau \u00e9l\u00e9ment dans le tableau, il faut allouer un nouvel espace m\u00e9moire qui passe par la recopie de tous les \u00e9l\u00e9ments du tableau auquel on ajoute le nouveau. Cette op\u00e9ration d\u00e9pend de la taille n du tableau et son temps d'ex\u00e9cution lui est proportionnel ! Complexit\u00e9 des op\u00e9rations sur un tableau statique L'acc\u00e8s \u00e0 un \u00e9l\u00e9ment d'un tableau statique est en O(1) et l'ajout est en O(n) . Et d'apr\u00e8s vous? Quelle est la complexit\u00e9 de la suppression d'un \u00e9l\u00e9ment? Impl\u00e9mentation des listes cha\u00een\u00e9es \u00b6 L'\u00e9l\u00e9ment de base pour la cr\u00e9ation d'une liste cha\u00een\u00e9e est le maillon constitu\u00e9 de: sa valeur en premier un pointeur en second, qui d\u00e9signe l'adresse m\u00e9moire du suivant dans la structure (adresse \u00e9ventuellement nulle pour d\u00e9signer le dernier!) La liste est ainsi cha\u00een\u00e9e par une succession de maillon chacun pointant vers le suivant, le dernier ayant un pointeur nul ( NULL ). Les valeurs de la liste ne sont plus stock\u00e9es \u00e0 des endroits contigus de la m\u00e9moire. Complexit\u00e9s des op\u00e9rations \u00b6 Pour acc\u00e9der \u00e0 un \u00e9l\u00e9ment quelconque de la liste, il n'y a pas de choix: il faut parcourir la liste \u00e0 partir du premier. Ce parcours d\u00e9pend \u00e9videmment de la taille n de la structure. La complexit\u00e9 de l'op\u00e9ration est proportionnelle \u00e0 n . En revanche, l'insertion d'un \u00e9l\u00e9ment est \u00e0 op\u00e9ration constante. Le dessin ci-dessous montre les \u00e9tapes d'insertion dans une liste cha\u00een\u00e9e: L'algorithme lorsque qu'on souhaite ins\u00e9rer -13 en deuxi\u00e8me position est: On d\u00e9truit le pointeur de la premi\u00e8re. On d\u00e9finit ce pointeur vers la valeur du maillon portant la valeur -13 . On d\u00e9finit le pointeur du maillon ins\u00e9r\u00e9 vers la valeur du suivant dans la cha\u00eene. Ces trois op\u00e9rations sont ind\u00e9pendantes de la taille de la liste cha\u00een\u00e9e: l'insertion se fait en temps constant . En r\u00e9sum\u00e9: Op\u00e9rations Tableau statique Listes cha\u00een\u00e9es Acc\u00e9s \u00e0 un \u00e9l\u00e9ment O(1) O(n) Insertion ou suppression O(n) O(1) {: .tabnsi :} On pourrait \u00e9voquer la complexit\u00e9 d'autres op\u00e9rations \u00e9l\u00e9mentaires comme l'ajout ou la suppression au d\u00e9but, \u00e0 la fin,... ce que nous ferons en exercices. Nous pourrions aussi \u00e9voquer la notion de listes doublement cha\u00een\u00e9es constitu\u00e9es de maillon qui pointe vers les maillons suivants et pr\u00e9c\u00e9dents. En revanche, si elles am\u00e9liorent la complexit\u00e9 de certaines op\u00e9rations, elles contiennent plus d'informations, donc plus de m\u00e9moire! Enfin, m\u00eame si le programme de NSI ne les \u00e9voque pas, les tableaux dynamiques sont des structures hybrides qui permettent de conserver la complexit\u00e9 en temps constant des tableaux statiques et de permettre l'insertion aussi en temps constant. Nous n'en dirons pas plus sur le sujet... Les dictionnaires \u00b6 Une d\u00e9finition Un dictionnaire est un ensemble de cl\u00e9s/valeurs( C/V ) dont les composantes sont appel\u00e9es via un descripteur (la cl\u00e9!) et non pas un indice. Depuis la classe de premi\u00e8re, nous connaissons les op\u00e9rations de bases permises sur un dictionnaire et leur syntaxe en python : Op\u00e9rations Code python Cr\u00e9er un dictionnaire vide d = {} Ajouter une association c,v d[\"Maths\"] = 18 Lire la valeur v d'une cl\u00e9 c d[\"Maths\"] {: .tabnsi :} Mais par exemple, il n'existe pas de primitive simple qui retourne la cl\u00e9 d'une valeur! L'impl\u00e9mentation du type dictionnaire doit permettre de r\u00e9aliser ces trois op\u00e9rations de base en temps d'ex\u00e9cution efficace. On cherche id\u00e9alement une complexit\u00e9 en O(1) pour la recherche, l'insertion ou la suppression. Comment faire? Le hachage Python a choisi les tables de hachages pour cette impl\u00e9mentation. Pour comprendre, il faut d'abord d\u00e9finir une fonction de hachage : Ce que dit Wikip\u00e9dia ... On nomme fonction de hachage, de l'anglais hash function (hash : pagaille, d\u00e9sordre, recouper et m\u00e9langer) par analogie avec la cuisine, une fonction particuli\u00e8re qui, \u00e0 partir d'une donn\u00e9e fournie en entr\u00e9e, calcule une empreinte num\u00e9rique servant \u00e0 identifier rapidement la donn\u00e9e initiale, au m\u00eame titre qu'une signature pour identifier une personne. Je reprends aussi les termes pertinents de l'encyclop\u00e9die : R\u00f4le d'une fonction de hachage On peut voir une fonction de hachage comme un moyen de replier l'espace de donn\u00e9es que l'on suppose potentiellement tr\u00e8s grand et tr\u00e8s peu rempli pour le faire entrer dans la m\u00e9moire de l'ordinateur. Le principe est d'utiliser les empreintes des cl\u00e9s comme indices des \u00e9l\u00e9ments de la table. Ces empreintes sont des nombres entiers obtenus en hachant la cl\u00e9 des objets \u00e0 stocker, souvent une cha\u00eene de caract\u00e8res. On peut ensuite retrouver l'objet associ\u00e9 \u00e0 une cl\u00e9 donn\u00e9e : il suffit de hacher la cl\u00e9 pour obtenir une empreinte et de lire dans le tableau l'\u00e9l\u00e9ment dont l'indice est cette empreinte.Au final, la complexit\u00e9 d\u2019une insertion et d\u2019une lecture dans une table de hachage sera \u00ab en moyenne \u00bb en O(1) . Les algorithme de hachage et les mots de passe Les mots de passe ne sont pas stock\u00e9s en clair: c'est leur empreinte obtenu par un algorithme de hachage ( SHA-256 par exemple) qui est utilis\u00e9. Cet algorithme produit un condensat de 256 bits. Mais, il faut \u00eatre certain que la fonction de hachage choisit remplit bien son r\u00f4le: \u00e0 chaque entr\u00e9e, elle doit associer une empreinte num\u00e9rique unique . On parle de collision si deux entr\u00e9es diff\u00e9rentes ont une empreinte num\u00e9rique \u00e9gale (en maths, on dirait que la fonction n'est pas injective...). La fonction de hachage du SHA-256 a remplac\u00e9 celle du MD5 qui cr\u00e9ait beaucoup de collision.", "title": "Complexit\u00e9 des structures"}, {"location": "term/complex_struc.html#complexite-des-structures-de-donnees-lineaires", "text": "", "title": "Complexit\u00e9 des structures de donn\u00e9es lin\u00e9aires"}, {"location": "term/complex_struc.html#definissons-nos-objets", "text": "En informatique, les listes et les tableaux sont des structures de donn\u00e9es abstraites permettant de stocker de fa\u00e7on ordonn\u00e9e des \u00e9l\u00e9ments. Ce que dit Wikip\u00e9dia sur les listes... En informatique, une liste est une structure de donn\u00e9es permettant de regrouper des donn\u00e9es de mani\u00e8re \u00e0 pouvoir y acc\u00e9der librement (contrairement aux files et aux piles, dont l'acc\u00e8s se fait respectivement en mode FIFO et LIFO). Le c\u00e9l\u00e8bre site donne aussi les premi\u00e8res primitives qui op\u00e9rent sur cette structure: Insertion, Suppression, Pr\u00e9dicat(la liste est-elle vide?), D\u00e9nombrement,... Ce que dit Wikip\u00e9dia sur les tableaux... En informatique, un tableau est une structure de donn\u00e9es repr\u00e9sentant une s\u00e9quence finie d'\u00e9l\u00e9ments auxquels on peut acc\u00e9der efficacement par leur position, ou indice, dans la s\u00e9quence. C'est un type de conteneur que l'on retrouve dans un grand nombre de langages de programmation. Le langage Python cr\u00e9e une ambiguit\u00e9 dans les d\u00e9finitions de ces deux types. En effet, parmi les listes, on peut distinguer de mani\u00e8re g\u00e9n\u00e9rale de deux types: les tableaux les listes cha\u00een\u00e9es Dans cette le\u00e7on, nous nous int\u00e9resserons \u00e0 : la mani\u00e8re dont ces structures sont stock\u00e9es en m\u00e9moire la complexit\u00e9 des op\u00e9rations de bases(insertion, suppression, parcours,...) sur ces structures Nous finirons par d\u00e9finir la notion d\u00e9j\u00e0 connue de dictionnaire avec de nouvelles consid\u00e9rations...", "title": "D\u00e9finissons nos objets!"}, {"location": "term/complex_struc.html#implementation-des-tableaux-en-memoire", "text": "Consid\u00e9rons le tableau de quatre \u00e9l\u00e9ments : 200, 3, 175, 8900 que nous souhaitons stocker en m\u00e9moire. Contrairement au langage Python o\u00f9 la manipulation est ais\u00e9e, la d\u00e9claration des tableaux dans le langage C est plus rigoureuse: int tab [ 4 ] //declaration du tableau tab de 4 elements du m\u00eame type int Chaque entier est cod\u00e9 sur 16 bits(ou 32), soit 2 octets: il faut donc r\u00e9server en m\u00e9moire 4 cases de 2 octets pour stocker ce tableau. En supposant que la m\u00e9moire d'un ordinateur est un long, tr\u00e8s long, ruban de cases alors l' allocation en m\u00e9moire du tableau peut s'illustrer ainsi: Les cases vides mod\u00e9lisent des emplacements m\u00e9moires vides ou contenant d'autres donn\u00e9es... L'adresse du tableau est #A (valeur hexad\u00e9cimale sur deux octets) et c'est aussi celle de tab[0] . Celle de tab[i] est alors #A+i*2 ... Donc comme le pr\u00e9cise le site openclassrooms : Impl\u00e9mentation en m\u00e9moire des tableaux statiques Lorsqu'un tableau est cr\u00e9\u00e9, il prend un espace contigu en m\u00e9moire : les cases sont les unes \u00e0 la suite des autres. Toutes les cases d'un tableau sont du m\u00eame type. Ainsi, un tableau de int contiendra uniquement des int , et pas autre chose. Naturellement, il est donc interdit de cr\u00e9er un tableau dont la taille d\u00e9pend de la valeur d'une variable: c'est ce que nous appelons une allocation dynamique , et c'est un peu ce que fait Python dans la gestion transparente de ses listes!", "title": "Impl\u00e9mentation des tableaux en m\u00e9moire"}, {"location": "term/complex_struc.html#avantages-et-inconvenients-de-cette-structure", "text": "L'acc\u00e8s \u00e0 un \u00e9l\u00e9ment du tableau se fait en temps constant : en d'autres termes, si n est la taille du tableau, l'acc\u00e8s ne d\u00e9pend pas de n . Pour l'insertion d'un nouveau \u00e9l\u00e9ment dans le tableau, il faut allouer un nouvel espace m\u00e9moire qui passe par la recopie de tous les \u00e9l\u00e9ments du tableau auquel on ajoute le nouveau. Cette op\u00e9ration d\u00e9pend de la taille n du tableau et son temps d'ex\u00e9cution lui est proportionnel ! Complexit\u00e9 des op\u00e9rations sur un tableau statique L'acc\u00e8s \u00e0 un \u00e9l\u00e9ment d'un tableau statique est en O(1) et l'ajout est en O(n) . Et d'apr\u00e8s vous? Quelle est la complexit\u00e9 de la suppression d'un \u00e9l\u00e9ment?", "title": "Avantages et inconv\u00e9nients de cette structure"}, {"location": "term/complex_struc.html#implementation-des-listes-chainees", "text": "L'\u00e9l\u00e9ment de base pour la cr\u00e9ation d'une liste cha\u00een\u00e9e est le maillon constitu\u00e9 de: sa valeur en premier un pointeur en second, qui d\u00e9signe l'adresse m\u00e9moire du suivant dans la structure (adresse \u00e9ventuellement nulle pour d\u00e9signer le dernier!) La liste est ainsi cha\u00een\u00e9e par une succession de maillon chacun pointant vers le suivant, le dernier ayant un pointeur nul ( NULL ). Les valeurs de la liste ne sont plus stock\u00e9es \u00e0 des endroits contigus de la m\u00e9moire.", "title": "Impl\u00e9mentation des listes cha\u00een\u00e9es"}, {"location": "term/complex_struc.html#complexites-des-operations", "text": "Pour acc\u00e9der \u00e0 un \u00e9l\u00e9ment quelconque de la liste, il n'y a pas de choix: il faut parcourir la liste \u00e0 partir du premier. Ce parcours d\u00e9pend \u00e9videmment de la taille n de la structure. La complexit\u00e9 de l'op\u00e9ration est proportionnelle \u00e0 n . En revanche, l'insertion d'un \u00e9l\u00e9ment est \u00e0 op\u00e9ration constante. Le dessin ci-dessous montre les \u00e9tapes d'insertion dans une liste cha\u00een\u00e9e: L'algorithme lorsque qu'on souhaite ins\u00e9rer -13 en deuxi\u00e8me position est: On d\u00e9truit le pointeur de la premi\u00e8re. On d\u00e9finit ce pointeur vers la valeur du maillon portant la valeur -13 . On d\u00e9finit le pointeur du maillon ins\u00e9r\u00e9 vers la valeur du suivant dans la cha\u00eene. Ces trois op\u00e9rations sont ind\u00e9pendantes de la taille de la liste cha\u00een\u00e9e: l'insertion se fait en temps constant . En r\u00e9sum\u00e9: Op\u00e9rations Tableau statique Listes cha\u00een\u00e9es Acc\u00e9s \u00e0 un \u00e9l\u00e9ment O(1) O(n) Insertion ou suppression O(n) O(1) {: .tabnsi :} On pourrait \u00e9voquer la complexit\u00e9 d'autres op\u00e9rations \u00e9l\u00e9mentaires comme l'ajout ou la suppression au d\u00e9but, \u00e0 la fin,... ce que nous ferons en exercices. Nous pourrions aussi \u00e9voquer la notion de listes doublement cha\u00een\u00e9es constitu\u00e9es de maillon qui pointe vers les maillons suivants et pr\u00e9c\u00e9dents. En revanche, si elles am\u00e9liorent la complexit\u00e9 de certaines op\u00e9rations, elles contiennent plus d'informations, donc plus de m\u00e9moire! Enfin, m\u00eame si le programme de NSI ne les \u00e9voque pas, les tableaux dynamiques sont des structures hybrides qui permettent de conserver la complexit\u00e9 en temps constant des tableaux statiques et de permettre l'insertion aussi en temps constant. Nous n'en dirons pas plus sur le sujet...", "title": "Complexit\u00e9s des op\u00e9rations"}, {"location": "term/complex_struc.html#les-dictionnaires", "text": "Une d\u00e9finition Un dictionnaire est un ensemble de cl\u00e9s/valeurs( C/V ) dont les composantes sont appel\u00e9es via un descripteur (la cl\u00e9!) et non pas un indice. Depuis la classe de premi\u00e8re, nous connaissons les op\u00e9rations de bases permises sur un dictionnaire et leur syntaxe en python : Op\u00e9rations Code python Cr\u00e9er un dictionnaire vide d = {} Ajouter une association c,v d[\"Maths\"] = 18 Lire la valeur v d'une cl\u00e9 c d[\"Maths\"] {: .tabnsi :} Mais par exemple, il n'existe pas de primitive simple qui retourne la cl\u00e9 d'une valeur! L'impl\u00e9mentation du type dictionnaire doit permettre de r\u00e9aliser ces trois op\u00e9rations de base en temps d'ex\u00e9cution efficace. On cherche id\u00e9alement une complexit\u00e9 en O(1) pour la recherche, l'insertion ou la suppression. Comment faire? Le hachage Python a choisi les tables de hachages pour cette impl\u00e9mentation. Pour comprendre, il faut d'abord d\u00e9finir une fonction de hachage : Ce que dit Wikip\u00e9dia ... On nomme fonction de hachage, de l'anglais hash function (hash : pagaille, d\u00e9sordre, recouper et m\u00e9langer) par analogie avec la cuisine, une fonction particuli\u00e8re qui, \u00e0 partir d'une donn\u00e9e fournie en entr\u00e9e, calcule une empreinte num\u00e9rique servant \u00e0 identifier rapidement la donn\u00e9e initiale, au m\u00eame titre qu'une signature pour identifier une personne. Je reprends aussi les termes pertinents de l'encyclop\u00e9die : R\u00f4le d'une fonction de hachage On peut voir une fonction de hachage comme un moyen de replier l'espace de donn\u00e9es que l'on suppose potentiellement tr\u00e8s grand et tr\u00e8s peu rempli pour le faire entrer dans la m\u00e9moire de l'ordinateur. Le principe est d'utiliser les empreintes des cl\u00e9s comme indices des \u00e9l\u00e9ments de la table. Ces empreintes sont des nombres entiers obtenus en hachant la cl\u00e9 des objets \u00e0 stocker, souvent une cha\u00eene de caract\u00e8res. On peut ensuite retrouver l'objet associ\u00e9 \u00e0 une cl\u00e9 donn\u00e9e : il suffit de hacher la cl\u00e9 pour obtenir une empreinte et de lire dans le tableau l'\u00e9l\u00e9ment dont l'indice est cette empreinte.Au final, la complexit\u00e9 d\u2019une insertion et d\u2019une lecture dans une table de hachage sera \u00ab en moyenne \u00bb en O(1) . Les algorithme de hachage et les mots de passe Les mots de passe ne sont pas stock\u00e9s en clair: c'est leur empreinte obtenu par un algorithme de hachage ( SHA-256 par exemple) qui est utilis\u00e9. Cet algorithme produit un condensat de 256 bits. Mais, il faut \u00eatre certain que la fonction de hachage choisit remplit bien son r\u00f4le: \u00e0 chaque entr\u00e9e, elle doit associer une empreinte num\u00e9rique unique . On parle de collision si deux entr\u00e9es diff\u00e9rentes ont une empreinte num\u00e9rique \u00e9gale (en maths, on dirait que la fonction n'est pas injective...). La fonction de hachage du SHA-256 a remplac\u00e9 celle du MD5 qui cr\u00e9ait beaucoup de collision.", "title": "Les dictionnaires"}, {"location": "term/ep.html", "text": "\u00c9preuve Pratique BNS 2023 \u00b6 Les sujets ci-dessous correspondent \u00e0 la derni\u00e8re version officielle, publi\u00e9e le 25/01/2023 . \u25b6 Sujet 01 \u00b6 Exercice 01.1 \u00b6 Exercice 01.1 \u00c9nonc\u00e9 Correction Programmer la fonction verifie qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques non vide et qui renvoie True si ce tableau est tri\u00e9 dans l\u2019ordre croissant, False sinon. Exemples : Exemples : >>> verifie ([ 0 , 5 , 8 , 8 , 9 ]) True >>> verifie ([ 8 , 12 , 4 ]) False >>> verifie ([ - 1 , 4 ]) True >>> verifie ([ 5 ]) True 1 2 3 4 5 def verifie ( tab ): for i in range ( 1 , len ( tab )): if tab [ i ] < tab [ i - 1 ]: return False return True Exercice 01.2 \u00b6 Exercice 01.2 \u00c9nonc\u00e9 Correction Les r\u00e9sultats d'un vote ayant trois issues possibles 'A', 'B' et 'C' sont stock\u00e9s dans un tableau. Exemple : urne = [ 'A' , 'A' , 'A' , 'B' , 'C' , 'B' , 'C' , 'B' , 'C' , 'B' ] La fonction depouille doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des artistes et les valeurs le nombre de votes en leur faveur. La fonction vainqueur doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction depouille et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions depouille et vainqueur ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 urne = [ 'A' , 'A' , 'A' , 'B' , 'C' , 'B' , 'C' , 'B' , 'C' , 'B' ] def depouille ( urne ): resultat = ... for bulletin in urne : if ... : resultat [ bulletin ] = resultat [ bulletin ] + 1 else : ... return resultat def vainqueur ( election ): vainqueur = '' nmax = 0 for candidat in election : if ... > ... : nmax = ... vainqueur = candidat liste_finale = [ nom for nom in election if election [ nom ] == ... ] return ... Exemples d\u2019utilisation : >>> election = depouille ( urne ) >>> election { 'A' : 3 , 'B' : 4 , 'C' : 3 } >>> vainqueur ( election ) [ 'B' ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 urne = [ 'A' , 'A' , 'A' , 'B' , 'C' , 'B' , 'C' , 'B' , 'C' , 'B' ] def depouille ( urne ): resultat = {} for bulletin in urne : if bulletin in resultat : resultat [ bulletin ] = resultat [ bulletin ] + 1 else : resultat [ bulletin ] = 1 return resultat def vainqueur ( election ): vainqueur = '' #(1) nmax = 0 for candidat in election : if election [ candidat ] > nmax : nmax = election [ candidat ] vainqueur = candidat #(2) liste_finale = [ nom for nom in election if election [ nom ] == nmax ] return liste_finale Il est pourtant tr\u00e8s d\u00e9conseill\u00e9 de nommer une variable avec le m\u00eame nom que la fonction qui la contient... Cette variable vainqueur est inutile, on ne s'en sert pas dans l'\u00e9laboration de la liste finale. \u25b6 Sujet 02 \u00b6 Exercice 02.1 \u00b6 Exercice 02.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction indices_maxi qui prend en param\u00e8tre une liste tab , non vide, de nombres entiers et renvoie un couple donnant d\u2019une part le plus grand \u00e9l\u00e9ment de cette liste et d\u2019autre part la liste des indices de la liste tab o\u00f9 appara\u00eet ce plus grand \u00e9l\u00e9ment. Exemple : >>> indices_maxi ([ 1 , 5 , 6 , 9 , 1 , 2 , 3 , 7 , 9 , 8 ]) ( 9 , [ 3 , 8 ]) >>> indices_maxi ([ 7 ]) ( 7 , [ 0 ]) 1 2 3 4 5 6 7 8 9 10 def indices_maxi ( tab ): val_max = tab [ 0 ] ind_max = [] for i in range ( len ( tab )): if tab [ i ] > val_max : val_max = tab [ i ] for i in range ( len ( tab )): if tab [ i ] == val_max : ind_max . append ( i ) return ( val_max , ind_max ) Exercice 02.2 \u00b6 Exercice 02.2 \u00c9nonc\u00e9 Correction Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type list ). On rappelle que l\u2019expression liste_1 = list(liste) fait une copie de liste ind\u00e9pendante de liste , que l\u2019expression x = liste.pop() enl\u00e8ve le sommet de la pile liste et le place dans la variable x et, enfin, que l\u2019expression liste.append(v) place la valeur v au sommet de la pile liste . Compl\u00e9ter le code Python de la fonction positif ci-dessous qui prend une pile liste de nombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame ordre, sans modifier la variable liste . 1 2 3 4 5 6 7 8 9 10 11 def positif ( pile ): pile_1 = ... ( pile ) pile_2 = ... while pile_1 != []: x = ... if ... >= 0 : pile_2 . append ( ... ) while pile_2 != ... : x = pile_2 . pop () ... return pile_1 Exemple : >>> positif ([ - 1 , 0 , 5 , - 3 , 4 , - 6 , 10 , 9 , - 8 ]) [ 0 , 5 , 4 , 10 , 9 ] >>> positif ([ - 2 ]) [] 1 2 3 4 5 6 7 8 9 10 11 def positif ( pile ): pile_1 = list ( pile ) pile_2 = [] while pile_1 != []: x = pile_1 . pop () if x >= 0 : pile_2 . append ( x ) while pile_2 != []: x = pile_2 . pop () pile_1 . append ( x ) return pile_1 \u25b6 Sujet 03 \u00b6 Exercice 03.1 \u00b6 Exercice 03.1 \u00c9nonc\u00e9 Correction Dans cet exercice, les nombres sont des entiers ou des flottants. \u00c9crire une fonction moyenne renvoyant la moyenne pond\u00e9r\u00e9e d\u2019une liste non vide, pass\u00e9e en param\u00e8tre, de tuples \u00e0 deux \u00e9l\u00e9ments de la forme ( valeur , coefficient ) o\u00f9 valeur et coefficient sont des nombres positifs ou nuls. Si la somme des coefficients est nulle, la fonction renvoie None , si la somme des coefficients est non nulle, la fonction renvoie, sous forme de flottant, la moyenne des valeurs affect\u00e9es de leur coefficient. Exemple : >>> moyenne ([( 8 , 2 ), ( 12 , 0 ), ( 13.5 , 1 ), ( 5 , 0.5 )]) 9.142857142857142 >>> moyenne ([( 3 , 0 ), ( 5 , 0 )]) None Dans le premier exemple la moyenne est calcul\u00e9e par la formule : \\(\\dfrac{8 \\times 2 + 12 \\times 0 + 13,5 \\times 1 + 5 \\times 0,5}{2+0+1+0,5}\\) 1 2 3 4 5 6 7 8 9 def moyenne ( tab ): somme = 0 coeffs = 0 for couple in tab : somme += couple [ 0 ] * couple [ 1 ] coeffs += couple [ 1 ] if coeffs == 0 : return None return somme / coeffs Exercice 03.2 \u00b6 Exercice 03.2 \u00c9nonc\u00e9 Correction On travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin. Dans le code ci-dessous, la fonction affiche permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par deux espaces. La fonction zoomListe prend en argument une liste liste_depart et un entier k . Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de liste_depart est dupliqu\u00e9 k fois. La fonction zoomDessin prend en argument la grille dessin et renvoie une grille o\u00f9 toutes les lignes de dessin sont zoom\u00e9es k fois et r\u00e9p\u00e9t\u00e9es k fois. Soit le code ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 coeur = [[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 ], \\ [ 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 ], \\ [ 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ], \\ [ 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ], \\ [ 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ], \\ [ 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ], \\ [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]] def affiche ( dessin ): ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par des \" *\" , les 0 par deux espaces \" \" ''' for ligne in dessin : for col in ligne : if col == 1 : print ( \" *\" , end = \"\" ) else : print ( \" \" , end = \"\" ) print () def zoomListe ( liste_depart , k ): '''renvoie une liste contenant k fois chaque \u00e9l\u00e9ment de liste_depart''' liste_zoom = ... for elt in ... : for i in range ( k ): ... return liste_zoom def zoomDessin ( grille , k ): '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois ET r\u00e9p\u00e9t\u00e9es k fois''' grille_zoom = [] for elt in grille : liste_zoom = ... for i in range ( k ): ... . append ( ... ) return grille_zoom R\u00e9sultats \u00e0 obtenir : >>> affiche ( coeur ) >>> affiche ( zoomDessin ( coeurcoeur = [[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 ], \\ [ 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 ], \\ [ 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ], \\ [ 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ], \\ [ 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ], \\ [ 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ], \\ [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]] def affiche ( dessin ): ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par des \" *\" , les 0 par deux espaces \" \" ''' for ligne in dessin : for col in ligne : if col == 1 : print ( ' *' , end = '' ) else : print ( ' ' , end = '' ) print () def zoomListe ( liste_depart , k ): '''renvoie une liste contenant k fois chaque \u00e9l\u00e9ment de liste_depart''' liste_zoom = [] for elt in liste_depart : for i in range ( k ): liste_zoom . append ( elt ) return liste_zoom def zoomDessin ( grille , k ): '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois ET r\u00e9p\u00e9t\u00e9es k fois''' grille_zoom = [] for elt in grille : liste_zoom = zoomListe ( elt , k ) for i in range ( k ): grille_zoom . append ( liste_zoom ) return grille_zoom \u25b6 Sujet 04 \u00b6 Exercice 04.1 \u00b6 Exercice 04.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction a_doublon qui prend en param\u00e8tre une liste tri\u00e9e de nombres et renvoie True si la liste contient au moins deux nombres identiques, False sinon. Par exemple : >>> a_doublon ([]) False >>> a_doublon ([ 1 ]) False >>> a_doublon ([ 1 , 2 , 4 , 6 , 6 ]) True >>> a_doublon ([ 2 , 5 , 7 , 7 , 7 , 9 ]) True >>> a_doublon ([ 0 , 2 , 3 ]) False 1 2 3 4 5 def a_doublon ( lst ): for i in range ( len ( lst ) - 1 ): if lst [ i ] == lst [ i + 1 ]: return True return False Exercice 04.2 \u00b6 Exercice 04.2 \u00c9nonc\u00e9 Correction On souhaite g\u00e9n\u00e9rer des grilles du jeu de d\u00e9mineur \u00e0 partir de la position des bombes \u00e0 placer. On se limite \u00e0 la g\u00e9n\u00e9ration de grilles carr\u00e9es de taille \\(n \\times n\\) o\u00f9 \\(n\\) est le nombre de bombes du jeu. Dans le jeu du d\u00e9mineur, chaque case de la grille contient soit une bombe, soit une valeur qui correspond aux nombres de bombes situ\u00e9es dans le voisinage direct de la case (au- dessus, en dessous, \u00e0 droite, \u00e0 gauche ou en diagonale : chaque case a donc 8 voisins si elle n'est pas situ\u00e9e au bord de la grille). Voici un exemple de grille \\(5 \\times 5\\) de d\u00e9mineur dans laquelle la bombe est repr\u00e9sent\u00e9e par une \u00e9toile : On utilise une liste de listes pour repr\u00e9senter la grille et on choisit de coder une bombe par la valeur -1. L'exemple ci-contre sera donc cod\u00e9 par la liste : [[ 1 , 1 , 1 , 0 , 0 ], [ 1 , - 1 , 1 , 1 , 1 ], [ 2 , 2 , 3 , 2 , - 1 ], [ 1 , - 1 , 2 , - 1 , 3 ], [ 1 , 1 , 2 , 2 , - 1 ]] Compl\u00e9ter le code suivant afin de g\u00e9n\u00e9rer des grilles de d\u00e9mineur, on pourra v\u00e9rifier que l\u2019instruction genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)]) produit bien la liste donn\u00e9e en exemple. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def voisinage ( n , ligne , colonne ): \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\" voisins = [] for l in range ( max ( 0 , ligne - 1 ), min ( n , ligne + 2 )): for c in range ( max ( 0 , colonne - 1 ), min ( n , colonne + 2 )): if ( l , c ) != ( ligne , colonne ): voisins . append (( l , c )) return voisins def incremente_voisins ( grille , ligne , colonne ): \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\" voisins = ... for l , c in voisins : if grille [ l ][ c ] != ... : # si ce n'est pas une bombe ... # on ajoute 1 \u00e0 sa valeur def genere_grille ( bombes ): \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en param\u00e8tre. \"\"\" n = len ( bombes ) # Initialisation d'une grille nxn remplie de 0 grille = [[ 0 for colonne in range ( n )] for ligne in range ( n )] # Place les bombes et calcule les valeurs des autres cases for ligne , colonne in bombes : grille [ ligne ][ colonne ] = ... # place la bombe ... # incr\u00e9mente ses voisins return grille 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def voisinage ( n , ligne , colonne ): \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\" voisins = [] for l in range ( max ( 0 , ligne - 1 ), min ( n , ligne + 2 )): for c in range ( max ( 0 , colonne - 1 ), min ( n , colonne + 2 )): if ( l , c ) != ( ligne , colonne ): voisins . append (( l , c )) return voisins def incremente_voisins ( grille , ligne , colonne ): \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\" voisins = voisinage ( len ( grille ), ligne , colonne ) for l , c in voisins : if grille [ l ][ c ] != - 1 : # si ce n'est pas une bombe grille [ l ][ c ] += 1 # on ajoute 1 \u00e0 sa valeur def genere_grille ( bombes ): \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en param\u00e8tre. \"\"\" n = len ( bombes ) # Initialisation d'une grille nxn remplie de 0 grille = [[ 0 for colonne in range ( n )] for ligne in range ( n )] # Place les bombes et calcule les valeurs des autres cases for ligne , colonne in bombes : grille [ ligne ][ colonne ] = - 1 # place la bombe incremente_voisins ( grille , ligne , colonne ) # incr\u00e9mente ses voisins return grille \u25b6 Sujet 05 \u00b6 Exercice 05.1 \u00b6 Exercice 05.1 \u00c9nonc\u00e9 Correction \u00c9crire en python deux fonctions : lancer de param\u00e8tre n , un entier positif, qui renvoie un tableau de type list de n entiers obtenus al\u00e9atoirement entre 1 et 6 (1 et 6 inclus) ; paire_6 de param\u00e8tre tab , un tableau de type list de n entiers entre 1 et 6 obtenus al\u00e9atoirement, qui renvoie un bool\u00e9en \u00e9gal \u00e0 True si le nombre de 6 est sup\u00e9rieur ou \u00e9gal \u00e0 2, False sinon. On pourra utiliser la fonction randint(a,b) du module random pour laquelle la documentation officielle est la suivante : Renvoie un entier al\u00e9atoire N tel que a <=N <= b. Exemples : >>> lancer1 = lancer ( 5 ) [ 5 , 6 , 6 , 2 , 2 ] >>> paire_6 ( lancer1 ) True >>> lancer2 = lancer ( 5 ) [ 6 , 5 , 1 , 6 , 6 ] >>> paire_6 ( lancer2 ) True >>> lancer3 = lancer ( 3 ) [ 2 , 2 , 6 ] >>> paire_6 ( lancer3 ) False >>> lancer4 = lancer ( 0 ) [] >>> paire_6 ( lancer4 ) False 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from random import randint def lancer ( n ): return [ randint ( 1 , 6 ) for _ in range ( n )] def paire_6 ( tab ): nb = 0 for elt in tab : if elt == 6 : nb += 1 if nb >= 2 : return True else : return False Exercice 05.2 \u00b6 Exercice 05.2 \u00c9nonc\u00e9 Correction On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques. La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes. Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel. Le n\u00e9gatif d\u2019une image est l\u2019image constitu\u00e9e des pixels x_n tels que x_n + x_i = 255 o\u00f9 x_i est le pixel correspondant de l\u2019image initiale. Compl\u00e9ter le programme suivant : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def nbLig ( image ): '''renvoie le nombre de lignes de l'image''' return ... def nbCol ( image ): '''renvoie la largeur de l'image''' return ... def negatif ( image ): '''renvoie le negatif de l'image sous la forme d'une liste de listes''' # on cree une image de 0 aux memes dimensions que le parametre image L = [[ 0 for k in range ( nbCol ( image ))] for i in range ( nbLig ( image ))] for i in range ( nbLig ( image )): for j in range ( ... ): L [ i ][ j ] = ... return L def binaire ( image , seuil ): '''renvoie une image binarisee de l'image sous la forme d'une liste de listes contenant des 0 si la valeur du pixel est strictement inferieure au seuil et 1 sinon''' # on cree une image de 0 aux memes dimensions que le parametre image L = [[ 0 for k in range ( nbCol ( image ))] for i in range ( nbLig ( image ))] for i in range ( nbLig ( image )): for j in range ( ... ): if image [ i ][ j ] < ... : L [ i ][ j ] = ... else : L [ i ][ j ] = ... return L Exemples : >>> img = [[ 20 , 34 , 254 , 145 , 6 ], [ 23 , 124 , 237 , 225 , 69 ], [ 197 , 174 , 207 , 25 , 87 ], [ 255 , 0 , 24 , 197 , 189 ]] >>> nbLig ( img ) 4 >>> nbCol ( img ) 5 >>> negatif ( img ) [[ 235 , 221 , 1 , 110 , 249 ], [ 232 , 131 , 18 , 30 , 186 ], [ 58 , 81 , 48 , 230 , 168 ], [ 0 , 255 , 231 , 58 , 66 ]] >>> binaire ( img , 120 ) [[ 0 , 0 , 1 , 1 , 0 ], [ 0 , 1 , 1 , 1 , 0 ], [ 1 , 1 , 1 , 0 , 0 ], [ 1 , 0 , 0 , 1 , 1 ]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def nbLig ( image ): '''renvoie le nombre de lignes de l'image''' return len ( image ) def nbCol ( image ): '''renvoie la largeur de l'image''' return len ( image [ 0 ]) def negatif ( image ): '''renvoie le negatif de l'image sous la forme d'une liste de listes''' # on cree une image de 0 aux memes dimensions que le parametre image L = [[ 0 for k in range ( nbCol ( image ))] for i in range ( nbLig ( image ))] for i in range ( nbLig ( image )): for j in range ( nbCol ( image )): L [ i ][ j ] = 255 - image [ i ][ j ] return L def binaire ( image , seuil ): '''renvoie une image binarisee de l'image sous la forme d'une liste de listes contenant des 0 si la valeur du pixel est strictement inferieure au seuil et 1 sinon''' # on cree une image de 0 aux memes dimensions que le parametre image L = [[ 0 for k in range ( nbCol ( image ))] for i in range ( nbLig ( image ))] for i in range ( nbLig ( image )): for j in range ( nbCol ( image )): if image [ i ][ j ] < seuil : L [ i ][ j ] = 0 else : L [ i ][ j ] = 1 return L \u25b6 Sujet 06 \u00b6 Exercice 06.1 \u00b6 Exercice 06.1 \u00c9nonc\u00e9 Correction Programmer la fonction recherche , prenant en param\u00e8tre un tableau non vide tab (type list ) d'entiers et un entier n , et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau. Exemples >>> recherche ([ 5 , 3 ], 1 ) 2 >>> recherche ([ 2 , 4 ], 2 ) 0 >>> recherche ([ 2 , 3 , 5 , 2 , 4 ], 2 ) 3 1 2 3 4 5 6 def recherche ( tab , n ): indice_solution = len ( tab ) for i in range ( len ( tab )): if tab [ i ] == n : indice_solution = i return indice_solution Exercice 06.2 \u00b6 Exercice 06.2 \u00c9nonc\u00e9 Correction On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples. On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) est donn\u00e9e par la formule : \\[d=\\sqrt{(x-x')^2+(y-y')^2}\\] On importe pour cela la fonction racine carr\u00e9e ( sqrt ) du module math de Python. Compl\u00e9ter le code des fonctions distance et plus_courte_distance fournies ci-dessous pour qu\u2019elles r\u00e9pondent \u00e0 leurs sp\u00e9cifications. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from math import sqrt # import de la fonction racine carr\u00e9e def distance ( point1 , point2 ): \"\"\" Calcule et renvoie la distance entre deux points. \"\"\" return sqrt (( ... ) ** 2 + ( ... ) ** 2 ) def plus_courte_distance ( tab , depart ): \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\" point = tab [ 0 ] min_dist = ... for i in range ( 1 , ... ): if distance ( tab [ i ], depart ) ... : point = ... min_dist = ... return point Exemples : >>> distance (( 1 , 0 ), ( 5 , 3 )) 5.0 >>> distance (( 1 , 0 ), ( 0 , 1 )) 1.4142135623730951 >>> plus_courte_distance ([( 7 , 9 ), ( 2 , 5 ), ( 5 , 2 )], ( 0 , 0 )) ( 2 , 5 ) >>> plus_courte_distance ([( 7 , 9 ), ( 2 , 5 ), ( 5 , 2 )], ( 5 , 2 )) ( 5 , 2 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from math import sqrt def distance ( point1 , point2 ): \"\"\" Calcule et renvoie la distance entre deux points. \"\"\" return sqrt (( point1 [ 0 ] - point2 [ 0 ]) ** 2 + (( point1 [ 1 ] - point2 [ 1 ])) ** 2 ) def plus_courte_distance ( tab , depart ): \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\" point = tab [ 0 ] min_dist = distance ( point , depart ) for i in range ( 1 , len ( tab )): if distance ( tab [ i ], depart ) < min_dist : point = tab [ i ] min_dist = distance ( tab [ i ], depart ) return point \u25b6 Sujet 07 \u00b6 Exercice 07.1 \u00b6 Exercice 07.1 \u00c9nonc\u00e9 Correction Programmer la fonction fusion prenant en param\u00e8tres deux tableaux non vides tab1 et tab2 (type list ) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de tab1 et tab2 . Exemples : >>> fusion ([ 3 , 5 ], [ 2 , 5 ]) [ 2 , 3 , 5 , 5 ] >>> fusion ([ - 2 , 4 ], [ - 3 , 5 , 10 ]) [ - 3 , - 2 , 4 , 5 , 10 ] >>> fusion ([ 4 ], [ 2 , 6 ]) [ 2 , 4 , 6 ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def fusion ( tab1 , tab2 ): tab_fusion = [] i1 = 0 i2 = 0 while i1 < len ( tab1 ) and i2 < len ( tab2 ): if tab1 [ i1 ] < tab2 [ i2 ]: tab_fusion . append ( tab1 [ i1 ]) i1 += 1 else : tab_fusion . append ( tab2 [ i2 ]) i2 += 1 if i1 == len ( tab1 ): while i2 < len ( tab2 ): tab_fusion . append ( tab2 [ i2 ]) i2 += 1 else : while i1 < len ( tab1 ): tab_fusion . append ( tab1 [ i1 ]) i1 += 1 return tab_fusion Exercice 07.2 \u00b6 Exercice 07.2 \u00c9nonc\u00e9 Correction Le but de cet exercice est d\u2019\u00e9crire une fonction r\u00e9cursive traduire_romain qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res, non vide, repr\u00e9sentant un nombre \u00e9crit en chiffres romains et qui renvoie son \u00e9criture d\u00e9cimale. Les chiffres romains consid\u00e9r\u00e9s sont : I, V, X, L, C, D et M. Ils repr\u00e9sentent respectivement les nombres 1, 5, 10, 50, 100, 500, et 1000 en base dix. On dispose d\u2019un dictionnaire romains dont les cl\u00e9s sont les caract\u00e8res apparaissant dans l\u2019\u00e9criture en chiffres romains et les valeurs sont les nombres entiers associ\u00e9s en \u00e9criture d\u00e9cimale : romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000} Le code de la fonction traduire_romain fournie repose sur le principe suivant : la valeur d\u2019un caract\u00e8re est ajout\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur sup\u00e9rieure (ou \u00e9gale) \u00e0 celle du caract\u00e8re qui le suit ; la valeur d\u2019un caract\u00e8re est retranch\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur strictement inf\u00e9rieure \u00e0 celle du caract\u00e8re qui le suit. Ainsi, XIV correspond au nombre 10 + 5 - 1 puisque : la valeur de X (10) est sup\u00e9rieure \u00e0 celle de I (1), on ajoute donc 10 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire IV ; la valeur de I (1) est strictement inf\u00e9rieure \u00e0 celle de V (5), on soustrait donc 1 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire V. On rappelle que pour priver une cha\u00eene de caract\u00e8res de son premier caract\u00e8re, on utilisera l\u2019instruction : nom_de_variable[1:] Par exemple, si la variable mot contient la cha\u00eene \"CDI\" , mot[1:] renvoie \"DI\" . 1 2 3 4 5 6 7 8 9 10 11 romains = { \"I\" : 1 , \"V\" : 5 , \"X\" : 10 , \"L\" : 50 , \"C\" : 100 , \"D\" : 500 , \"M\" : 1000 } def traduire_romain ( nombre ): \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres romains \"\"\" if len ( nombre ) == 1 : return ... elif romains [ nombre [ 0 ]] >= ... return romains [ nombre [ 0 ]] + ... else : return ... Compl\u00e9ter le code de la fonction traduire_romain et le tester. Exemples : >>> traduire_romain ( \"XIV\" ) 14 >>> traduire_romain ( \"CXLII\" ) 142 >>> traduire_romain ( \"MMXXIII\" ) 2023 1 2 3 4 5 6 7 8 9 10 11 romains = { \"I\" : 1 , \"V\" : 5 , \"X\" : 10 , \"L\" : 50 , \"C\" : 100 , \"D\" : 500 , \"M\" : 1000 } def traduire_romain ( nombre ): \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres romains \"\"\" if len ( nombre ) == 1 : return romains [ nombre ] elif romains [ nombre [ 0 ]] >= romains [ nombre [ 1 ]]: return romains [ nombre [ 0 ]] + traduire_romain ( nombre [ 1 :]) else : return traduire_romain ( nombre [ 1 :]) - romains [ nombre [ 0 ]] \u25b6 Sujet 08 \u00b6 Exercice 08.1 \u00b6 Exercice 08.1 \u00c9nonc\u00e9 Correction Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous : {'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50} \u00c9crire une fonction max_dico qui : Prend en param\u00e8tre un dictionnaire dico non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ; Renvoie un tuple dont : La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ; La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le dictionnaire. Exemples : >>> max_dico ({ 'Bob' : 102 , 'Ada' : 201 , 'Alice' : 103 , 'Tim' : 50 }) ( 'Ada' , 201 ) >>> max_dico ({ 'Alan' : 222 , 'Ada' : 201 , 'Eve' : 220 , 'Tim' : 50 }) ( 'Alan' , 222 ) 1 2 3 4 5 6 7 8 def max_dico ( dico ): cle_max = '' val_max = 0 for cle in dico : if dico [ cle ] > val_max : val_max = dico [ cle ] cle_max = cle return ( cle_max , val_max ) Exercice 08.2 \u00b6 Exercice 08.2 \u00c9nonc\u00e9 Correction Sources Markdown Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : [3, 2, '*', 5, '+']. D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante : Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ; Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile. \u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique. Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +. Pour cet exercice, on dispose d\u2019une classe Pile qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile. Compl\u00e9ter le script de la fonction eval_expression qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Pile : \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\" def __init__ ( self ): self . contenu = [] def est_vide ( self ): \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\" return self . contenu == [] def empiler ( self , v ): \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\" self . contenu . append ( v ) def depiler ( self ): \"\"\" Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, si la pile n\u2019est pas vide. \"\"\" if not self . est_vide (): return self . contenu . pop () def eval_expression ( tab ): p = Pile () for ... in tab : if element != '+' ... element != '*' : p . empiler ( ... ) else : if element == ... : resultat = p . depiler () + ... else : resultat = ... p . empiler ( ... ) return ... Exemple : >>> eval_expression ([ 2 , 3 , '+' , 5 , '*' ]) 25 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Pile : \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\" def __init__ ( self ): self . contenu = [] def est_vide ( self ): \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\" return self . contenu == [] def empiler ( self , v ): \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\" self . contenu . append ( v ) def depiler ( self ): \"\"\" Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, si la pile n\u2019est pas vide. \"\"\" if not self . est_vide (): return self . contenu . pop () def eval_expression ( tab ): p = Pile () for element in tab : if element != '+' and element != '*' : p . empiler ( element ) else : if element == '+' : resultat = p . depiler () + p . depiler () else : resultat = p . depiler () * p . depiler () p . empiler ( resultat ) return p . depiler () Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : [3, 2, '*', 5, '+']. D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante : - Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ; - Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile. - \u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique. Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +. Pour cet exercice, on dispose d\u2019une classe `Pile` qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile. Compl\u00e9ter le script de la fonction `eval_expression` qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e. ```python linenums='1' class Pile: \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\" def __init__ (self): self.contenu = [] def est_vide(self): \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\" return self.contenu == [] def empiler(self, v): \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\" self.contenu.append(v) def depiler(self): \"\"\" Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, si la pile n\u2019est pas vide. \"\"\" if not self.est_vide(): return self.contenu.pop() def eval_expression(tab): p = Pile() for ... in tab: if element != '+' ... element != '*': p.empiler(...) else: if element == ...: resultat = p.depiler() + ... else: resultat = ... p.empiler(...) return ... Exemple : >>> eval_expression ([ 2 , 3 , '+' , 5 , '*' ]) 25 ``` \u25b6 Sujet 09 \u00b6 Exercice 09.1 \u00b6 Exercice 09.1 \u00c9nonc\u00e9 Correction Programmer la fonction multiplication , prenant en param\u00e8tres deux nombres entiers n1 et n2 , et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. Exemples : >>> multiplication ( 3 , 5 ) 15 >>> multiplication ( - 4 , - 8 ) 32 >>> multiplication ( - 2 , 6 ) - 12 >>> multiplication ( - 2 , 0 ) 0 1 2 3 4 5 6 7 8 9 def multiplication ( n1 , n2 ): if n1 < 0 : return - multiplication ( - n1 , n2 ) if n2 < 0 : return - multiplication ( n1 , - n2 ) resultat = 0 for _ in range ( n2 ): resultat += n1 return resultat Exercice 09.2 \u00b6 Exercice 09.2 \u00c9nonc\u00e9 Correction Soit tab un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et n un entier. La fonction chercher ci-dessous doit renvoyer un indice o\u00f9 la valeur n appara\u00eet dans tab si cette valeur y figure et None sinon. Les param\u00e8tres de la fonction sont : tab , le tableau dans lequel s'effectue la recherche ; n , l'entier \u00e0 chercher dans le tableau ; i , l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ; j , l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche. L\u2019algorithme demand\u00e9 est une recherche dichotomique r\u00e9cursive. Recopier et compl\u00e9ter le code de la fonction chercher suivante : 1 2 3 4 5 6 7 8 9 10 11 12 def chercher ( tab , n , i , j ): if i < 0 or j > len ( tab ) : return None if i > j : return None m = ( i + j ) // ... if ... < n : return chercher ( tab , n , ... , ... ) elif ... > n : return chercher ( tab , n , ... , ... ) else : return ... L'ex\u00e9cution du code doit donner : >>> chercher ([ 1 , 5 , 6 , 6 , 9 , 12 ], 7 , 0 , 10 ) >>> chercher ([ 1 , 5 , 6 , 6 , 9 , 12 ], 7 , 0 , 5 ) >>> chercher ([ 1 , 5 , 6 , 6 , 9 , 12 ], 9 , 0 , 5 ) 4 >>> chercher ([ 1 , 5 , 6 , 6 , 9 , 12 ], 6 , 0 , 5 ) 2 1 2 3 4 5 6 7 8 9 10 11 12 def chercher ( tab , n , i , j ): if i < 0 or j > len ( tab ) : return None if i > j : return None m = ( i + j ) // 2 if tab [ m ] < n : return chercher ( tab , n , m + 1 , j ) elif tab [ m ] > n : return chercher ( tab , n , i , m - 1 ) else : return m \u25b6 Sujet 10 \u00b6 Exercice 10.1 \u00b6 Exercice 10.1 \u00c9nonc\u00e9 Correction \u00c9crire la fonction maxliste , prenant en param\u00e8tre un tableau non vide de nombres tab (de type list ) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau. Exemples : >>> maxliste ([ 98 , 12 , 104 , 23 , 131 , 9 ]) 131 >>> maxliste ([ - 27 , 24 , - 3 , 15 ]) 24 1 2 3 4 5 6 def maxliste ( tab ): maximum = tab [ 0 ] for element in tab : if element > maximum : maximum = element return maximum Exercice 10.2 \u00b6 Exercice 10.2 \u00c9nonc\u00e9 Correction On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et fermantes. Un parenth\u00e9sage est correct si : le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses fermantes. en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit \u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es. Ainsi, ((()())(())) est un parenth\u00e9sage correct. Les parenth\u00e9sages ())(() et (())(() sont, eux, incorrects. On dispose du code de la classe Pile suivant : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Pile : \"\"\" Classe d\u00e9finissant une pile \"\"\" def __init__ ( self ): self . valeurs = [] def est_vide ( self ): \"\"\"Renvoie True si la pile est vide, False sinon\"\"\" return self . valeurs == [] def empiler ( self , c ): \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\" self . valeurs . append ( c ) def depiler ( self ): \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\" if self . est_vide () == False : self . valeurs . pop () On souhaite programmer une fonction parenthesage qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res ch form\u00e9e de parenth\u00e8ses et renvoie True si la cha\u00eene est bien parenth\u00e9s\u00e9e et False sinon. Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. Elle est, par contre, mal parenth\u00e9s\u00e9e : si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ; ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide. 1 2 3 4 5 6 7 8 9 10 11 12 def parenthesage ( ch ): \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\" p = Pile () for c in ch : if c == ... : p . empiler ( c ) elif c == ... : if p . est_vide (): return ... else : ... return p . est_vide () Compl\u00e9ter le code de la fonction parenthesage . Exemples : >>> parenthesage ( \"((()())(()))\" ) True >>> parenthesage ( \"())(()\" ) False >>> parenthesage ( \"(())(()\" ) False 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Pile : \"\"\" Classe d\u00e9finissant une pile \"\"\" def __init__ ( self ): self . valeurs = [] def est_vide ( self ): \"\"\"Renvoie True si la pile est vide, False sinon\"\"\" return self . valeurs == [] def empiler ( self , c ): \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\" self . valeurs . append ( c ) def depiler ( self ): \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\" if self . est_vide () == False : self . valeurs . pop () def parenthesage ( ch ): \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\" p = Pile () for c in ch : if c == '(' : p . empiler ( c ) elif c == ')' : if p . est_vide (): return False else : p . depiler () return p . est_vide () \u25b6 Sujet 11 \u00b6 Exercice 11.1 \u00b6 Exercice 11.1 \u00c9nonc\u00e9 Correction On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau [1, 0, 1, 0, 0, 1, 1] repr\u00e9sente l'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est 2**6 + 2**4 + 2**1 + 2**0 = 83 . \u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction convertir r\u00e9pondant aux sp\u00e9cifications suivantes : def convertir ( tab ): \"\"\" tab est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire est donn\u00e9e par le tableau tab \"\"\" Exemple : >>> convertir ([ 1 , 0 , 1 , 0 , 0 , 1 , 1 ]) 83 >>> convertir ([ 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ]) 130 1 2 3 4 5 6 7 def convertir ( tab ): puissance = 0 total = 0 for i in range ( len ( tab ) - 1 , - 1 , - 1 ): total += tab [ i ] * ( 2 ** puissance ) puissance += 1 return total Exercice 11.2 \u00b6 Exercice 11.2 \u00c9nonc\u00e9 Correction La fonction tri_insertion suivante prend en argument une liste tab et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e. On rappelle le principe du tri par insertion : on consid\u00e8re les \u00e9l\u00e9ments \u00e0 trier un par un, le premier \u00e9l\u00e9ment constituant, \u00e0 lui tout seul, une liste tri\u00e9e de longueur 1. On range ensuite le second \u00e9l\u00e9ment pour constituer une liste tri\u00e9e de longueur 2, puis on range le troisi\u00e8me \u00e9l\u00e9ment pour avoir une liste tri\u00e9e de longueur 3 et ainsi de suite\u2026 A chaque \u00e9tape, le premier \u00e9l\u00e9ment de la sous-liste non tri\u00e9e est plac\u00e9 dans la sous-liste des \u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s de sorte que cette sous-liste demeure tri\u00e9e. Le principe du tri par insertion est donc d'ins\u00e9rer \u00e0 la n-i\u00e8me it\u00e9ration, le n-i\u00e8me \u00e9l\u00e9ment \u00e0 la bonne place. 1 2 3 4 5 6 7 8 9 10 11 12 def tri_insertion ( tab ): n = len ( tab ) for i in range ( 1 , n ): valeur_insertion = tab [ ... ] # la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger j = ... # tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer # on d\u00e9cale les valeurs du tableau vers la droite while j > ... and valeur_insertion < tab [ ... ]: tab [ j ] = tab [ j - 1 ] j = ... tab [ j ] = ... Exemples : >>> liste = [ 9 , 5 , 8 , 4 , 0 , 2 , 7 , 1 , 10 , 3 , 6 ] >>> tri_insertion ( liste ) >>> liste [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] 1 2 3 4 5 6 7 8 9 10 11 12 def tri_insertion ( tab ): n = len ( tab ) for i in range ( 1 , n ): valeur_insertion = tab [ i ] # la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger j = i # tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer # on d\u00e9cale les valeurs du tableau vers la droite while j > 0 and valeur_insertion < tab [ j - 1 ]: tab [ j ] = tab [ j - 1 ] j = j - 1 tab [ j ] = valeur_insertion \u25b6 Sujet 12 \u00b6 Exercice 12.1 \u00b6 Exercice 12.1 \u00c9nonc\u00e9 Correction On consid\u00e8re la classe ABR , dont le constructeur est le suivant : class ABR : def __init__ ( self , g0 , v0 , d0 ): self . gauche = g0 self . cle = v0 self . droit = d0 def __repr__ ( self ): if self is None : return '' else : return '(' + ( self . gauche ) . __repr__ () + ',' + str ( self . cle ) + ',' + ( self . droit ) . __repr__ () + ')' Ainsi, l\u2019arbre binaire de recherche abr1 ci- contre est cr\u00e9\u00e9 par le code python ci- dessous n0 = ABR ( None , 0 , None ) n3 = ABR ( None , 3 , None ) n2 = ABR ( None , 2 , n3 ) n3 = ABR ( n0 , 1 , n2 ) Dans tout le code, None correspondra \u00e0 un arbre vide. La classe ABR dispose aussi d\u2019une m\u00e9thode de repr\u00e9sentation ( __repr__ ), qui affiche entre parenth\u00e8ses le contenu du sous arbre gauche, puis la cl\u00e9 de l\u2019arbre, et enfin le contenu du sous arbre droit. Elle s\u2019utilise en console de la mani\u00e8re suivante : >>> abr1 (( None , 0 , None ), 1 ,( None , 2 ,( None , 3 , None ))) \u00c9crire une fonction r\u00e9cursive ajoute(cle, a) qui prend en param\u00e8tres une cl\u00e9 cle et un arbre binaire de recherche a , et qui renvoie un arbre binaire de recherche dans lequel cle a \u00e9t\u00e9 ins\u00e9r\u00e9e. Dans le cas o\u00f9 cle est d\u00e9j\u00e0 pr\u00e9sente dans a , la fonction renvoie l\u2019arbre a inchang\u00e9. R\u00e9sultats \u00e0 obtenir : >>> a = ajoute ( 4 , abr1 ) >>> a (( None , 0 , None ), 1 ,( None , 2 ,( None , 3 ,( None , 4 , None )))) >>> ajoute ( - 5 , abr1 ) ((( None , - 5 , None ), 0 , None ), 1 ,( None , 2 ,( None , 3 , None ))) >>> ajoute ( 2 , abr1 ) (( None , 0 , None ), 1 ,( None , 2 ,( None , 3 , None ))) 1 2 3 4 5 6 7 8 def ajoute ( cle , a ): if a is None : a = ABR ( None , cle , None ) elif cle > a . cle : a . droit = ajoute ( cle , a . droit ) elif cle < a . cle : a . gauche = ajoute ( cle , a . gauche ) return a Exercice 12.2 \u00b6 Exercice 12.2 \u00c9nonc\u00e9 Correction Sources Markdown On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On souhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle mani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe pas la capacit\u00e9 c de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour ranger cet ensemble d\u2019objets. Pour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer chacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible. Par exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 c = 5 un ensemble de trois objets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste [1, 5, 2] , on proc\u00e8de de la fa\u00e7on suivante : Le premier objet, de masse 1, va dans une premi\u00e8re boite. Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le premier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet objet dans une deuxi\u00e8me bo\u00eete. Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete. On a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 c = 5 pour ranger les 3 objets. Compl\u00e9ter la fonction Python empaqueter(liste_masses, c) suivante pour qu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 c n\u00e9cessaires pour empaqueter un ensemble d\u2019objets dont les masses sont contenues dans la liste liste_masses . 1 2 3 4 5 6 7 8 9 10 11 12 def empaqueter ( liste_masses , c ): n = len ( liste_masses ) nb_boites = 0 boites = [ 0 ] * n for masse in ... : i = 0 while i <= nb_boites and boites [ i ] + ... > C : i = i + 1 if i == nb_boites + 1 : ... boites [ i ] = ... return ... Tester ensuite votre fonction : >>> empaqueter ([ 7 , 6 , 3 , 4 , 8 , 5 , 9 , 2 ], 11 ) 5 1 2 3 4 5 6 7 8 9 10 11 12 def empaqueterR ( liste_masses , c ): n = len ( liste_masses ) nb_boites = 0 boites = [ 0 ] * n for masse in liste_masses : i = 0 while i <= nb_boites and boites [ i ] + masse > c : i = i + 1 if i == nb_boites + 1 : nb_boites = nb_boites + 1 boites [ i ] = boites [ i ] + masse return nb_boites + 1 On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On souhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle mani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe pas la capacit\u00e9 `c` de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour ranger cet ensemble d\u2019objets. Pour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer chacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible. Par exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 `c = 5` un ensemble de trois objets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste `[1, 5, 2]` , on proc\u00e8de de la fa\u00e7on suivante : - Le premier objet, de masse 1, va dans une premi\u00e8re boite. - Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le premier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet objet dans une deuxi\u00e8me bo\u00eete. - Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete. On a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 `c = 5` pour ranger les 3 objets. Compl\u00e9ter la fonction Python `empaqueter(liste_masses, c)` suivante pour qu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 c n\u00e9cessaires pour empaqueter un ensemble d\u2019objets dont les masses sont contenues dans la liste `liste_masses` . ```python linenums='1' def empaqueter(liste_masses, c): n = len(liste_masses) nb_boites = 0 boites = [0]*n for masse in ... : i = 0 while i <= nb_boites and boites[i] + ... > C: i = i + 1 if i == nb_boites + 1: ... boites[i] = ... return ... Tester ensuite votre fonction : >>> empaqueter ([ 7 , 6 , 3 , 4 , 8 , 5 , 9 , 2 ], 11 ) 5 ``` \u25b6 Sujet 13 \u00b6 Exercice 13.1 \u00b6 Exercice 13.1 \u00c9nonc\u00e9 Correction \u00c9crire en langage Python une fonction recherche prenant comme param\u00e8tres une variable a de type num\u00e9rique ( float ou int ) et un tableau tab (type list ) et qui renvoie le nombre d'occurrences de a dans tab . Exemples : >>> recherche ( 5 , []) 0 >>> recherche ( 5 , [ - 2 , 3 , 4 , 8 ]) 0 >>> recherche ( 5 , [ - 2 , 3 , 1 , 5 , 3 , 7 , 4 ]) 1 >>> recherche ( 5 , [ - 2 , 5 , 3 , 5 , 4 , 5 ]) 3 1 2 3 4 5 6 def recherche ( a , tab ): nb = 0 for element in tab : if element == a : nb += 1 return nb Exercice 13.2 \u00b6 Exercice 13.2 \u00c9nonc\u00e9 Correction La fonction rendu_monnaie prend en param\u00e8tres deux nombres entiers positifs somme_due et somme_versee et elle permet de proc\u00e9der au rendu de monnaie de la diff\u00e9rence somme_versee \u2013 somme_due pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de la zone Euro. On utilise pour cela un algorithme glouton qui commence par rendre le maximum de pi\u00e8ces de plus grandes valeurs et ainsi de suite. Par la suite, on assimilera les billets \u00e0 des pi\u00e8ces. La fonction rendu_monnaie renvoie un tableau de type list contenant les pi\u00e8ces qui composent le rendu. Toutes les sommes sont exprim\u00e9es en euros. Les valeurs possibles pour les pi\u00e8ces sont donc [1, 2, 5, 10, 20, 50, 100, 200] . Ainsi, l\u2019instruction rendu_monnaie(452, 500) renvoie le tableau [20, 20, 5, 2, 1] . En effet, la somme \u00e0 rendre est de 48 euros soit 20 + 20 + 5 + 2 + 1 . Le code de la fonction rendu_monnaie est donn\u00e9 ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 def rendu_monnaie ( somme_due , somme_versee ): pieces = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 ] rendu = ... a_rendre = ... i = len ( pieces ) - 1 while a_rendre > ... : if pieces [ i ] <= a_rendre : rendu . append ( ... ) a_rendre = ... else : i = ... return rendu Compl\u00e9ter ce code et le tester : >>> rendu_monnaie ( 700 , 700 ) [] >>> rendu_monnaie ( 102 , 500 ) [ 200 , 100 , 50 , 20 , 20 , 5 , 2 , 1 ] 1 2 3 4 5 6 7 8 9 10 11 12 def rendu_monnaie ( somme_due , somme_versee ): pieces = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 ] rendu = [] a_rendre = somme_versee - somme_due i = len ( pieces ) - 1 while a_rendre > 0 : if pieces [ i ] <= a_rendre : rendu . append ( pieces [ i ]) a_rendre = a_rendre - pieces [ i ] else : i = i - 1 return rendu \u25b6 Sujet 14 \u00b6 Exercice 14.1 \u00b6 Exercice 14.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction recherche qui prend en param\u00e8tres elt un nombre entier et tab un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de elt dans tab si elt est dans tab et -1 sinon. Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions. Exemples : >>> recherche ( 1 , [ 2 , 3 , 4 ]) - 1 >>> recherche ( 1 , [ 10 , 12 , 1 , 56 ]) 2 >>> recherche ( 50 , [ 1 , 50 , 1 ]) 1 >>> recherche ( 15 , [ 8 , 9 , 10 , 15 ]) 3 1 2 3 4 5 6 7 8 9 10 def recherche ( elt , tab ): ''' renvoie l\u2019indice de la premi\u00e8re occurrence de elt dans tab si elt est dans tab et -1 sinon. ''' assert tab != [], \"le tableau est vide\" for i in range ( len ( tab )): if tab [ i ] == elt : return i return - 1 Exercice 14.2 \u00b6 Exercice 14.2 \u00c9nonc\u00e9 Correction On consid\u00e8re la fonction insere ci-dessous qui prend en argument un entier a et un tableau tab d'entiers tri\u00e9s par ordre croissant. Cette fonction cr\u00e9e et renvoie un nouveau tableau \u00e0 partir de celui fourni en param\u00e8tre en y ins\u00e9rant la valeur a de sorte que le tableau renvoy\u00e9 soit encore tri\u00e9 par ordre croissant. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes Python. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def insere ( a , tab ): \"\"\" Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list) tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le nouveau tableau. \"\"\" l = list ( tab ) #l contient les m\u00eames \u00e9l\u00e9ments que tab l . append ( a ) i = ... while a < ... and i >= 0 : l [ i + 1 ] = ... l [ i ] = a i = ... return l Compl\u00e9ter la fonction insere ci-dessus. Exemples : >>> insere ( 3 , [ 1 , 2 , 4 , 5 ]) [ 1 , 2 , 3 , 4 , 5 ] >>> insere ( 30 , [ 1 , 2 , 7 , 12 , 14 , 25 ]) [ 1 , 2 , 7 , 12 , 14 , 25 , 30 ] >>> insere ( 1 , [ 2 , 3 , 4 ]) [ 1 , 2 , 3 , 4 ] >>> insere ( 1 , []) [ 1 ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def insere ( a , tab ): \"\"\" Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list) tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le nouveau tableau. \"\"\" l = list ( tab ) #l contient les m\u00eames \u00e9l\u00e9ments que tab l . append ( a ) i = len ( l ) - 2 while a < l [ i ] and i >= 0 : l [ i + 1 ] = l [ i ] l [ i ] = a i = i - 1 return l \u25b6 Sujet 15 \u00b6 Exercice 15.1 \u00b6 Exercice 15.1 \u00c9nonc\u00e9 Correction Source Markdown On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : t_moy = [ 14.9 , 13.3 , 13.1 , 12.5 , 13.0 , 13.6 , 13.7 ] annees = [ 2013 , 2014 , 2015 , 2016 , 2017 , 2018 , 2019 ] \u00c9crire la fonction mini qui prend en param\u00e8tres un tableau releve des relev\u00e9s et un tableau date des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante. On suppose que la temp\u00e9rature minimale est atteinte une seule fois. Exemple : >>> mini ( t_moy , annees ) ( 12.5 , 2016 ) 1 2 3 4 5 6 7 8 9 10 11 t_moy = [ 14.9 , 13.3 , 13.1 , 12.5 , 13.0 , 13.6 , 13.7 ] annees = [ 2013 , 2014 , 2015 , 2016 , 2017 , 2018 , 2019 ] def mini ( releve , date ): temp_mini = releve [ 0 ] date_mini = date [ 0 ] for i in range ( len ( releve )): if releve [ i ] < temp_mini : temp_mini = releve [ i ] date_mini = date [ i ] return temp_mini , date_mini On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : ```python t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7] annees = [2013, 2014, 2015, 2016, 2017, 2018, 2019] ``` \u00c9crire la fonction `mini` qui prend en param\u00e8tres un tableau `releve` des relev\u00e9s et un tableau `date` des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante. On suppose que la temp\u00e9rature minimale est atteinte une seule fois. Exemple : ```python >>> mini(t_moy, annees) (12.5, 2016) ``` Exercice 15.2 \u00b6 Exercice 15.2 \u00c9nonc\u00e9 Correction Sources Markdown Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob , radar , et non sont des mots palindromes. De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543. L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome. Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction est_nbre_palindrome s\u2019appuiera sur la fonction est_palindrome qui elle-m\u00eame s\u2019appuiera sur la fonction inverse_chaine . La fonction inverse_chaine inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res chaine et renvoie la cha\u00eene invers\u00e9e. La fonction est_palindrome teste si une chaine de caract\u00e8res chaine est un palindrome. Elle renvoie True si c\u2019est le cas et False sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente. La fonction est_nbre_palindrome teste si un nombre nbre est un palindrome. Elle renvoie True si c\u2019est le cas et False sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente. Compl\u00e9ter le code des trois fonctions ci-dessous. 1 2 3 4 5 6 7 8 9 10 11 12 13 def inverse_chaine ( chaine ): result = ... for caractere in chaine : result = ... return result def est_palindrome ( chaine ): inverse = inverse_chaine ( chaine ) return ... def est_nbre_palindrome ( nbre ): chaine = ... return est_palindrome ( chaine ) Exemples : >>> inverse_chaine ( 'bac' ) 'cab' >>> est_palindrome ( 'NSI' ) False >>> est_palindrome ( 'ISN-NSI' ) True >>> est_nbre_palindrome ( 214312 ) False >>> est_nbre_palindrome ( 213312 ) True 1 2 3 4 5 6 7 8 9 10 11 12 13 def inverse_chaine ( chaine ): result = '' for caractere in chaine : result = caractere + result return result def est_palindrome ( chaine ): inverse = inverse_chaine ( chaine ) return chaine == inverse def est_nbre_palindrome ( nbre ): chaine = str ( nbre ) return est_palindrome ( chaine ) Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : *bob* , *radar* , et *non* sont des mots palindromes. De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543. L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome. Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction `est_nbre_palindrome` s\u2019appuiera sur la fonction `est_palindrome` qui elle-m\u00eame s\u2019appuiera sur la fonction `inverse_chaine` . La fonction `inverse_chaine` inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res `chaine` et renvoie la cha\u00eene invers\u00e9e. La fonction `est_palindrome` teste si une chaine de caract\u00e8res `chaine` est un palindrome. Elle renvoie `True` si c\u2019est le cas et `False` sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente. La fonction `est_nbre_palindrome` teste si un nombre `nbre` est un palindrome. Elle renvoie `True` si c\u2019est le cas et `False` sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente. Compl\u00e9ter le code des trois fonctions ci-dessous. ```python linenums='1' def inverse_chaine(chaine): result = ... for caractere in chaine: result = ... return result def est_palindrome(chaine): inverse = inverse_chaine(chaine) return ... def est_nbre_palindrome(nbre): chaine = ... return est_palindrome(chaine) Exemples : >>> inverse_chaine ( 'bac' ) 'cab' >>> est_palindrome ( 'NSI' ) False >>> est_palindrome ( 'ISN-NSI' ) True >>> est_nbre_palindrome ( 214312 ) False >>> est_nbre_palindrome ( 213312 ) True ``` \u25b6 Sujet 16 \u00b6 Exercice 16.1 \u00b6 Exercice 16.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction recherche_indices_classement qui prend en param\u00e8tres un entier elt et une liste d\u2019entiers tab , et qui renvoie trois listes : la premi\u00e8re liste contient les indices des valeurs de la liste tab strictement inf\u00e9rieures \u00e0 elt ; la deuxi\u00e8me liste contient les indices des valeurs de la liste tab \u00e9gales \u00e0 elt ; la troisi\u00e8me liste contient les indices des valeurs de la liste tab strictement sup\u00e9rieures \u00e0 elt . Exemples : >>> recherche_indices_classement ( 3 , [ 1 , 3 , 4 , 2 , 4 , 6 , 3 , 0 ]) ([ 0 , 3 , 7 ], [ 1 , 6 ], [ 2 , 4 , 5 ]) >>> recherche_indices_classement ( 3 , [ 1 , 4 , 2 , 4 , 6 , 0 ]) ([ 0 , 2 , 5 ], [], [ 1 , 3 , 4 ]) >>> recherche_indices_classement ( 3 , [ 1 , 1 , 1 , 1 ]) ([ 0 , 1 , 2 , 3 ], [], []) >>> recherche_indices_classement ( 3 , []) ([], [], []) 1 2 3 4 5 6 7 8 9 10 11 12 def recherche_indices_classement ( elt , tab ): ind_inf = [] ind_egal = [] ind_sup = [] for i in range ( len ( tab )): if tab [ i ] < elt : ind_inf . append ( i ) elif tab [ i ] > elt : ind_sup . append ( i ) else : ind_egal . append ( i ) return ( ind_inf , ind_egal , ind_sup ) Exercice 16.2 \u00b6 Exercice 16.2 \u00c9nonc\u00e9 Correction Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire : les clefs sont les noms des \u00e9l\u00e8ves ; les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves sous forme de cha\u00eene de caract\u00e8res et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients dans une liste. Avec : resultats = { 'Dupont' : { 'DS1' : [ 15.5 , 4 ], 'DM1' : [ 14.5 , 1 ], 'DS2' : [ 13 , 4 ], 'PROJET1' : [ 16 , 3 ], 'DS3' : [ 14 , 4 ] }, 'Durand' : { 'DS1' : [ 6 , 4 ], 'DM1' : [ 14.5 , 1 ], 'DS2' : [ 8 , 4 ], 'PROJET1' : [ 9 , 3 ], 'IE1' : [ 7 , 2 ], 'DS3' : [ 8 , 4 ], 'DS4' :[ 15 , 4 ] } } L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4. Le professeur cr\u00e9e une fonction moyenne qui prend en param\u00e8tre le nom d\u2019un de ses \u00e9l\u00e8ves et renvoie sa moyenne arrondie au dixi\u00e8me. Compl\u00e9ter le code du professeur ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 def moyenne ( nom , dico_result ): if nom in ... : notes = dico_result [ nom ] total_points = ... total_coefficients = ... for ... in notes . values (): note , coefficient = valeurs total_points = total_points + ... * coefficient total_coefficients = ... + coefficient return round ( ... / total_coefficients , 1 ) else : return - 1 1 2 3 4 5 6 7 8 9 10 11 12 def moyenne ( nom , dico_result ): if nom in dico_result : notes = dico_result [ nom ] total_points = 0. total_coefficients = 0 for valeurs in notes . values (): note , coefficient = valeurs total_points = total_points + note * coefficient total_coefficients = total_coefficients + coefficient return round ( total_points / total_coefficients , 1 ) else : return - 1 \u25b6 Sujet 17 \u00b6 Exercice 17.1 \u00b6 Exercice 17.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction moyenne(liste_notes) qui renvoie la moyenne pond\u00e9r\u00e9e des r\u00e9sultats contenus dans la liste liste_notes , non vide, donn\u00e9e en param\u00e8tre. Cette liste contient des couples (note, coefficient) dans lesquels : note est un nombre de type flottant ( float ) compris entre 0 et 20 ; coefficient est un nombre entier strictement positif. Ainsi l\u2019expression moyenne([(15,2),(9,1),(12,3)]) devra renvoyer 12.5 . \\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\) 1 2 3 4 5 6 7 8 9 def moyenne ( liste_notes ): somme_notes = 0 somme_coeffs = 0 for devoir in liste_notes : note = devoir [ 0 ] coeff = devoir [ 1 ] somme_notes += note * coeff somme_coeffs += coeff return somme_notes / somme_coeffs Exercice 17.2 \u00b6 Exercice 17.2 \u00c9nonc\u00e9 Correction On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal (Figure 1). Dans le triangle de Pascal, chaque ligne commence et se termine par le nombre 1. Comme l\u2019illustre la Figure 2, on additionne deux valeurs successives d\u2019une ligne pour obtenir la valeur qui se situe sous la deuxi\u00e8me valeur. Compl\u00e9ter la fonction pascal ci-apr\u00e8s prenant en param\u00e8tre un entier n sup\u00e9rieur ou \u00e9gal \u00e0 2. Cette fonction doit renvoyer une liste correspondant au triangle de Pascal de la ligne 0 \u00e0 la ligne n . Le tableau repr\u00e9sentant le triangle de Pascal sera contenu dans la variable triangle . 1 2 3 4 5 6 7 8 9 def pascal ( n ): triangle = [[ 1 ]] for k in range ( 1 , ... ): ligne_k = [ ... ] for i in range ( 1 , k ): ligne_k . append ( triangle [ ... ][ i - 1 ] + triangle [ ... ][ ... ]) ligne_k . append ( ... ) triangle . append ( ligne_k ) return triangle Pour n = 4 , voici ce qu'on devra obtenir : >>> pascal ( 4 ) [[ 1 ], [ 1 , 1 ], [ 1 , 2 , 1 ], [ 1 , 3 , 3 , 1 ], [ 1 , 4 , 6 , 4 , 1 ]] Pour n = 5 , voici ce qu'on devra obtenir : >>> pascal ( 5 ) [[ 1 ], [ 1 , 1 ], [ 1 , 2 , 1 ], [ 1 , 3 , 3 , 1 ], [ 1 , 4 , 6 , 4 , 1 ], [ 1 , 5 , 10 , 10 , 5 , 1 ]] 1 2 3 4 5 6 7 8 9 def pascal ( n ): triangle = [[ 1 ]] for k in range ( 1 , n + 1 ): ligne_k = [ 1 ] for i in range ( 1 , k ): ligne_k . append ( triangle [ k - 1 ][ i - 1 ] + triangle [ k - 1 ][ i ]) ligne_k . append ( 1 ) triangle . append ( ligne_k ) return triangle \u25b6 Sujet 18 \u00b6 Exercice 18.1 \u00b6 Exercice 18.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction max_et_indice qui prend en param\u00e8tre une liste non vide tab de nombres entiers et qui renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi que l\u2019indice de sa premi\u00e8re apparition dans cette liste. L\u2019utilisation de la fonction native max n\u2019est pas autoris\u00e9e. Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions. Exemples : >>> max_et_indice ([ 1 , 5 , 6 , 9 , 1 , 2 , 3 , 7 , 9 , 8 ]) ( 9 , 3 ) >>> max_et_indice ([ - 2 ]) ( - 2 , 0 ) >>> max_et_indice ([ - 1 , - 1 , 3 , 3 , 3 ]) ( 3 , 2 ) >>> max_et_indice ([ 1 , 1 , 1 , 1 ]) ( 1 , 0 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def max_et_indice ( tab ): ''' renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi que l\u2019indice de sa premi\u00e8re apparition dans cette liste. ''' assert tab != [], 'le tableau est vide' val_max = tab [ 0 ] ind_max = 0 for i in range ( len ( tab )): if tab [ i ] > val_max : val_max = tab [ i ] ind_max = i return ( val_max , ind_max ) Exercice 18.2 \u00b6 Exercice 18.2 \u00c9nonc\u00e9 Correction L\u2019ordre des g\u00e8nes sur un chromosome est repr\u00e9sent\u00e9 par un tableau ordre de n cases d\u2019entiers distincts deux \u00e0 deux et compris entre 1 et n . Par exemple, ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9] dans le cas n = 9 . On dit qu\u2019il y a un point de rupture dans ordre dans chacune des situations suivantes : la premi\u00e8re valeur de ordre n\u2019est pas 1 ; l\u2019\u00e9cart entre deux g\u00e8nes cons\u00e9cutifs n\u2019est pas \u00e9gal \u00e0 1 ; la derni\u00e8re valeur de ordre n\u2019est pas n. Par exemple, si ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9] avec n = 9 , on a un point de rupture au d\u00e9but car 5 est diff\u00e9rent de 1 un point de rupture entre 3 et 6 (l\u2019\u00e9cart est de 3) un point de rupture entre 7 et 2 (l\u2019\u00e9cart est de 5) un point de rupture entre 1 et 8 (l\u2019\u00e9cart est de 7) Il y a donc 4 points de rupture. Compl\u00e9ter les fonctions Python est_un_ordre et nombre_points_rupture propos\u00e9es \u00e0 la page suivante pour que : la fonction est_un_ordre renvoie True si le tableau pass\u00e9 en param\u00e8tre repr\u00e9sente bien un ordre de g\u00e8nes de chromosome et False sinon ; la fonction nombre_points_rupture renvoie le nombre de points de rupture d\u2019un tableau pass\u00e9 en param\u00e8tre repr\u00e9sentant l\u2019ordre de g\u00e8nes d\u2019un chromosome. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def est_un_ordre ( tab ): ''' Renvoie True si tab est de longueur n et contient tous les entiers de 1 \u00e0 n, False sinon ''' for i in range ( 1 , ... ): if ... : return False return True def nombre_points_rupture ( ordre ): ''' Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre de g\u00e8nes de chromosome ''' assert ... # ordre n'est pas un ordre de g\u00e8nes n = len ( ordre ) nb = 0 if ordre [ ... ] != 1 : # le premier n'est pas 1 nb = nb + 1 i = 0 while i < ... : if ... not in [ - 1 , 1 ]: # l'\u00e9cart n'est pas 1 nb = nb + 1 i = i + 1 if ordre [ ... ] != n : # le dernier n'est pas n nb = nb + 1 return nb Exemples : >>> est_un_ordre ([ 1 , 6 , 2 , 8 , 3 , 7 ]) False >>> est_un_ordre ([ 5 , 4 , 3 , 6 , 7 , 2 , 1 , 8 , 9 ]) True >>> nombre_points_rupture ([ 5 , 4 , 3 , 6 , 7 , 2 , 1 , 8 , 9 ]) 4 >>> nombre_points_rupture ([ 1 , 2 , 3 , 4 , 5 ]) 0 >>> nombre_points_rupture ([ 1 , 6 , 2 , 8 , 3 , 7 , 4 , 5 ]) 7 >>> nombre_points_rupture ([ 2 , 1 , 3 , 4 ]) 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def est_un_ordre ( tab ): ''' Renvoie True si tab est de longueur n et contient tous les entiers de 1 \u00e0 n, False sinon ''' for i in range ( 1 , len ( tab ) + 1 ): if i not in tab : return False return True def nombre_points_rupture ( ordre ): ''' Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre de g\u00e8nes de chromosome ''' assert est_un_ordre ( ordre ) # ordre n'est pas un ordre de g\u00e8nes n = len ( ordre ) nb = 0 if ordre [ 0 ] != 1 : # le premier n'est pas 1 nb = nb + 1 i = 0 while i < n - 1 : if ordre [ i + 1 ] - ordre [ i ] not in [ - 1 , 1 ]: # l'\u00e9cart n'est pas 1 nb = nb + 1 i = i + 1 if ordre [ n - 1 ] != n : # le dernier n'est pas n nb = nb + 1 return nb \u25b6 Sujet 19 \u00b6 Exercice 19.1 \u00b6 Exercice 19.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction recherche qui prend en param\u00e8tres un tableau tab de nombres entiers tri\u00e9s par ordre croissant et un nombre entier n , et qui effectue une recherche dichotomique du nombre entier n dans le tableau non vide tab . Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, -1 sinon. Exemples : >>> recherche ([ 2 , 3 , 4 , 5 , 6 ], 5 ) 3 >>> recherche ([ 2 , 3 , 4 , 6 , 7 ], 5 ) - 1 1 2 3 4 5 6 7 8 9 10 11 12 def recherche ( tab , n ): ind_debut = 0 ind_fin = len ( tab ) - 1 while ind_debut <= ind_fin : ind_milieu = ( ind_debut + ind_fin ) // 2 if tab [ ind_milieu ] == n : return ind_milieu elif tab [ ind_milieu ] < n : ind_debut = ind_milieu + 1 else : ind_fin = ind_milieu - 1 return - 1 Exercice 19.2 \u00b6 Exercice 19.2 \u00c9nonc\u00e9 Correction Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019 ...) ne sont pas cod\u00e9s. La fonction position_alphabet ci-dessous prend en param\u00e8tre un caract\u00e8re lettre et renvoie la position de lettre dans la cha\u00eene de caract\u00e8res ALPHABET s\u2019il s\u2019y trouve. La fonction cesar prend en param\u00e8tre une cha\u00eene de caract\u00e8res message et un nombre entier decalage et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage decalage . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' def position_alphabet ( lettre ): return ord ( lettre ) - ord ( 'A' ) def cesar ( message , decalage ): resultat = '' for ... in message : if 'A' <= c and c <= 'Z' : indice = ( ... ) % 26 resultat = resultat + ALPHABET [ indice ] else : resultat = ... return resultat Compl\u00e9ter la fonction cesar . Exemples : >>> cesar ( 'BONJOUR A TOUS. VIVE LA MATIERE NSI !' , 4 ) 'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !' >>> cesar ( 'GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !' , - 5 ) 'BONJOUR A TOUS. VIVE LA MATIERE NSI !' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' def position_alphabet ( lettre ): return ord ( lettre ) - ord ( 'A' ) def cesar ( message , decalage ): resultat = '' for c in message : if 'A' <= c and c <= 'Z' : indice = ( position_alphabet ( c ) + decalage ) % 26 resultat = resultat + ALPHABET [ indice ] else : resultat = resultat + c return resultat \u25b6 Sujet 20 \u00b6 Exercice 20.1 \u00b6 Exercice 20.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction ajoute_dictionnaires qui prend en param\u00e8tres deux dictionnaires d1 et d2 dont les cl\u00e9s sont des nombres et renvoie le dictionnaire d d\u00e9fini de la fa\u00e7on suivante : Les cl\u00e9s de d sont celles de d1 et celles de d2 r\u00e9unies. Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires d1 et d2 , sa valeur associ\u00e9e dans le dictionnaire d est la somme de ses valeurs dans les dictionnaires d1 et d2 . Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e dans le dictionnaire d est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est pr\u00e9sente. Exemples : >>> ajoute_dictionnaires ({ 1 : 5 , 2 : 7 }, { 2 : 9 , 3 : 11 }) { 1 : 5 , 2 : 16 , 3 : 11 } >>> ajoute_dictionnaires ({}, { 2 : 9 , 3 : 11 }) { 2 : 9 , 3 : 11 } >>> ajoute_dictionnaires ({ 1 : 5 , 2 : 7 }, {}) { 1 : 5 , 2 : 7 } 1 2 3 4 5 6 7 def ajoute_dictionnaires ( d1 , d2 ): for cle in d2 : if cle in d1 : d1 [ cle ] += d2 [ cle ] else : d1 [ cle ] = d2 [ cle ] return d1 Exercice 20.2 \u00b6 Exercice 20.2 \u00c9nonc\u00e9 Correction On consid\u00e8re une piste carr\u00e9e qui contient 4 cases par c\u00f4t\u00e9. Les cases sont num\u00e9rot\u00e9es de 0 inclus \u00e0 12 exclu comme ci-dessous : L\u2019objectif de l\u2019exercice est d\u2019impl\u00e9menter le jeu suivant : Au d\u00e9part, le joueur place son pion sur la case 0. A chaque coup, il lance un d\u00e9 \u00e9quilibr\u00e9 \u00e0 six faces et avance son pion d\u2019autant de cases que le nombre indiqu\u00e9 par le d\u00e9 (entre 1 et 6 inclus) dans le sens des aiguilles d\u2019une montre. Par exemple, s\u2019il obtient 2 au premier lancer, il pose son pion sur la case 2 puis s\u2019il obtient 6 au deuxi\u00e8me lancer, il le pose sur la case 8, puis s\u2019il obtient \u00e0 nouveau 6, il pose le pion sur la case 2. Le jeu se termine lorsque le joueur a pos\u00e9 son pion sur toutes les cases de la piste. Compl\u00e9ter la fonction nbre_coups ci-dessous de sorte qu\u2019elle renvoie le nombre de lancers al\u00e9atoires n\u00e9cessaires pour terminer le jeu. Proposer ensuite quelques tests pour en v\u00e9rifier le fonctionnement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from random import randint def nbre_coups (): n = ... cases_vues = [ 0 ] case_en_cours = 0 nbre_cases = 12 while ... < ... : x = randint ( 1 , 6 ) case_en_cours = ( case_en_cours + ... ) % ... if ... : cases_vues . append ( case_en_cours ) n = ... return n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from random import randint def nbre_coups (): n = 0 cases_vues = [ 0 ] case_en_cours = 0 nbre_cases = 12 while len ( cases_vues ) < nbre_cases : x = randint ( 1 , 6 ) case_en_cours = ( case_en_cours + x ) % nbre_cases if case_en_cours not in cases_vues : cases_vues . append ( case_en_cours ) n = n + 1 return n \u25b6 Sujet 21 \u00b6 Exercice 21.1 \u00b6 Exercice 21.1 \u00c9nonc\u00e9 Correction Le codage par diff\u00e9rence ( delta encoding en anglais) permet de compresser un tableau de donn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la donn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches. Programmer la fonction delta(liste) qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique. Exemples : >>> delta ([ 1000 , 800 , 802 , 1000 , 1003 ]) [ 1000 , - 200 , 2 , 198 , 3 ] >>> delta ([ 42 ]) [ 42 ] 1 2 3 4 5 def delta ( tab ): diff = [ tab [ 0 ]] for i in range ( 1 , len ( tab )): diff . append ( tab [ i ] - tab [ i - 1 ]) return diff Exercice 21.2 \u00b6 Exercice 21.2 \u00c9nonc\u00e9 Correction Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212, \u00d7, \u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien. En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement : \\[(3 \\times (8 + 7)) \u2212 (2 + 1)\\] La classe Noeud ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire. Compl\u00e9ter la fonction r\u00e9cursive expression_infixe qui prend en param\u00e8tre un objet de la classe Noeud et qui renvoie l\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre binaire pass\u00e9 en param\u00e8tre, sous forme d\u2019une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses. R\u00e9sultat attendu avec l\u2019arbre ci-dessus : >>> e = Noeud ( Noeud ( Noeud ( None , 3 , None ), '*' , Noeud ( Noeud ( None , 8 , None ), '+' , Noeud ( None , 7 , None ))), '-' , Noeud ( Noeud ( None , 2 , None ), '+' , Noeud ( None , 1 , None ))) >>> expression_infixe ( e ) '((3*(8+7))-(2+1))' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Noeud : ''' classe impl\u00e9mentant un noeud d'arbre binaire ''' def __init__ ( self , g , v , d ): ''' un objet Noeud poss\u00e8de 3 attributs : - gauche : le sous-arbre gauche, - valeur : la valeur de l'\u00e9tiquette, - droit : le sous-arbre droit. ''' self . gauche = g self . valeur = v self . droit = d def __str__ ( self ): ''' renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res ''' return str ( self . valeur ) def est_une_feuille ( self ): ''' renvoie True si et seulement si le noeud est une feuille ''' return self . gauche is None and self . droit is None def expression_infixe ( e ): s = ... if e . gauche is not None : s = '(' + s + expression_infixe ( ... ) s = s + ... if ... is not None : s = s + ... + ... return s 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Noeud : ''' classe impl\u00e9mentant un noeud d'arbre binaire ''' def __init__ ( self , g , v , d ): ''' un objet Noeud poss\u00e8de 3 attributs : - gauche : le sous-arbre gauche, - valeur : la valeur de l'\u00e9tiquette, - droit : le sous-arbre droit. ''' self . gauche = g self . valeur = v self . droit = d def __str__ ( self ): ''' renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res ''' return str ( self . valeur ) def est_une_feuille ( self ): ''' renvoie True si et seulement si le noeud est une feuille ''' return self . gauche is None and self . droit is None def expression_infixe ( e ): s = '' if e . gauche is not None : s = '(' + s + expression_infixe ( e . gauche ) s = s + str ( e . valeur ) if e . droit is not None : s = s + expression_infixe ( e . droit ) + ')' return s \u25b6 Sujet 22 \u00b6 Exercice 22.1 \u00b6 Exercice 22.1 \u00c9nonc\u00e9 Correction On rappelle que : le nombre \\(a^n\\) est le nombre \\(a \\times a \\times a \\times \\dots \\times a\\) , o\u00f9 le facteur \\(a\\) appara\u00eet \\(n\\) fois, en langage Python, l\u2019instruction t[-1] permet d\u2019acc\u00e9der au dernier \u00e9l\u00e9ment du tableau t . Dans cet exercice, l\u2019op\u00e9rateur ** et la fonction pow ne sont pas autoris\u00e9s. Programmer en langage Python une fonction liste_puissances qui prend en argument un nombre entier a , un entier strictement positif n et qui renvoie la liste de ses puissances \\(\\rm{[a^1, a^2, ..., a^n]}\\) . Programmer \u00e9galement une fonction liste_puisssances_borne qui prend en argument un nombre entier a sup\u00e9rieur ou \u00e9gal \u00e0 2 et un entier borne , et qui renvoie la liste de ses puissances, \u00e0 l\u2019exclusion de \\(\\rm{a^0}\\) , strictement inf\u00e9rieures \u00e0 borne . Exemples : >>> liste_puissances ( 3 , 5 ) [ 3 , 9 , 27 , 81 , 243 ] >>> liste_puissances ( - 2 , 4 ) [ - 2 , 4 , - 8 , 16 ] >>> liste_puissances_borne ( 2 , 16 ) [ 2 , 4 , 8 ] >>> liste_puissances_borne ( 2 , 17 ) [ 2 , 4 , 8 , 16 ] >>> liste_puissances_borne ( 5 , 5 ) [] 1 2 3 4 5 6 7 8 9 10 11 12 13 def liste_puissances ( a , n ): puissances = [ a ] for i in range ( n - 1 ): puissances . append ( puissances [ - 1 ] * a ) return puissances def liste_puissances_borne ( a , borne ): lst = [] val = a while val < borne : lst . append ( val ) val = val * a return lst Exercice 22.2 \u00b6 Exercice 22.2 \u00c9nonc\u00e9 Correction On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous : A B C D E F G H I J K L M 1 2 3 4 5 6 7 8 9 10 11 12 13 N O P Q R S T U V W X Y Z 14 15 16 17 18 19 20 21 22 23 24 25 26 Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9 , obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9 , qui est la somme des codes de chacun de ses caract\u00e8res. Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9. Exemples : Pour le mot \"PAUL\" , le code concat\u00e9n\u00e9 est la cha\u00eene '1612112' , soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot \"PAUL\" n\u2019est pas parfait. Pour le mot \"ALAIN\" , le code concat\u00e9n\u00e9 est la cha\u00eene '1121914' , soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot \"ALAIN\" est parfait. Compl\u00e9ter la fonction est_parfait ci-dessous qui prend comme argument une cha\u00eene de caract\u00e8res mot (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9, le code additionn\u00e9 de mot , ainsi qu\u2019un bool\u00e9en qui indique si mot est parfait ou pas. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 dico = { \"A\" : 1 , \"B\" : 2 , \"C\" : 3 , \"D\" : 4 , \"E\" : 5 , \"F\" : 6 , \"G\" : 7 , \"H\" : 8 , \"I\" : 9 , \"J\" : 10 , \"K\" : 11 , \"L\" : 12 , \"M\" : 13 , \"N\" : 14 , \"O\" : 15 , \"P\" : 16 , \"Q\" : 17 , \"R\" : 18 , \"S\" : 19 , \"T\" : 20 , \"U\" : 21 , \"V\" : 22 , \"W\" : 23 , \"X\" : 24 , \"Y\" : 25 , \"Z\" : 26 } def est_parfait ( mot ): # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules) code_concatene = \"\" code_additionne = ... for c in mot : code_concatene = code_concatene + ... code_additionne = ... code_concatene = int ( code_concatene ) if ... : mot_est_parfait = True else : mot_est_parfait = False return code_additionne , code_concatene , mot_est_parfait Exemples : >>> est_parfait ( \"PAUL\" ) ( 50 , 1612112 , False ) >>> est_parfait ( \"ALAIN\" ) ( 37 , 1121914 , True ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 dico = { \"A\" : 1 , \"B\" : 2 , \"C\" : 3 , \"D\" : 4 , \"E\" : 5 , \"F\" : 6 , \"G\" : 7 , \"H\" : 8 , \"I\" : 9 , \"J\" : 10 , \"K\" : 11 , \"L\" : 12 , \"M\" : 13 , \"N\" : 14 , \"O\" : 15 , \"P\" : 16 , \"Q\" : 17 , \"R\" : 18 , \"S\" : 19 , \"T\" : 20 , \"U\" : 21 , \"V\" : 22 , \"W\" : 23 , \"X\" : 24 , \"Y\" : 25 , \"Z\" : 26 } def est_parfait ( mot ): # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules) code_concatene = \"\" code_additionne = 0 for c in mot : code_concatene = code_concatene + str ( dico [ c ]) code_additionne = code_additionne + dico [ c ] code_concatene = int ( code_concatene ) if code_concatene % code_additionne == 0 : mot_est_parfait = True else : mot_est_parfait = False return code_additionne , code_concatene , mot_est_parfait \u25b6 Sujet 23 \u00b6 Exercice 23.1 \u00b6 Exercice 23.1 \u00c9nonc\u00e9 Correction On consid\u00e8re des tables (des tableaux de dictionnaires) qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont 'nom' , 'espece' , 'age' , 'enclos' . Voici un exemple d'une telle table : animaux = [ { 'nom' : 'Medor' , 'espece' : 'chien' , 'age' : 5 , 'enclos' : 2 }, { 'nom' : 'Titine' , 'espece' : 'chat' , 'age' : 2 , 'enclos' : 5 }, { 'nom' : 'Tom' , 'espece' : 'chat' , 'age' : 7 , 'enclos' : 4 }, { 'nom' : 'Belle' , 'espece' : 'chien' , 'age' : 6 , 'enclos' : 3 }, { 'nom' : 'Mirza' , 'espece' : 'chat' , 'age' : 6 , 'enclos' : 5 }] Programmer une fonction selection_enclos qui : prend en param\u00e8tres : une table table_animaux contenant des enregistrements relatifs \u00e0 des animaux (comme dans l'exemple ci-dessus), un num\u00e9ro d'enclos num_enclos ; renvoie une table contenant les enregistrements de table_animaux dont l'attribut 'enclos' est num_enclos . Exemples avec la table animaux ci-dessus : >>> selection_enclos ( animaux , 5 ) [{ 'nom' : 'Titine' , 'espece' : 'chat' , 'age' : 2 , 'enclos' : 5 }, { 'nom' : 'Mirza' , 'espece' : 'chat' , 'age' : 6 , 'enclos' : 5 }] >>> selection_enclos ( animaux , 2 ) [{ 'nom' : 'Medor' , 'espece' : 'chien' , 'age' : 5 , 'enclos' : 2 }] >>> selection_enclos ( animaux , 7 ) [] 1 2 3 4 5 6 def selection_enclos ( table_animaux , num_enclos ): table = [] for animal in table_animaux : if animal [ 'enclos' ] == num_enclos : table . append ( animal ) return table Exercice 23.2 \u00b6 Exercice 23.2 \u00c9nonc\u00e9 Correction On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement trois fois et \u00e0 suivre, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab l'intrus \u00bb. Voici quelques exemples : tab_a = [ 3 , 3 , 3 , 9 , 9 , 9 , 1 , 1 , 1 , 7 , 2 , 2 , 2 , 4 , 4 , 4 , 8 , 8 , 8 , 5 , 5 , 5 ] #l'intrus est 7 tab_b = [ 8 , 5 , 5 , 5 , 9 , 9 , 9 , 18 , 18 , 18 , 3 , 3 , 3 ] #l'intrus est 8 tab_c = [ 5 , 5 , 5 , 1 , 1 , 1 , 0 , 0 , 0 , 6 , 6 , 6 , 3 , 8 , 8 , 8 ] #l'intrus est 3 On remarque qu'avec de tels tableaux : pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux, pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents. Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ : [ 3 , 3 , 3 , 9 , 9 , 9 , 1 , 1 , 1 , 7 , 2 , 2 , 2 , 4 , 4 , 4 , 8 , 8 , 8 , 5 , 5 , 5 ] ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 0 3 6 9 12 15 18 21 Dans des listes comme celles ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice i multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice i et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. Par exemple, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 12, on voit les valeurs 2 et 4 qui sont diff\u00e9rentes : l\u2019intrus est donc \u00e0 gauche de l\u2019indice 12 (indice 12 compris) En revanche, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 3, on voit les valeurs 9 et 9 qui sont identiques : l\u2019intrus est donc \u00e0 droite des indices 3-4-5, donc \u00e0 partir de l\u2019indice 6. Compl\u00e9ter la fonction r\u00e9cursive trouver_intrus propos\u00e9e page suivante qui met en \u0153uvre cet algorithme. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def trouver_intrus ( tab , g , d ): ''' Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d dans la liste tab o\u00f9 : tab v\u00e9rifie les conditions de l'exercice, g et d sont des multiples de 3. ''' if g == d : return ... else : nombre_de_triplets = ( d - g ) // ... indice = g + 3 * ( nombre_de_triplets // 2 ) if ... : return ... else : return ... Exemples : >>> trouver_intrus ([ 3 , 3 , 3 , 9 , 9 , 9 , 1 , 1 , 1 , 7 , 2 , 2 , 2 , 4 , 4 , 4 , 8 , 8 , 8 , 5 , 5 , 5 ], 0 , 21 ) 7 >>> trouver_intrus ([ 8 , 5 , 5 , 5 , 9 , 9 , 9 , 18 , 18 , 18 , 3 , 3 , 3 ], 0 , 12 ) 8 >>> trouver_intrus ([ 5 , 5 , 5 , 1 , 1 , 1 , 0 , 0 , 0 , 6 , 6 , 6 , 3 , 8 , 8 , 8 ], 0 , 15 ) 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def trouver_intrus ( tab , g , d ): ''' Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d dans la liste tab o\u00f9 : tab v\u00e9rifie les conditions de l'exercice, g et d sont des multiples de 3. ''' if g == d : return tab [ g ] else : nombre_de_triplets = ( d - g ) // 3 indice = g + 3 * ( nombre_de_triplets // 2 ) if tab [ indice ] != tab [ indice + 1 ] : return trouver_intrus ( tab , g , indice ) else : return trouver_intrus ( tab , indice + 3 , d ) \u25b6 Sujet 24 \u00b6 Exercice 24.1 \u00b6 Exercice 24.1 \u00c9nonc\u00e9 Correction Le nombre d\u2019occurrences d\u2019un caract\u00e8re dans une cha\u00eene de caract\u00e8re est le nombre d\u2019apparitions de ce caract\u00e8re dans la cha\u00eene. Exemples : le nombre d\u2019occurrences du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ; le nombre d\u2019occurrences du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ; le nombre d\u2019occurrences du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ; le nombre d\u2019occurrences du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2. On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res. Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant : {'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1} L\u2019ordre des clefs n\u2019a pas d\u2019importance. \u00c9crire une fonction nbr_occurrences prenant comme param\u00e8tre une cha\u00eene de caract\u00e8res chaine et renvoyant le dictionnaire des nombres d\u2019occurrences des caract\u00e8res de cette cha\u00eene. 1 2 3 4 5 6 7 8 def nbr_occurrences ( chaine ): nb_occ = {} for caractere in chaine : if caractere in nb_occ : nb_occ [ caractere ] += 1 else : nb_occ [ caractere ] = 1 return nb_occ Exercice 24.2 \u00b6 Exercice 24.2 \u00c9nonc\u00e9 Correction La fonction fusion prend deux listes lst1 , lst2 d\u2019entiers tri\u00e9es par ordre croissant et les fusionne en une liste tri\u00e9e lst12 qu\u2019elle renvoie. Le code Python de la fonction fusion est 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def fusion ( lst1 , lst2 ): n1 = len ( lst1 ) n2 = len ( lst2 ) lst12 = [ 0 ] * ( n1 + n2 ) i1 = 0 i2 = 0 i = 0 while i1 < n1 and ... : if lst1 [ i1 ] < lst2 [ i2 ]: lst12 [ i ] = ... i1 = ... else : lst12 [ i ] = lst2 [ i2 ] i2 = ... i += 1 while i1 < n1 : lst12 [ i ] = ... i1 = i1 + 1 i = ... while i2 < n2 : lst12 [ i ] = ... i2 = i2 + 1 i = ... return lst12 Compl\u00e9ter le code. Exemple : >>> fusion ([ 1 , 6 , 10 ],[ 0 , 7 , 8 , 9 ]) [ 0 , 1 , 6 , 7 , 8 , 9 , 10 ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def fusion ( lst1 , lst2 ): n1 = len ( lst1 ) n2 = len ( lst2 ) lst12 = [ 0 ] * ( n1 + n2 ) i1 = 0 i2 = 0 i = 0 while i1 < n1 and i2 < n2 : if lst1 [ i1 ] < lst2 [ i2 ]: lst12 [ i ] = lst1 [ i1 ] i1 = i1 + 1 else : lst12 [ i ] = lst2 [ i2 ] i2 = i2 + 1 i += 1 while i1 < n1 : lst12 [ i ] = lst1 [ i1 ] i1 = i1 + 1 i = i + 1 while i2 < n2 : lst12 [ i ] = lst2 [ i2 ] i2 = i2 + 1 i = i + 1 return lst12 \u25b6 Sujet 25 \u00b6 Exercice 25.1 \u00b6 Exercice 25.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction enumere qui prend en param\u00e8tre une liste L et renvoie un dictionnaire d dont les cl\u00e9s sont les \u00e9l\u00e9ments de L avec pour valeur associ\u00e9e la liste des indices de l\u2019\u00e9l\u00e9ment dans la liste L . Exemple : >>> enumere ([ 1 , 1 , 2 , 3 , 2 , 1 ]) { 1 : [ 0 , 1 , 5 ], 2 : [ 2 , 4 ], 3 : [ 3 ]} 1 2 3 4 5 6 7 8 def enumere ( L ): d = {} for i in range ( len ( L )): if L [ i ] in d : d [ L [ i ]] . append ( i ) else : d [ L [ i ]] = [ i ] return d Exercice 25.2 \u00b6 Exercice 25.2 \u00c9nonc\u00e9 Correction Un arbre binaire est impl\u00e9ment\u00e9 par la classe Arbre donn\u00e9e ci-dessous. Les attributs fg et fd prennent pour valeurs des instances de la classe Arbre ou None . 1 2 3 4 5 6 7 8 9 10 11 12 class Arbre : def __init__ ( self , etiquette ): self . v = etiquette self . fg = None self . fd = None def parcours ( arbre , liste ): if arbre != None : parcours ( arbre . fg , liste ) liste . append ( arbre . v ) parcours ( arbre . fd , liste ) return liste La fonction r\u00e9cursive parcours renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance arbre dans l\u2019ordre du parcours en profondeur infixe \u00e0 partir d\u2019une liste vide pass\u00e9e en argument. Compl\u00e9ter le code de la fonction insere qui ins\u00e8re un n\u0153ud d\u2019\u00e9tiquette cle en feuille de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance arbre selon la sp\u00e9cification indiqu\u00e9e et de fa\u00e7on que l\u2019arbre ainsi compl\u00e9t\u00e9 soit encore un arbre binaire de recherche. Tester ensuite ce code en utilisant la fonction parcours et en ins\u00e9rant successivement des n\u0153uds d\u2019\u00e9tiquette 1, 4, 6 et 8 dans l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci- dessous : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def insere ( arbre , cle ): \"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente un arbre binaire de recherche. \"\"\" if ... : if ... : insere ( arbre . fg , cle ) else : arbre . fg = Arbre ( cle ) else : if ... : insere ( arbre . fd , cle ) else : arbre . fd = Arbre ( cle ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def insere ( arbre , cle ): \"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente un arbre binaire de recherche. \"\"\" if cle < arbre . v : if arbre . fg is not None : insere ( arbre . fg , cle ) else : arbre . fg = Arbre ( cle ) else : if arbre . fd is not None : insere ( arbre . fd , cle ) else : arbre . fd = Arbre ( cle ) Tests : >>> a = Arbre ( 5 ) >>> insere ( a , 2 ) >>> insere ( a , 7 ) >>> insere ( a , 3 ) >>> parcours ( a , []) [ 2 , 3 , 5 , 7 ] >>> insere ( a , 1 ) >>> insere ( a , 4 ) >>> insere ( a , 6 ) >>> insere ( a , 8 ) >>> parcours ( a , []) [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] \u25b6 Sujet 26 \u00b6 Exercice 26.1 \u00b6 Exercice 26.1 \u00c9nonc\u00e9 Correction Programmer la fonction multiplication , prenant en param\u00e8tres deux nombres entiers n1 et n2 , et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. >>> multiplication ( 3 , 5 ) 15 >>> multiplication ( - 4 , - 8 ) 32 >>> multiplication ( - 2 , 6 ) - 12 >>> multiplication ( - 2 , 0 ) 0 1 2 3 4 5 6 7 8 9 10 11 def multiplication ( n1 , n2 ): # on se ram\u00e8ne d'abord au cas o\u00f9 n1 et n2 sont tous les deux positifs : if n1 < 0 : return - multiplication ( - n1 , n2 ) if n2 < 0 : return - multiplication ( n1 , - n2 ) resultat = 0 for _ in range ( n2 ): resultat += n1 return resultat Exercice 26.2 \u00b6 Exercice 26.2 \u00c9nonc\u00e9 Correction Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def dichotomie ( tab , x ): \"\"\" tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant x : nombre entier La fonction renvoie True si tab contient x et False sinon \"\"\" debut = 0 fin = len ( tab ) - 1 while debut <= fin : m = ... if x == tab [ m ]: return ... if x > tab [ m ]: debut = m + 1 else : fin = ... return ... Exemples : >>> dichotomie ([ 15 , 16 , 18 , 19 , 23 , 24 , 28 , 29 , 31 , 33 ], 28 ) True >>> dichotomie ([ 15 , 16 , 18 , 19 , 23 , 24 , 28 , 29 , 31 , 33 ], 27 ) False 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def dichotomie ( tab , x ): \"\"\" tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant x : nombre entier La fonction renvoie True si tab contient x et False sinon \"\"\" debut = 0 fin = len ( tab ) - 1 while debut <= fin : m = ( debut + fin ) // 2 if x == tab [ m ]: return True if x > tab [ m ]: debut = m + 1 else : fin = m - 1 return False \u25b6 Sujet 27 \u00b6 Exercice 27.1 \u00b6 Exercice 27.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction recherche_min qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 tab , et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python. Exemples : >>> recherche_min ([ 5 ]) 0 >>> recherche_min ([ 2 , 4 , 1 ]) 2 >>> recherche_min ([ 5 , 3 , 2 , 2 , 4 ]) 2 1 2 3 4 5 6 def recherche_min ( tab ): indice_min = 0 for i in range ( len ( tab )): if tab [ i ] < tab [ indice_min ]: indice_min = i return indice_min Exercice 27.2 \u00b6 Exercice 27.2 \u00c9nonc\u00e9 Correction On consid\u00e8re la fonction separe ci-dessous qui prend en argument un tableau tab dont les \u00e9l\u00e9ments sont des 0 et des 1 et qui s\u00e9pare les 0 des 1 en pla\u00e7ant les 0 en d\u00e9but de tableau et les 1 \u00e0 la suite. 1 2 3 4 5 6 7 8 9 10 def separe ( tab ): gauche = 0 droite = ... while gauche < droite : if tab [ gauche ] == 0 : gauche = ... else : tab [ gauche ], tab [ droite ] = ... droite = ... return tab Compl\u00e9ter la fonction separe ci-dessus. Exemples : >>> separe ([ 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 ]) [ 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ] >>> separe ([ 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 ]) [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] Description d\u2019\u00e9tapes effectu\u00e9es par la fonction separe sur le tableau ci-dessous : tab = [1, 0, 1, 0, 1, 0, 1, 0] Etape 1 : on regarde la premi\u00e8re case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec la derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus la derni\u00e8re case en compte. tab = [0, 0, 1, 0, 1, 0, 1, 1] Etape 2 : on regarde \u00e0 nouveau la premi\u00e8re case, qui contient maintenant un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la premi\u00e8re case en compte. tab = [0, 0, 1, 0, 1, 0, 1, 1] Etape 3 : on regarde la seconde case, qui contient un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la seconde case en compte. tab = [0, 0, 1, 0, 1, 0, 1, 1] Etape 4 : on regarde la troisi\u00e8me case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec l\u2019avant-derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus l\u2019avant-derni\u00e8re case en compte. tab = [0, 0, 1, 0, 1, 0, 1, 1] Et ainsi de suite... tab = [0, 0, 0, 0, 1, 1, 1, 1] Compl\u00e9ter la fonction separe pr\u00e9sent\u00e9e \u00e0 la page pr\u00e9c\u00e9dente 1 2 3 4 5 6 7 8 9 10 def separe ( tab ): gauche = 0 droite = len ( tab ) - 1 while gauche < droite : if tab [ gauche ] == 0 : gauche = gauche + 1 else : tab [ gauche ], tab [ droite ] = tab [ droite ], tab [ gauche ] droite = droite - 1 return tab \u25b6 Sujet 28 \u00b6 Exercice 28.1 \u00b6 Exercice 28.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. def moyenne ( tab ): ''' moyenne(list) -> float Entr\u00e9e : un tableau non vide d'entiers Sortie : nombre de type float Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le tableau ''' assert moyenne ([ 1 ]) == 1 assert moyenne ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]) == 4 assert moyenne ([ 1 , 2 ]) == 1.5 1 2 3 4 5 6 7 8 9 10 11 12 def moyenne ( tab ): ''' moyenne(list) -> float Entr\u00e9e : un tableau non vide d'entiers Sortie : nombre de type float Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le tableau ''' somme = 0 for elt in tab : somme += elt return somme / len ( tab ) Exercice 28.2 \u00b6 Exercice 28.2 \u00c9nonc\u00e9 Correction Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant. L'algorithme traite le cas du tableau vide et il est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau. On distingue les trois cas qui renvoient False en renvoyant False, 1 , False, 2 et False, 3 . Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def dichotomie ( tab , x ): \"\"\" tab : tableau tri\u00e9 dans l\u2019ordre croissant x : nombre entier La fonction renvoie True si tab contient x et False sinon \"\"\" # cas du tableau vide if ... : return False , 1 # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames if ( x < tab [ 0 ]) or ... : return False , 2 debut = 0 fin = len ( tab ) - 1 while debut <= fin : m = ... if x == tab [ m ]: return ... if x > tab [ m ]: debut = m + 1 else : fin = ... return ... Exemples : >>> dichotomie ([ 15 , 16 , 18 , 19 , 23 , 24 , 28 , 29 , 31 , 33 ], 28 ) True >>> dichotomie ([ 15 , 16 , 18 , 19 , 23 , 24 , 28 , 29 , 31 , 33 ], 27 ) ( False , 3 ) >>> dichotomie ([ 15 , 16 , 18 , 19 , 23 , 24 , 28 , 29 , 31 , 33 ], 1 ) ( False , 2 ) >>> dichotomie ([], 28 ) ( False , 1 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def dichotomie ( tab , x ): \"\"\" tab : tableau tri\u00e9 dans l\u2019ordre croissant x : nombre entier La fonction renvoie True si tab contient x et False sinon \"\"\" # cas du tableau vide if tab == []: return False , 1 # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames if ( x < tab [ 0 ]) or ( x > tab [ - 1 ]): return False , 2 debut = 0 fin = len ( tab ) - 1 while debut <= fin : m = ( debut + fin ) // 2 if x == tab [ m ]: return True if x > tab [ m ]: debut = m + 1 else : fin = m - 1 return False , 3 \u25b6 Sujet 29 \u00b6 Exercice 29.1 \u00b6 Exercice 29.1 \u00c9nonc\u00e9 Correction Un arbre binaire est impl\u00e9ment\u00e9 par la classe Arbre donn\u00e9e ci-dessous. Les attributs fg et fd prennent pour valeurs des instances de la classe Arbre ou None . class Arbre : def __init__ ( self , etiquette ): self . v = etiquette self . fg = None self . fd = None L\u2019arbre ci-dessus sera donc impl\u00e9ment\u00e9 de la mani\u00e8re suivante : a = Arbre ( 1 ) a . fg = Arbre ( 4 ) a . fd = Arbre ( 0 ) a . fd . fd = Arbre ( 7 ) \u00c9crire une fonction r\u00e9cursive taille prenant en param\u00e8tre une instance a de la classe Arbre et qui renvoie la taille de l\u2019arbre que cette instance impl\u00e9mente. \u00c9crire de m\u00eame une fonction r\u00e9cursive hauteur prenant en param\u00e8tre une instance a de la classe Arbre et qui renvoie la hauteur de l\u2019arbre que cette instance impl\u00e9mente. Si un arbre a un seul n\u0153ud, sa taille et sa hauteur sont \u00e9gales \u00e0 1. S\u2019il est vide, sa taille et sa hauteur sont \u00e9gales \u00e0 0. Tester les deux fonctions sur l\u2019arbre repr\u00e9sent\u00e9 ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 def taille ( a ): if a is None : return 0 else : return 1 + taille ( a . fg ) + taille ( a . fd ) def hauteur ( a ): if a is None : return 0 else : return 1 + max ( hauteur ( a . fg ), hauteur ( a . fd )) Tests : a = Arbre ( 0 ) a . fg = Arbre ( 1 ) a . fd = Arbre ( 2 ) a . fg . fg = Arbre ( 3 ) a . fd . fg = Arbre ( 4 ) a . fd . fd = Arbre ( 5 ) a . fd . fg . fd = Arbre ( 6 ) >>> taille ( a ) 7 >>> hauteur ( a ) 4 Exercice 29.2 \u00b6 Exercice 29.2 \u00c9nonc\u00e9 Correction La m\u00e9thode insert de la classe list permet d\u2019ins\u00e9rer un \u00e9l\u00e9ment dans une liste \u00e0 un indice donn\u00e9. Le but de cet exercice est, sans utiliser cette m\u00e9thode , d\u2019\u00e9crire une fonction ajoute r\u00e9alisant cette insertion en produisant une nouvelle liste. Cette fonction ajoute prend en param\u00e8tres trois variables indice , element et liste et renvoie une liste L dans laquelle les \u00e9l\u00e9ments sont ceux de la liste liste avec, en plus, l\u2019\u00e9l\u00e9ment element \u00e0 l\u2019indice indice . On consid\u00e8re que les variables indice et element sont des entiers positifs et que les \u00e9l\u00e9ments de liste sont \u00e9galement des entiers positifs. Les \u00e9l\u00e9ments de la liste liste , dont les indices sont sup\u00e9rieurs ou \u00e9gaux \u00e0 indice apparaissent d\u00e9cal\u00e9s vers la droite dans la liste L . Si indice est sup\u00e9rieur ou \u00e9gal au nombre d\u2019\u00e9l\u00e9ments de la liste liste , l\u2019\u00e9l\u00e9ment element est ajout\u00e9 dans L apr\u00e8s tous les \u00e9l\u00e9ments de la liste liste . Exemple : >>> ajoute ( 1 , 4 , [ 7 , 8 , 9 ]) [ 7 , 4 , 8 , 9 ] >>> ajoute ( 3 , 4 , [ 7 , 8 , 9 ]) [ 7 , 8 , 9 , 4 ] >>> ajoute ( 4 , 4 , [ 7 , 8 , 9 ]) [ 7 , 8 , 9 , 4 ] Compl\u00e9ter et tester le code ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def ajoute ( indice , element , liste ): nbre_elts = len ( liste ) L = [ 0 for i in range ( nbre_elts + 1 )] if ... : for i in range ( indice ): L [ i ] = ... L [ ... ] = ... for i in range ( indice + 1 , nbre_elts + 1 ): L [ i ] = ... else : for i in range ( nbre_elts ): L [ i ] = ... L [ ... ] = ... return L 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def ajoute ( indice , element , liste ): nbre_elts = len ( liste ) L = [ 0 for i in range ( nbre_elts + 1 )] if indice < nbre_elts : for i in range ( indice ): L [ i ] = liste [ i ] L [ indice ] = element for i in range ( indice + 1 , nbre_elts + 1 ): L [ i ] = liste [ i - 1 ] else : for i in range ( nbre_elts ): L [ i ] = liste [ i ] L [ nbre_elts ] = element return L \u25b6 Sujet 30 \u00b6 Exercice 30.1 \u00b6 Exercice 30.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction moyenne qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python. Exemples : >>> moyenne ([ 1.0 ]) 1.0 >>> moyenne ([ 1.0 , 2.0 , 4.0 ]) 2.3333333333333335 1 2 3 4 5 def moyenne ( tab ): somme = 0 for val in tab : somme += val return somme / len ( tab ) Exercice 30.2 \u00b6 Exercice 30.2 \u00c9nonc\u00e9 Correction On consid\u00e8re la fonction binaire ci-dessous qui prend en param\u00e8tre un entier positif a en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res. L\u2019algorithme utilise la m\u00e9thode des divisions euclidiennes successives comme l\u2019illustre l\u2019exemple ci-apr\u00e8s. 1 2 3 4 5 6 7 def binaire ( a ): bin_a = ... a = a // 2 while a ... : bin_a = ... + bin_a a = ... return bin_a Compl\u00e9ter le code de la fonction binaire . Exemples : >>> binaire ( 83 ) '1010011' >>> binaire ( 127 ) '1111111' >>> binaire ( 0 ) '0' 1 2 3 4 5 6 7 def binaire ( a ): bin_a = str ( a % 2 ) a = a // 2 while a != 0 : bin_a = str ( a % 2 ) + bin_a a = a // 2 return bin_a \u25b6 Sujet 31 \u00b6 Exercice 31.1 \u00b6 Exercice 31.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction Python appel\u00e9e nb_repetitions qui prend en param\u00e8tres un \u00e9l\u00e9ment elt et une liste tab et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la liste. Exemples : >>> nb_repetitions ( 5 , [ 2 , 5 , 3 , 5 , 6 , 9 , 5 ]) 3 >>> nb_repetitions ( 'A' , [ 'B' , 'A' , 'B' , 'A' , 'R' ]) 2 >>> nb_repetitions ( 12 , [ 1 , '!' , 7 , 21 , 36 , 44 ]) 0 1 2 3 4 5 6 def nb_repetitions ( elt , tab ): nb = 0 for element in tab : if element == elt : nb += 1 return nb Exercice 31.2 \u00b6 Exercice 31.2 \u00c9nonc\u00e9 Correction Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici : Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire : 1 2 3 4 5 6 7 def binaire ( a ): bin_a = str ( ... ) a = a // 2 while a ... : bin_a = ... ( a % 2 ) + ... a = ... return bin_a Compl\u00e9ter la fonction binaire . Exemples : >>> binaire ( 0 ) '0' >>> binaire ( 77 ) '1001101' 1 2 3 4 5 6 7 def binaire ( a ): bin_a = str ( a % 2 ) a = a // 2 while a != 0 : bin_a = str ( a % 2 ) + bin_a a = a // 2 return bin_a \u25b6 Sujet 32 \u00b6 Exercice 32.1 \u00b6 Exercice 32.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction min_et_max qui prend en param\u00e8tre un tableau de nombres tab non vide, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s min et max . Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python. L\u2019utilisation des fonctions natives min , max et sorted , ainsi que la m\u00e9thode sort n\u2019est pas autoris\u00e9e. Exemples : >>> min_et_max ([ 0 , 1 , 4 , 2 , - 2 , 9 , 3 , 1 , 7 , 1 ]) { 'min' : - 2 , 'max' : 9 } >>> min_et_max ([ 0 , 1 , 2 , 3 ]) { 'min' : 0 , 'max' : 3 } >>> min_et_max ([ 3 ]) { 'min' : 3 , 'max' : 3 } >>> min_et_max ([ 1 , 3 , 2 , 1 , 3 ]) { 'min' : 1 , 'max' : 3 } >>> min_et_max ([ - 1 , - 1 , - 1 , - 1 , - 1 ]) { 'min' : - 1 , 'max' : - 1 } 1 2 3 4 5 6 7 8 9 10 def min_et_max ( tab ): d = {} d [ 'min' ] = tab [ 0 ] d [ 'max' ] = tab [ 0 ] for val in tab : if val < d [ 'min' ]: d [ 'min' ] = val if val > d [ 'max' ]: d [ 'max' ] = val return d Exercice 32.2 \u00b6 Exercice 32.2 \u00c9nonc\u00e9 Correction On dispose d\u2019une classe Carte permettant de cr\u00e9er des objets mod\u00e9lisant des cartes \u00e0 jouer. Compl\u00e9ter la classe Paquet_de_cartes suivante en respectant les sp\u00e9cifications donn\u00e9es dans les cha\u00eenes de documentation. Ajouter une assertion dans la m\u00e9thode get_carte afin de v\u00e9rifier que le param\u00e8tre pos est correct. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Carte : def __init__ ( self , c , v ): \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\" self . couleur = c self . valeur = v def get_valeur ( self ): \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\" valeurs = [ 'As' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '10' , 'Valet' , 'Dame' , 'Roi' ] return valeurs [ self . valeur - 1 ] def get_couleur ( self ): \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\" couleurs = [ 'pique' , 'coeur' , 'carreau' , 'tr\u00e8fle' ] return couleurs [ self . couleur - 1 ] class Paquet_de_cartes : def __init__ ( self ): \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur, carreau et tr\u00e9fle. \"\"\" # A compl\u00e9ter def get_carte ( self , pos ): \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\" # A compl\u00e9ter Exemple : Exemple : >>> jeu = Paquet_de_cartes () >>> carte1 = jeu . get_carte ( 20 ) >>> print ( carte1 . get_valeur () + \" de \" + carte1 . get_couleur ()) 8 de coeur >>> carte2 = jeu . get_carte ( 0 ) >>> print ( carte2 . get_valeur () + \" de \" + carte2 . get_couleur ()) As de pique >>> carte3 = jeu . get_carte ( 52 ) AssertionError : param\u00e8tre pos invalide 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Carte : def __init__ ( self , c , v ): \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\" self . couleur = c self . valeur = v def get_valeur ( self ): \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\" valeurs = [ 'As' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '10' , 'Valet' , 'Dame' , 'Roi' ] return valeurs [ self . valeur - 1 ] def get_couleur ( self ): \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\" couleurs = [ 'pique' , 'coeur' , 'carreau' , 'tr\u00e8fle' ] return couleurs [ self . couleur - 1 ] class Paquet_de_cartes : def __init__ ( self ): \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur, carreau et tr\u00e9fle. \"\"\" self . contenu = [ Carte ( c , v ) for c in range ( 1 , 5 ) for v in range ( 1 , 14 )] def get_carte ( self , pos ): \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\" assert 0 <= pos <= 51 , 'param\u00e8tre pos invalide' return self . contenu [ pos ] \u25b6 Sujet 33 \u00b6 Exercice 33.1 \u00b6 Exercice 33.1 \u00c9nonc\u00e9 Correction Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud. Par exemple, l\u2019arbre est stock\u00e9 dans a = { 'F' :[ 'B' , 'G' ], 'B' :[ 'A' , 'D' ], 'A' :[ '' , '' ], 'D' :[ 'C' , 'E' ], \\ 'C' :[ '' , '' ], 'E' :[ '' , '' ], 'G' :[ '' , 'I' ], 'I' :[ '' , 'H' ], \\ 'H' :[ '' , '' ]} \u00c9crire une fonction r\u00e9cursive taille prenant en param\u00e8tres un arbre binaire arbre sous la forme d\u2019un dictionnaire et un caract\u00e8re lettre qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153uds. On observe que, par exemple, arbre[lettre][0] , respectivement arbre[lettre][1] , permet d\u2019atteindre la cl\u00e9 du sous-arbre gauche, respectivement droit, de l\u2019arbre arbre de sommet lettre . Exemple : >>> taille ( a , \u2019 F \u2019 ) 9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 a = { 'F' :[ 'B' , 'G' ], 'B' :[ 'A' , 'D' ], 'A' :[ '' , '' ], 'D' :[ 'C' , 'E' ], 'C' :[ '' , '' ], 'E' :[ '' , '' ], 'G' :[ '' , 'I' ], 'I' :[ '' , 'H' ], 'H' :[ '' , '' ]} def taille ( arbre , lettre ): fils_gauche = arbre [ lettre ][ 0 ] fils_droit = arbre [ lettre ][ 1 ] if fils_gauche != '' and fils_droit != '' : return 1 + taille ( arbre , fils_gauche ) + taille ( arbre , fils_droit ) if fils_gauche != '' and fils_droit == '' : return 1 + taille ( arbre , fils_gauche ) if fils_gauche == '' and fils_droit != '' : return 1 + taille ( arbre , fils_droit ) else : return 1 ou plus simplement : 1 2 3 4 def taille ( arbre , lettre ): if lettre == '' : return 0 return 1 + taille ( arbre , arbre [ lettre ][ 0 ]) + taille ( arbre , arbre [ lettre ][ 1 ]) Exercice 33.2 \u00b6 Exercice 33.2 \u00c9nonc\u00e9 Correction On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt le sous- tableau des \u00e9l\u00e9ments non rang\u00e9s et on place le plus petit \u00e9l\u00e9ment en premi\u00e8re position de ce sous-tableau. Exemple avec le tableau : t = [41, 55, 21, 18, 12, 6, 25] \u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus petit \u00e9l\u00e9ment avec le premier. Le tableau devient t = [6, 55, 21, 18, 12, 41, 25] \u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le premier, on permute le plus petit \u00e9l\u00e9ment trouv\u00e9 avec le second. Le tableau devient : t = [6, 12, 21, 18, 55, 41, 25] Et ainsi de suite. La code de la fonction tri_selection qui impl\u00e9mente cet algorithme est donn\u00e9 ci- dessous. 1 2 3 4 5 6 7 8 def tri_selection ( tab ): N = len ( tab ) for k in range ( ... ): imin = ... for i in range ( ... , N ): if tab [ i ] < ... : imin = i ... , tab [ imin ] = tab [ imin ] , ... Compl\u00e9ter le code de cette fonction de fa\u00e7on \u00e0 obtenir : >>> liste = [ 41 , 55 , 21 , 18 , 12 , 6 , 25 ] >>> tri_selection ( liste ) >>> liste [ 6 , 12 , 18 , 21 , 25 , 41 , 55 ] On rappelle que l'instruction a, b = b, a \u00e9change les contenus de a et de b . 1 2 3 4 5 6 7 8 def tri_selection ( tab ): N = len ( tab ) for k in range ( N ): imin = k for i in range ( k , N ): if tab [ i ] < tab [ imin ] : imin = i tab [ k ] , tab [ imin ] = tab [ imin ] , tab [ k ] \u25b6 Sujet 34 \u00b6 Exercice 34.1 \u00b6 Exercice 34.1 \u00c9nonc\u00e9 Correction Programmer la fonction moyenne prenant en param\u00e8tre un tableau d'entiers tab (de type list ) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide. Proposer une fa\u00e7on de traiter le cas o\u00f9 le tableau pass\u00e9 en param\u00e8tre est vide. Dans cet exercice, on s\u2019interdira d\u2019utiliser la fonction Python sum . Exemples : >>> moyenne ([ 5 , 3 , 8 ]) 5.333333333333333 >>> moyenne ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]) 5.5 >>> moyenne ([]) # Comportement diff\u00e9rent suivant le traitement propos\u00e9. 1 2 3 4 5 6 7 8 9 def moyenne ( tab ): if tab == []: print ( 'Le tableau donn\u00e9 est vide' ) return None else : somme = 0 for elt in tab : somme += elt return somme / len ( tab ) Exercice 34.2 \u00b6 Exercice 34.2 \u00c9nonc\u00e9 Correction On consid\u00e8re un tableau d'entiers tab (de type list ) dont les \u00e9l\u00e9ments sont des 0 ou des 1 ). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des 0 , la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des 1 . Zone de 0 Zone non tri\u00e9e Zone de 1 Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment : si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ; si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1. Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1. Recopier sous Python en la compl\u00e9tant la fonction tri suivante : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def tri ( tab ): # i est le premier indice de la zone non tri\u00e9e, # j est le dernier indice de cette zone non tri\u00e9e. # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet. i = ... j = ... while i != j : if tab [ i ] == 0 : i = ... else : valeur = tab [ j ] tab [ j ] = ... ... j = ... ... Exemple : >>> tri ([ 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 ]) [ 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def tri ( tab ): # i est le premier indice de la zone non tri\u00e9e, # j est le dernier indice de cette zone non tri\u00e9e. # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet. i = 0 j = len ( tab ) - 1 while i != j : if tab [ i ] == 0 : i = i + 1 else : valeur = tab [ j ] tab [ j ] = tab [ i ] tab [ i ] = valeur j = j - 1 return tab \u25b6 Sujet 35 \u00b6 Exercice 35.1 \u00b6 Exercice 35.1 \u00c9nonc\u00e9 Correction L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont diff\u00e9rents. Il est symbolis\u00e9 par le caract\u00e8re \u2295. Ainsi : 0 \u2295 0 = 0 0 \u2295 1 = 1 1 \u2295 0 = 1 1 \u2295 1 = 0 On repr\u00e9sente ici une suite de bits par un tableau contenant des 0 et des 1. Exemples : a = [ 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 ] b = [ 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 ] c = [ 1 , 1 , 0 , 1 ] d = [ 0 , 0 , 1 , 1 ] \u00c9crire la fonction ou_exclusif qui prend en param\u00e8tres deux tableaux de m\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position i est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position i des tableaux pass\u00e9s en param\u00e8tres. En consid\u00e9rant les quatre exemples ci-dessus, cette fonction donne : >>> ou_exclusif ( a , b ) [ 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 ] >>> ou_exclusif ( c , d ) [ 1 , 1 , 1 , 0 ] 1 2 3 4 5 6 def ou_exclusif ( tab1 , tab2 ): resultat = [] taille = len ( tab1 ) for i in range ( taille ): resultat . append ( tab1 [ i ] ^ tab2 [ i ]) return resultat Si on ne connait pas la fonction native ^ qui fait le \u00abou exclusif\u00bb de deux entiers en Python, on peut la recoder : 1 2 3 4 5 6 7 8 9 def ou_exc ( a , b ): if a == 0 and b == 0 : return 0 if a == 0 and b == 1 : return 1 if a == 1 and b == 0 : return 1 if a == 1 and b == 1 : return 0 Le code devient alors : 1 2 3 4 5 6 def ou_exclusif ( tab1 , tab2 ): resultat = [] taille = len ( tab1 ) for i in range ( taille ): resultat . append ( ou_exc ( tab1 [ i ], tab2 [ i ])) return resultat Exercice 35.2 \u00b6 Exercice 35.2 \u00c9nonc\u00e9 Correction Dans cet exercice, on appelle carr\u00e9 d\u2019ordre \\(n\\) un tableau de \\(n\\) lignes et \\(n\\) colonnes dont chaque case contient un entier naturel. Exemples : Un carr\u00e9 est dit semimagique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque colonne sont \u00e9gales. Ainsi c2 et c3 sont semimagiques car la somme de chaque ligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 8 pour c2 et 12 pour c3. Le carre c3bis n'est pas semimagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 15 alors que celle de la deuxi\u00e8me ligne est \u00e9gale \u00e0 10. La classe Carre ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s. La m\u00e9thode constructeur cr\u00e9e un carr\u00e9 sous forme d\u2019un tableau \u00e0 deux dimensions \u00e0 partir d\u2019une liste d\u2019entiers, et d\u2019un ordre. La m\u00e9thode affiche permet d\u2019afficher le carr\u00e9 cr\u00e9\u00e9. Exemple : >>> liste = ( 3 , 4 , 5 , 4 , 4 , 4 , 5 , 4 , 3 ) >>> c3 = Carre ( liste , 3 ) >>> c3 . affiche () [ 3 , 4 , 5 ] [ 4 , 4 , 4 ] [ 5 , 4 , 3 ] Compl\u00e9ter la m\u00e9thode est_semimagique qui renvoie True si le carr\u00e9 est semimagique, False sinon. Puis tester la fonction est_semimagique sur les carr\u00e9s c2, c3 et c3bis. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Carre : def __init__ ( self , liste , n ): self . ordre = n self . tableau = [[ liste [ i + j * n ] for i in range ( n )] for j in range ( n )] def affiche ( self ): '''Affiche un carr\u00e9''' for i in range ( self . ordre ): print ( self . tableau [ i ]) def somme_ligne ( self , i ): '''Calcule la somme des valeurs de la ligne i''' somme = 0 for j in range ( self . ordre ): somme = somme + self . tableau [ i ][ j ] return somme def somme_col ( self , j ): '''Calcule la somme des valeurs de la colonne j''' somme = 0 for i in range ( self . ordre ): somme = somme + self . tableau [ i ][ j ] return somme def est_semimagique ( self ): s = self . somme_ligne ( 0 ) #test de la somme de chaque ligne for i in range ( ... ): if ... != s : return ... #test de la somme de chaque colonne for j in range ( ... ): if ... != s : return ... return ... Listes permettant de g\u00e9n\u00e9rer les carr\u00e9s c2, c3 et c3bis : 1 2 3 lst_c2 = [ 1 , 7 , 7 , 1 ] lst_c3 = [ 3 , 4 , 5 , 4 , 4 , 4 , 5 , 4 , 3 ] lst_c3bis = [ 2 , 9 , 4 , 7 , 0 , 3 , 6 , 1 , 8 ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Carre : def __init__ ( self , liste , n ): self . ordre = n self . tableau = [[ liste [ i + j * n ] for i in range ( n )] for j in range ( n )] def affiche ( self ): '''Affiche un carr\u00e9''' for i in range ( self . ordre ): print ( self . tableau [ i ]) def somme_ligne ( self , i ): '''Calcule la somme des valeurs de la ligne i''' somme = 0 for j in range ( self . ordre ): somme = somme + self . tableau [ i ][ j ] return somme def somme_col ( self , j ): '''Calcule la somme des valeurs de la colonne j''' somme = 0 for i in range ( self . ordre ): somme = somme + self . tableau [ i ][ j ] return somme def est_semimagique ( self ): s = self . somme_ligne ( 0 ) #test de la somme de chaque ligne for i in range ( self . ordre ): if self . somme_ligne ( i ) != s : return False #test de la somme de chaque colonne for j in range ( self . ordre ): if self . somme_col ( j ) != s : return False return True Tests avec : 1 2 3 lst_c2 = [ 1 , 7 , 7 , 1 ] lst_c3 = [ 3 , 4 , 5 , 4 , 4 , 4 , 5 , 4 , 3 ] lst_c3bis = [ 2 , 9 , 4 , 7 , 0 , 3 , 6 , 1 , 8 ] >>> c2 = Carre ( lst_c2 , 2 ) >>> c2 . est_semimagique () True >>> c3 = Carre ( lst_c3 , 3 ) >>> c3 . est_semimagique () True >>> c3bis = Carre ( lst_c3bis , 2 ) >>> c3bis . est_semimagique () False \u25b6 Sujet 36 \u00b6 Exercice 36.1 \u00b6 Exercice 36.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction couples_consecutifs qui prend en param\u00e8tre une liste de nombres entiers tab non vide, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans tab . Exemples : >>> couples_consecutifs ([ 1 , 4 , 3 , 5 ]) [] >>> couples_consecutifs ([ 1 , 4 , 5 , 3 ]) [( 4 , 5 )] >>> couples_consecutifs ([ 1 , 1 , 2 , 4 ]) [( 1 , 2 )] >>> couples_consecutifs ([ 7 , 1 , 2 , 5 , 3 , 4 ]) [( 1 , 2 ), ( 3 , 4 )] >>> couples_consecutifs ([ 5 , 1 , 2 , 3 , 8 , - 5 , - 4 , 7 ]) [( 1 , 2 ), ( 2 , 3 ), ( - 5 , - 4 )] 1 2 3 4 5 6 def couples_consecutifs ( tab ): solution = [] for i in range ( len ( tab ) - 1 ): if tab [ i ] + 1 == tab [ i + 1 ]: solution . append (( tab [ i ], tab [ i + 1 ])) return solution Exercice 36.2 \u00b6 Exercice 36.2 \u00c9nonc\u00e9 Correction Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments M[i][j] , appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 0 soit \u00e0 1 . Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de 1 et de 0 qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement. Par exemple, les composantes de sont On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 1 dans une image M , donner la valeur val \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel. La fonction propager prend pour param\u00e8tre une image M (repr\u00e9sent\u00e9e par une liste de listes), deux entiers i et j et unevaleur enti\u00e8re val . Elle met \u00e0 la valeur val tous les pixels de la composante du pixel M[i][j] s\u2019il vaut 1 et ne fait rien s\u2019il vaut 0 . Par exemple, propager(M, 2, 1, 3) donne Compl\u00e9ter le code r\u00e9cursif de la fonction propager donn\u00e9 ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def propager ( M , i , j , val ): if M [ i ][ j ] == ... : M [ i ][ j ] = val # l'element en haut fait partie de la composante if i - 1 >= 0 and M [ i - 1 ][ j ] == ... : propager ( M , i - 1 , j , val ) # l'element en bas fait partie de la composante if ... < len ( M ) and M [ i + 1 ][ j ] == 1 : propager ( M , ... , j , val ) # l'element \u00e0 gauche fait partie de la composante if ... and M [ i ][ j - 1 ] == 1 : propager ( M , ... , ... , val ) # l'element \u00e0 droite fait partie de la composante if ... and ... : propager ( ... , ... , ... , ... ) Exemple : >>> M = [[ 0 , 0 , 1 , 0 ], [ 0 , 1 , 0 , 1 ], [ 1 , 1 , 1 , 0 ], [ 0 , 1 , 1 , 0 ]] >>> propager ( M , 2 , 1 , 3 ) >>> M [[ 0 , 0 , 1 , 0 ], [ 0 , 3 , 0 , 1 ], [ 3 , 3 , 3 , 0 ], [ 0 , 3 , 3 , 0 ]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def propager ( M , i , j , val ): if M [ i ][ j ] == 1 : M [ i ][ j ] = val # l'element en haut fait partie de la composante if i - 1 >= 0 and M [ i - 1 ][ j ] == 1 : propager ( M , i - 1 , j , val ) # l'element en bas fait partie de la composante if i + 1 < len ( M ) and M [ i + 1 ][ j ] == 1 : propager ( M , i + 1 , j , val ) # l'element \u00e0 gauche fait partie de la composante if j - 1 >= 0 and M [ i ][ j - 1 ] == 1 : propager ( M , i , j - 1 , val ) # l'element \u00e0 droite fait partie de la composante if j + 1 < len ( M [ i ]) and M [ i ][ j + 1 ] == 1 : propager ( M , i , j + 1 , val ) \u25b6 Sujet 37 \u00b6 Exercice 37.1 \u00b6 Exercice 37.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction recherche qui prend en param\u00e8tres elt un nombre entier et tab un tableau de nombres entiers, et qui renvoie l\u2019indice de la derni\u00e8re occurrence de elt dans tab si elt est dans tab et -1 sinon. Exemples : >>> recherche ( 1 , [ 2 , 3 , 4 ]) - 1 >>> recherche ( 1 , [ 10 , 12 , 1 , 56 ]) 2 >>> recherche ( 1 , [ 1 , 0 , 42 , 7 ]) 0 >>> recherche ( 1 , [ 1 , 50 , 1 ]) 2 >>> recherche ( 1 , [ 8 , 1 , 10 , 1 , 7 , 1 , 8 ]) 5 1 2 3 4 5 def recherche ( elt , tab ): for i in range ( len ( tab ) - 1 , - 1 , - 1 ): if tab [ i ] == elt : return i return - 1 Exercice 37.2 \u00b6 Exercice 37.2 \u00c9nonc\u00e9 Correction On d\u00e9finit une classe g\u00e9rant une adresse IPv4. On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de 192.168.0.0 \u00e0 192.168.0.255 . On consid\u00e8re que les adresses IP saisies sont valides. Les adresses IP 192.168.0.0 et 192.168.0.255 sont des adresses r\u00e9serv\u00e9es. Le code ci-dessous impl\u00e9mente la classe AdresseIP . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class AdresseIP : def __init__ ( self , adresse ): self . adresse = ... def liste_octet ( self ): \"\"\"renvoie une liste de nombres entiers, la liste des octets de l'adresse IP\"\"\" return [ int ( i ) for i in self . adresse . split ( \".\" )] def est_reservee ( self ): \"\"\"renvoie True si l'adresse IP est une adresse r\u00e9serv\u00e9e, False sinon\"\"\" return ... or ... def adresse_suivante ( self ): \"\"\"renvoie un objet de AdresseIP avec l'adresse IP qui suit l\u2019adresse self si elle existe et False sinon\"\"\" if ... < 254 : octet_nouveau = ... + ... return AdresseIP ( '192.168.0.' + ... ) else : return False Compl\u00e9ter le code ci-dessus et instancier trois objets : adresse1 , adresse2 , adresse3 avec respectivement les arguments suivants : '192.168.0.1' , '192.168.0.2' , '192.168.0.0' V\u00e9rifier que : >>> adresse1 . est_reservee () False >>> adresse3 . est_reservee () True >>> adresse2 . adresse_suivante () . adresse '192.168.0.3' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class AdresseIP : def __init__ ( self , adresse ): self . adresse = adresse def liste_octet ( self ): \"\"\"renvoie une liste de nombres entiers, la liste des octets de l'adresse IP\"\"\" return [ int ( i ) for i in self . adresse . split ( \".\" )] def est_reservee ( self ): \"\"\"renvoie True si l'adresse IP est une adresse r\u00e9serv\u00e9e, False sinon\"\"\" return self . liste_octet ()[ 3 ] == 0 or self . liste_octet ()[ 3 ] == 255 def adresse_suivante ( self ): \"\"\"renvoie un objet de AdresseIP avec l'adresse IP qui suit l\u2019adresse self si elle existe et False sinon\"\"\" if self . liste_octet ()[ 3 ] < 254 : octet_nouveau = self . liste_octet ()[ 3 ] + 1 return AdresseIP ( '192.168.0.' + str ( octet_nouveau )) else : return False adresse1 = AdresseIP ( '192.168.0.1' ) adresse2 = AdresseIP ( '192.168.0.2' ) adresse3 = AdresseIP ( '192.168.0.0' ) \u25b6 Sujet 38 \u00b6 Exercice 38.1 \u00b6 Exercice 38.1 \u00c9nonc\u00e9 Correction On consid\u00e8re des mots \u00e0 trous : ce sont des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des caract\u00e8res * . Par exemple INFO*MA*IQUE , ***I***E** et *S* sont des mots \u00e0 trous. Programmer une fonction correspond qui : prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res mot et mot_a_trous o\u00f9 mot_a_trous est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, renvoie : True si on peut obtenir mot en rempla\u00e7ant convenablement les caract\u00e8res '*' de mot_a_trous . False sinon. Exemple : >>> correspond ( 'INFORMATIQUE' , 'INFO*MA*IQUE' ) True >>> correspond ( 'AUTOMATIQUE' , 'INFO*MA*IQUE' ) False >>> correspond ( 'STOP' , 'S*' ) False >>> correspond ( 'AUTO' , '*UT*' ) True 1 2 3 4 5 6 7 def correspond ( mot , mot_a_trous ): if len ( mot ) != len ( mot_a_trous ): return False for i in range ( len ( mot )): if mot [ i ] != mot_a_trous [ i ] and mot_a_trous [ i ] != '*' : return False return True Exercice 38.2 \u00b6 Exercice 38.2 \u00c9nonc\u00e9 Correction On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages avec deux r\u00e8gles \u00e0 respecter : chaque personne ne peut envoyer des messages qu'\u00e0 une seule personne (\u00e9ventuellement elle-m\u00eame), chaque personne ne peut recevoir des messages qu'en provenance d'une seule personne (\u00e9ventuellement elle-m\u00eame). Voici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les r\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque colonne : A envoie ses messages \u00e0 E E envoie ses messages \u00e0 B B envoie ses messages \u00e0 F F envoie ses messages \u00e0 A C envoie ses messages \u00e0 D D envoie ses messages \u00e0 C Et le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant : plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'} Un cycle est une suite de personnes dans laquelle la derni\u00e8re est la m\u00eame que la premi\u00e8re. Sur le plan d'envoi plan_a des messages ci-dessus, il y a deux cycles distincts : un premier cycle avec A, E, B, F et un second cycle avec C et D. En revanche, le plan d\u2019envoi plan_b ci-dessous : plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'} comporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un unique cycle , on dit que le plan d\u2019envoi est cyclique . Pour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut utiliser l'algorithme ci-dessous : on part d\u2019un exp\u00e9diteur (ici A) et on inspecte son destinataire dans le plan d'envoi, chaque destinataire devient \u00e0 son tour exp\u00e9diteur, selon le plan d\u2019envoi, tant qu\u2019on ne \u00ab retombe \u00bb pas sur l\u2019exp\u00e9diteur initial, le plan d\u2019envoi est cyclique si on l\u2019a parcouru en entier. Compl\u00e9ter la fonction est_cyclique en respectant la sp\u00e9cification. Remarque : la fonction python len permet d'obtenir la longueur d'un dictionnaire. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def est_cyclique ( plan ): ''' Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F). Renvoie True si le plan d'envoi de messages est cyclique et False sinon. ''' expediteur = 'A' destinataire = plan [ ... ] nb_destinaires = 1 while destinataire != ... : destinataire = plan [ ... ] nb_destinaires += ... return nb_destinaires == ... Exemples : >>> est_cyclique ({ 'A' : 'E' , 'F' : 'A' , 'C' : 'D' , 'E' : 'B' , 'B' : 'F' , 'D' : 'C' }) False >>> est_cyclique ({ 'A' : 'E' , 'F' : 'C' , 'C' : 'D' , 'E' : 'B' , 'B' : 'F' , 'D' : 'A' }) True >>> est_cyclique ({ 'A' : 'B' , 'F' : 'C' , 'C' : 'D' , 'E' : 'A' , 'B' : 'F' , 'D' : 'E' }) True >>> est_cyclique ({ 'A' : 'B' , 'F' : 'A' , 'C' : 'D' , 'E' : 'C' , 'B' : 'F' , 'D' : 'E' }) False 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def est_cyclique ( plan ): ''' Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F). Renvoie True si le plan d'envoi de messages est cyclique et False sinon. ''' expediteur = 'A' destinataire = plan [ expediteur ] nb_destinaires = 1 while destinataire != expediteur : destinataire = plan [ destinataire ] nb_destinaires += 1 return nb_destinaires == len ( plan ) #tests print ( est_cyclique ({ 'A' : 'E' , 'F' : 'A' , 'C' : 'D' , 'E' : 'B' , 'B' : 'F' , 'D' : 'C' })) print ( est_cyclique ({ 'A' : 'E' , 'F' : 'C' , 'C' : 'D' , 'E' : 'B' , 'B' : 'F' , 'D' : 'A' })) print ( est_cyclique ({ 'A' : 'B' , 'F' : 'C' , 'C' : 'D' , 'E' : 'A' , 'B' : 'F' , 'D' : 'E' })) print ( est_cyclique ({ 'A' : 'B' , 'F' : 'A' , 'C' : 'D' , 'E' : 'C' , 'B' : 'F' , 'D' : 'E' })) \u25b6 Sujet 39 \u00b6 Exercice 39.1 \u00b6 Exercice 39.1 \u00c9nonc\u00e9 Correction On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par : les deux premiers termes sont \u00e9gaux \u00e0 1, ensuite, chaque terme est obtenu en faisant la somme des deux termes qui le pr\u00e9c\u00e8dent. En math\u00e9matiques, on le formule ainsi : \\(U_1 = 1\\) , \\(U_2 = 1\\) et, pour tout entier naturel non nul \\(n\\) , par \\(U_{n+2} = U_{n+1} + U_n\\) . Cette suite est connue sous le nom de suite de Fibonacci. \u00c9crire en Python une fonction fibonacci qui prend en param\u00e8tre un entier n suppos\u00e9 strictement positif et qui renvoie le terme d\u2019indice n de cette suite. Exemples : >>> fibonacci ( 1 ) 1 >>> fibonacci ( 2 ) 1 >>> fibonacci ( 25 ) 75025 >>> fibonacci ( 45 ) 1134903170 Version r\u00e9cursive : 1 2 3 4 5 6 7 def fibonacci ( n ): if n == 1 : return 1 elif n == 1 : return 1 else : return fibonacci ( n - 1 ) + fibonacci ( n - 2 ) Version imp\u00e9rative : 1 2 3 4 5 6 7 8 def fibonacci ( n ): a = 1 b = 1 for k in range ( n - 2 ): t = b b = a + b a = t return b Version programmation dynamique : 1 2 3 4 5 6 7 def fibonacci ( n ): d = {} d [ 1 ] = 1 d [ 2 ] = 1 for k in range ( 3 , n + 1 ): d [ k ] = d [ k - 1 ] + d [ k - 2 ] return d [ n ] On peut constater que la version r\u00e9cursive \u00e9choue \u00e0 calculer fibonacci(45) , alors que les deux autres versions le font quasi-imm\u00e9diatement. Exercice 39.2 \u00b6 Exercice 39.2 \u00c9nonc\u00e9 Correction On consid\u00e8re la fonction pantheon prenant en param\u00e8tres eleves et notes deux tableaux de m\u00eame longueur, le premier contenant le nom des \u00e9l\u00e8ves et le second, des entiers positifs d\u00e9signant leur note \u00e0 un contr\u00f4le de sorte que eleves[i] a obtenu la note notes[i] . Cette fonction renvoie le couple constitu\u00e9 de la note maximale attribu\u00e9e et des noms des \u00e9l\u00e8ves ayant obtenu cette note regroup\u00e9s dans un tableau. Ainsi, l\u2019instruction pantheon(['a', 'b', 'c', 'd'], [15, 18, 12, 18]) renvoie le couple (18, ['b', 'd']) . 1 2 3 4 5 6 7 8 9 10 11 12 def pantheon ( eleves , notes ): note_maxi = 0 meilleurs_eleves = ... for i in range ( ... ) : if notes [ i ] == ... : meilleurs_eleves . append ( ... ) elif notes [ i ] > note_maxi : note_maxi = ... meilleurs_eleves = [ ... ] return ( note_maxi , meilleurs_eleves ) Compl\u00e9ter ce code. Exemples : >>> eleves_nsi = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' ] >>> notes_nsi = [ 30 , 40 , 80 , 60 , 58 , 80 , 75 , 80 , 60 , 24 ] >>> pantheon ( eleves_nsi , notes_nsi ) ( 80 , [ 'c' , 'f' , 'h' ]) >>> pantheon ([],[]) ( 0 , []) 1 2 3 4 5 6 7 8 9 10 11 12 def pantheon ( eleves , notes ): note_maxi = 0 meilleurs_eleves = [] for i in range ( len ( eleves )) : if notes [ i ] == note_maxi : meilleurs_eleves . append ( eleves [ i ]) elif notes [ i ] > note_maxi : note_maxi = notes [ i ] meilleurs_eleves = [ eleves [ i ]] return ( note_maxi , meilleurs_eleves ) \u25b6 Sujet 40 \u00b6 Exercice 40.1 \u00b6 Exercice 40.1 \u00c9nonc\u00e9 Correction Pour cet exercice : On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis parmi les 26 lettres minuscules ou majuscules de l'alphabet, On appelle \u00ab phrase \u00bb une cha\u00eene de caract\u00e8res : compos\u00e9e avec un ou plusieurs \u00ab mots \u00bb s\u00e9par\u00e9s entre eux par un seul caract\u00e8re espace ' ' , se finissant : soit par un point '.' qui est alors coll\u00e9 au dernier mot, soit par un point d'exclamation '!' ou d'interrogation '?' qui est alors s\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace ' ' . Exemples : 'Cet exercice est simple.' 'Le point d exclamation est separe !' Apr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace dans une phrase, programmer une fonction nombre_de_mots qui prend en param\u00e8tre une phrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase. >>> nombre_de_mots ( 'Le point d exclamation est separe !' ) 6 >>> nombre_de_mots ( 'Il y a un seul espace entre les mots !' ) 9 >>> nombre_de_mots ( 'Combien de mots y a t il dans cette phrase ?' ) 10 >>> nombre_de_mots ( 'Fin.' ) 1 1 2 3 4 5 6 def nombre_de_mots ( phrase ): nb_mots = 0 for caractere in phrase : if caractere == ' ' or caractere == '.' : nb_mots += 1 return nb_mots Exercice 40.2 \u00b6 Exercice 40.2 \u00c9nonc\u00e9 Correction La classe ABR ci-dessous permet d'impl\u00e9menter une structure d'arbre binaire de recherche. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class Noeud : def __init__ ( self , valeur ): '''M\u00e9thode constructeur pour la classe Noeud. Param\u00e8tre d'entr\u00e9e : valeur (str)''' self . valeur = valeur self . gauche = None self . droit = None def getValeur ( self ): '''M\u00e9thode accesseur pour obtenir la valeur du noeud Aucun param\u00e8tre en entr\u00e9e''' return self . valeur def droitExiste ( self ): '''M\u00e9thode renvoyant True si l'enfant droit existe Aucun param\u00e8tre en entr\u00e9e''' return ( self . droit is not None ) def gaucheExiste ( self ): '''M\u00e9thode renvoyant True si l'enfant gauche existe Aucun param\u00e8tre en entr\u00e9e''' return ( self . gauche is not None ) def inserer ( self , cle ): '''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche Param\u00e8tre d'entr\u00e9e : cle (int)''' if cle < ... : # on ins\u00e8re \u00e0 gauche if self . gaucheExiste (): # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9 ... else : # on cr\u00e9e un fils gauche self . gauche = ... elif cle > ... : # on ins\u00e8re \u00e0 droite if ... : # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9 ... else : # on cr\u00e9e un fils droit ... = Noeud ( cle ) Compl\u00e9ter la fonction r\u00e9cursive inserer afin qu'elle permette d\u2019ins\u00e9rer un n\u0153ud dans l\u2019arbre binaire de recherche propos\u00e9, \u00e0 l\u2019aide de sa cl\u00e9. Voici un exemple d'utilisation : >>> arbre = Noeud ( 7 ) >>> for cle in ( 3 , 9 , 1 , 6 ): arbre . inserer ( cle ) >>> arbre . gauche . getValeur () 3 >>> arbre . droit . getValeur () 9 >>> arbre . gauche . gauche . getValeur () 1 >>> arbre . gauche . droit . getValeur () 6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class Noeud : def __init__ ( self , valeur ): '''M\u00e9thode constructeur pour la classe Noeud. Param\u00e8tre d'entr\u00e9e : valeur (str)''' self . valeur = valeur self . gauche = None self . droit = None def getValeur ( self ): '''M\u00e9thode accesseur pour obtenir la valeur du noeud Aucun param\u00e8tre en entr\u00e9e''' return self . valeur def droitExiste ( self ): '''M\u00e9thode renvoyant True si l'enfant droit existe Aucun param\u00e8tre en entr\u00e9e''' return ( self . droit is not None ) def gaucheExiste ( self ): '''M\u00e9thode renvoyant True si l'enfant gauche existe Aucun param\u00e8tre en entr\u00e9e''' return ( self . gauche is not None ) def inserer ( self , cle ): '''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche Param\u00e8tre d'entr\u00e9e : cle (int)''' if cle < self . valeur : # on ins\u00e8re \u00e0 gauche if self . gaucheExiste (): # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9 self . gauche . inserer ( cle ) else : # on cr\u00e9e un fils gauche self . gauche = Noeud ( cle ) elif cle > self . valeur : # on ins\u00e8re \u00e0 droite if self . droitExiste (): # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9 self . droit . inserer ( cle ) else : # on cr\u00e9e un fils droit self . droit = Noeud ( cle ) \u25b6 Sujet 41 \u00b6 Exercice 41.1 \u00b6 Exercice 41.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction recherche(caractere, chaine) qui prend en param\u00e8tres caractere , un unique caract\u00e8re (c\u2019est-\u00e0-dire une cha\u00eene de caract\u00e8re de longueur 1), et chaine , une cha\u00eene de caract\u00e8res. Cette fonction renvoie le nombre d\u2019occurrences de caractere dans chaine , c\u2019est-\u00e0-dire le nombre de fois o\u00f9 caractere appara\u00eet dans chaine. Exemples : >>> recherche ( 'e' , \"sciences\" ) 2 >>> recherche ( 'i' , \"mississippi\" ) 4 >>> recherche ( 'a' , \"mississippi\" ) 0 1 2 3 4 5 6 def recherche ( caractere , chaine ): somme = 0 for lettre in chaine : if lettre == caractere : somme += 1 return somme Exercice 41.2 \u00b6 Exercice 41.2 \u00c9nonc\u00e9 Correction On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets. Le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste valeurs = [100, 50, 20, 10, 5, 2, 1] . On suppose que les pi\u00e8ces et billets sont disponibles sans limitation. On cherche \u00e0 donner la liste des valeurs \u00e0 rendre pour une somme donn\u00e9e en argument. L\u2019algorithme utilis\u00e9 est de type glouton. Compl\u00e9ter le code Python ci-dessous de la fonction rendu_glouton qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre. 1 2 3 4 5 6 7 8 9 10 valeurs = [ 100 , 50 , 20 , 10 , 5 , 2 , 1 ] def rendu_glouton ( a_rendre , rang ): if a_rendre == 0 : return ... v = valeurs [ rang ] if v <= ... : return ... + rendu_glouton ( a_rendre - v , rang ) else : return rendu_glouton ( a_rendre , ... ) On devra obtenir : >>> rendu_glouton ( 67 , 0 ) [ 50 , 10 , 5 , 2 ] >>> rendu_glouton ( 291 , 0 ) [ 100 , 100 , 50 , 20 , 20 , 1 ] >>> rendu_glouton ( 291 , 1 ) # si on ne dispose pas de billets de 100 [ 50 , 50 , 50 , 50 , 50 , 20 , 20 , 1 ] 1 2 3 4 5 6 7 8 9 10 valeurs = [ 100 , 50 , 20 , 10 , 5 , 2 , 1 ] def rendu_glouton ( a_rendre , rang ): if a_rendre == 0 : return [] v = valeurs [ rang ] if v <= a_rendre : return [ v ] + rendu_glouton ( a_rendre - v , rang ) else : return rendu_glouton ( a_rendre , rang + 1 ) \u25b6 Sujet 42 \u00b6 Exercice 42.1 \u00b6 Exercice 42.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction tri_selection qui prend en param\u00e8tre une liste tab de nombres entiers et qui renvoie la liste tri\u00e9e par ordre croissant. Il est demand\u00e9 de ne pas cr\u00e9er de nouvelle liste mais de modifier celle fournie. On utilisera l\u2019algorithme suivant : on recherche le plus petit \u00e9l\u00e9ment de la liste, en la parcourant du rang 0 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ; on recherche ensuite le plus petit \u00e9l\u00e9ment de la liste restreinte du rang 1 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ; on continue de cette fa\u00e7on jusqu'\u00e0 ce que la liste soit enti\u00e8rement tri\u00e9e. Exemple : >>> tri_selection ([ 1 , 52 , 6 , - 9 , 12 ]) [ - 9 , 1 , 6 , 12 , 52 ] 1 2 3 4 5 6 7 8 def tri_selection ( tab ): for i in range ( len ( tab ) - 1 ): indice_min = i for j in range ( i + 1 , len ( tab )): if tab [ j ] < tab [ indice_min ]: indice_min = j tab [ i ], tab [ indice_min ] = tab [ indice_min ], tab [ i ] return tab Exercice 42.2 \u00b6 Exercice 42.2 \u00c9nonc\u00e9 Correction Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99. Un \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante : le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ; si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ; si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ; si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ; si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd. La fonction randint est utilis\u00e9e. Si a et b sont des entiers tels que a <= b , randint(a,b) renvoie un nombre entier compris entre a et b . Compl\u00e9ter le code ci-dessous et le tester : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from random import randint def plus_ou_moins (): nb_mystere = randint ( 1 , ... ) nb_test = int ( input ( \"Proposez un nombre entre 1 et 99 : \" )) compteur = ... while nb_mystere != ... and compteur < ... : compteur = compteur + ... if nb_mystere ... nb_test : nb_test = int ( input ( \"Trop petit ! Testez encore : \" )) else : nb_test = int ( input ( \"Trop grand ! Testez encore : \" )) if nb_mystere == nb_test : print ( \"Bravo ! Le nombre \u00e9tait \" , ... ) print ( \"Nombre d'essais: \" , ... ) else : print ( \"Perdu ! Le nombre \u00e9tait \" , ... ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from random import randint def plus_ou_moins (): nb_mystere = randint ( 1 , 99 ) nb_test = int ( input ( 'Proposez un nombre entre 1 et 99 : ' )) compteur = 1 while nb_mystere != nb_test and compteur < 10 : compteur = compteur + 1 if nb_mystere > nb_test : nb_test = int ( input ( 'Trop petit ! Testez encore : ' )) else : nb_test = int ( input ( 'Trop grand ! Testez encore : ' )) if nb_mystere == nb_test : print ( 'Bravo ! Le nombre \u00e9tait ' , nb_mystere ) print ( 'Nombre d essais: ' , compteur ) else : print ( 'Perdu ! Le nombre \u00e9tait ' , nb_mystere ) \u25b6 Sujet 43 \u00b6 Exercice 43.1 \u00b6 Exercice 43.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction ecriture_binaire_entier_positif qui prend en param\u00e8tre un entier positif n et renvoie une liste d'entiers correspondant \u00e0 l\u2018\u00e9criture binaire de n . Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions. Exemples : >>> ecriture_binaire_entier_positif ( 0 ) [ 0 ] >>> ecriture_binaire_entier_positif ( 2 ) [ 1 , 0 ] >>> ecriture_binaire_entier_positif ( 105 ) [ 1 , 1 , 0 , 1 , 0 , 0 , 1 ] Aide : l'op\u00e9rateur // donne le quotient de la division euclidienne : 5//2 donne 2 ; l'op\u00e9rateur % donne le reste de la division euclidienne : 5%2 donne 1 ; append est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante : Soit T=[5,2,4] , alors T.append(10) ajoute 10 \u00e0 la liste T . Ainsi, T devient [5,2,4,10] . reverse est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste. Soit T=[5,2,4,10] . Apr\u00e8s T.reverse() , la liste devient [10,4,2,5] . On remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier n en partant de la gauche en appliquant successivement les instructions : b = n%2 n = n//2 r\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire. 1 2 3 4 5 6 7 8 9 10 11 def ecriture_binaire_entier_positif ( n ): # cas particulier pour n = 0 if n == 0 : return [ 0 ] # cas g\u00e9n\u00e9ral b = [] while n != 0 : b . append ( n % 2 ) n = n // 2 b . reverse () return b Exercice 43.2 \u00b6 Exercice 43.2 \u00c9nonc\u00e9 Correction La fonction tri_bulles prend en param\u00e8tre une liste T d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant. Le tri \u00e0 bulles est un tri en place qui commence par placer le plus grand \u00e9l\u00e9ment en derni\u00e8re position en parcourant la liste de gauche \u00e0 droite et en \u00e9changeant au passage les \u00e9l\u00e9ments voisins mal ordonn\u00e9s (si la valeur de l\u2019\u00e9l\u00e9ment d\u2019indice i a une valeur strictement sup\u00e9rieure \u00e0 celle de l\u2019indice i + 1 , ils sont \u00e9chang\u00e9s). Le tri place ensuite en avant-derni\u00e8re position le plus grand \u00e9l\u00e9ment de la liste priv\u00e9e de son dernier \u00e9l\u00e9ment en proc\u00e9dant encore \u00e0 des \u00e9changes d\u2019\u00e9l\u00e9ments voisins. Ce principe est r\u00e9p\u00e9t\u00e9 jusqu\u2019\u00e0 placer le minimum en premi\u00e8re position. Exemple : pour trier la liste [7, 9, 4, 3] : premi\u00e8re \u00e9tape : 7 et 9 ne sont pas \u00e9chang\u00e9s, puis 9 et 4 sont \u00e9chang\u00e9s, puis 9 et 3 sont \u00e9chang\u00e9s, la liste est alors [7, 4, 3, 9] deuxi\u00e8me \u00e9tape : 7 et 4 sont \u00e9chang\u00e9s, puis 7 et 3 sont \u00e9chang\u00e9s, la liste est alors [4, 3, 7, 9] troisi\u00e8me \u00e9tape : 4 et 3 sont \u00e9chang\u00e9s, la liste est alors [3, 4, 7, 9] Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction tri_bulles. 1 2 3 4 5 6 7 8 9 10 11 12 def tri_bulles ( T ): ''' Renvoie le tableau T tri\u00e9 par ordre croissant ''' n = len ( T ) for i in range ( ... , ... , - 1 ): for j in range ( i ): if T [ j ] > T [ ... ]: ... = T [ j ] T [ j ] = T [ ... ] T [ j + 1 ] = temp return T Exemples : >>> tri_bulles ([]) [] >>> tri_bulles ([ 7 ]) [ 7 ] >>> tri_bulles ([ 9 , 3 , 7 , 2 , 3 , 1 , 6 ]) [ 1 , 2 , 3 , 3 , 6 , 7 , 9 ] >>> tri_bulles ([ 9 , 7 , 4 , 3 ]) [ 3 , 4 , 7 , 9 ] 1 2 3 4 5 6 7 8 9 10 11 12 def tri_bulles ( T ): ''' Renvoie le tableau T tri\u00e9 par ordre croissant ''' n = len ( T ) for i in range ( n - 1 , - 1 , - 1 ): for j in range ( i ): if T [ j ] > T [ j + 1 ]: temp = T [ j ] T [ j ] = T [ j + 1 ] T [ j + 1 ] = temp return T \u25b6 Sujet 44 \u00b6 Exercice 44.1 \u00b6 Exercice 44.1 \u00c9nonc\u00e9 Correction Programmer une fonction renverse , prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide mot et renvoie une cha\u00eene de caract\u00e8res en inversant ceux de la cha\u00eene mot . Exemple : >>> renverse ( \"informatique\" ) \"euqitamrofni\" 1 2 3 4 5 def renverse ( mot ): sol = '' for lettre in mot : sol = lettre + sol return sol Exercice 44.2 \u00b6 Exercice 44.2 \u00c9nonc\u00e9 Correction Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts entiers et positifs : 1 et lui-m\u00eame. Le crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain nombre n fix\u00e9. On consid\u00e8re pour cela un tableau tab de n bool\u00e9ens, initialement tous \u00e9gaux \u00e0 True , sauf tab[0] et tab[1] qui valent False , 0 et 1 n\u2019\u00e9tant pas des nombres premiers. On parcourt alors ce tableau de gauche \u00e0 droite. Pour chaque indice i : si tab[i] vaut True : le nombre i est premier et on donne la valeur False \u00e0 toutes les cases du tableau dont l\u2019indice est un multiple de i , \u00e0 partir de 2*i (c\u2019est-\u00e0-dire 2*i , 3*i ...). si tab[i] vaut False : le nombre i n\u2019est pas premier et on n\u2019effectue aucun changement sur le tableau. On dispose de la fonction crible , incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un entier n strictement positif et renvoyant un tableau contenant tous les nombres premiers plus petits que n . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def crible ( n ): \"\"\" Renvoie un tableau contenant tous les nombres premiers plus petits que N \"\"\" premiers = [] tab = [ True ] * n tab [ 0 ], tab [ 1 ] = False , False for i in range ( ... , n ): if tab [ i ] == ... : premiers . append ( ... ) for multiple in range ( 2 * i , n , ... ): tab [ multiple ] = ... return premiers assert crible ( 40 ) == [ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 ] Compl\u00e9ter le code de cette fonction. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def crible ( n ): \"\"\" Renvoie un tableau contenant tous les nombres premiers plus petits que N \"\"\" premiers = [] tab = [ True ] * n tab [ 0 ], tab [ 1 ] = False , False for i in range ( 2 , n ): if tab [ i ] == True : premiers . append ( i ) for multiple in range ( 2 * i , n , i ): tab [ multiple ] = False return premiers assert crible ( 40 ) == [ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 ] \u25b6 Sujet 45 \u00b6 Exercice 45.1 \u00b6 Exercice 45.1 \u00c9nonc\u00e9 Correction On veut trier par ordre croissant les notes d\u2019une \u00e9valuation qui sont des nombres entiers compris entre 0 et 10 (inclus). Ces notes sont contenues dans une liste notes_eval . \u00c9crire une fonction rangement_valeurs prenant en param\u00e8tre la liste notes_eval et renvoyant une liste de longueur 11 telle que la valeur de cette liste \u00e0 chaque rang est \u00e9gale au nombre de notes valant ce rang. Ainsi le terme de rang 0 indique le nombre de note 0, le terme de rang 1 le nombre de note 1, etc. \u00c9crire ensuite une fonction notes_triees prenant en param\u00e8tre la liste des effectifs des notes et renvoyant une liste contenant la liste, tri\u00e9e dans l\u2019ordre croissant, des notes des \u00e9l\u00e8ves. Exemple : >>> notes_eval = [ 2 , 0 , 5 , 9 , 6 , 9 , 10 , 5 , 7 , 9 , 9 , 5 , 0 , 9 , 6 , 5 , 4 ] >>> effectifs_notes = rangement_valeurs ( notes_eval ) >>> effectifs_notes [ 2 , 0 , 1 , 0 , 1 , 4 , 2 , 1 , 0 , 5 , 1 ] >>> notes_triees ( effectifs_notes ) [ 0 , 0 , 2 , 4 , 5 , 5 , 5 , 5 , 6 , 6 , 7 , 9 , 9 , 9 , 9 , 9 , 10 ] 1 2 3 4 5 6 7 8 9 10 11 12 13 def rangement_valeurs ( notes_eval ): lst = [ 0 ] * 11 for note in notes_eval : lst [ note ] += 1 return lst def notes_triees ( effectifs_notes ): triees = [] for i in range ( 11 ): if effectifs_notes [ i ] != 0 : for _ in range ( effectifs_notes [ i ]): triees . append ( i ) return triees Exercice 45.2 \u00b6 Exercice 45.2 \u00c9nonc\u00e9 Correction L\u2019objectif de cet exercice est d\u2019\u00e9crire deux fonctions r\u00e9cursives dec_to_bin et bin_to_dec assurant respectivement la conversion de l\u2019\u00e9criture d\u00e9cimale d\u2019un nombre entier vers son \u00e9criture en binaire et, r\u00e9ciproquement, la conversion de l\u2019\u00e9criture en binaire d\u2019un nombre vers son \u00e9criture d\u00e9cimale. Dans cet exercice, on s\u2019interdit l\u2019usage des fonctions Python bin et int . On rappelle sur l\u2019exemple ci-dessous une fa\u00e7on d\u2019obtenir l\u2019\u00e9criture en binaire du nombre 25 : \\(25 = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 (0 + 2 \\times 6)\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 \\times 3))\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 (1 + 2 \\times 1)))\\) \\(\\phantom{25} = 1 \\times 2^0 + 0 \\times 2^1 + 0 \\times 2^2 + 1 \\times 2^3 + 1 \\times 2^4\\) L'\u00e9criture binaire de 25 est donc 11001 . 0n rappelle \u00e9galement que : a // 2 renvoie le quotient de la division euclidienne de a par 2. a % 2 renvoie le reste dans la division euclidienne de a par 2. On indique enfin qu\u2019en Python si mot = \"informatique\" alors : mot[-1] renvoie 'e' , c\u2019est-\u00e0-dire le dernier caract\u00e8re de la cha\u00eene de caract\u00e8res mot . mot[:-1] renvoie 'informatiqu' , c\u2019est-\u00e0-dire l\u2019ensemble de la cha\u00eene de caract\u00e8res mot priv\u00e9e de son dernier caract\u00e8re. Compl\u00e9ter, puis tester, les codes de deux fonctions ci-dessous. On pr\u00e9cise que la fonction r\u00e9cursive dec_to_bin prend en param\u00e8tre un nombre entier et renvoie une cha\u00eene de caract\u00e8res contenant l\u2019\u00e9criture en binaire du nombre pass\u00e9 en param\u00e8tre. Exemple : >>> dec_to_bin ( 25 ) '11001' La fonction r\u00e9cursive bin_to_dec prend en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant l\u2019\u00e9criture d\u2019un nombre en binaire et renvoie l\u2019\u00e9criture d\u00e9cimale de ce nombre. >>> bin_to_dec ( '101010' ) 42 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def dec_to_bin ( nb_dec ): q , r = nb_dec // 2 , nb_dec % 2 if q == ... : return str ( r ) else : return dec_to_bin ( ... ) + ... def bin_to_dec ( nb_bin ): if nb_bin == '0' : return 0 elif ... : return 1 else : if nb_bin [ - 1 ] == '0' : bit_droit = 0 else : bit_droit = ... return ... * bin_to_dec ( nb_bin [: - 1 ]) + ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def dec_to_bin ( nb_dec ): q , r = nb_dec // 2 , nb_dec % 2 if q == 0 : return str ( r ) else : return dec_to_bin ( q ) + str ( r ) def bin_to_dec ( nb_bin ): if nb_bin == '0' : return 0 elif nb_bin == '1' : return 1 else : if nb_bin [ - 1 ] == '0' : bit_droit = 0 else : bit_droit = 1 return 2 * bin_to_dec ( nb_bin [: - 1 ]) + bit_droit", "title": "Epreuve pratique NSI"}, {"location": "term/ep.html#epreuve-pratique-bns-2023", "text": "Les sujets ci-dessous correspondent \u00e0 la derni\u00e8re version officielle, publi\u00e9e le 25/01/2023 .", "title": "\u00c9preuve Pratique BNS 2023"}, {"location": "term/ep.html#sujet-01", "text": "", "title": "\u25b6 Sujet 01"}, {"location": "term/ep.html#exercice-011", "text": "Exercice 01.1 \u00c9nonc\u00e9 Correction Programmer la fonction verifie qui prend en param\u00e8tre un tableau de valeurs num\u00e9riques non vide et qui renvoie True si ce tableau est tri\u00e9 dans l\u2019ordre croissant, False sinon. Exemples : Exemples : >>> verifie ([ 0 , 5 , 8 , 8 , 9 ]) True >>> verifie ([ 8 , 12 , 4 ]) False >>> verifie ([ - 1 , 4 ]) True >>> verifie ([ 5 ]) True 1 2 3 4 5 def verifie ( tab ): for i in range ( 1 , len ( tab )): if tab [ i ] < tab [ i - 1 ]: return False return True", "title": "Exercice 01.1"}, {"location": "term/ep.html#exercice-012", "text": "Exercice 01.2 \u00c9nonc\u00e9 Correction Les r\u00e9sultats d'un vote ayant trois issues possibles 'A', 'B' et 'C' sont stock\u00e9s dans un tableau. Exemple : urne = [ 'A' , 'A' , 'A' , 'B' , 'C' , 'B' , 'C' , 'B' , 'C' , 'B' ] La fonction depouille doit permettre de compter le nombre de votes exprim\u00e9s pour chaque artiste. Elle prend en param\u00e8tre un tableau et renvoie le r\u00e9sultat dans un dictionnaire dont les cl\u00e9s sont les noms des artistes et les valeurs le nombre de votes en leur faveur. La fonction vainqueur doit d\u00e9signer le nom du ou des gagnants. Elle prend en param\u00e8tre un dictionnaire dont la structure est celle du dictionnaire renvoy\u00e9 par la fonction depouille et renvoie un tableau. Ce tableau peut donc contenir plusieurs \u00e9l\u00e9ments s\u2019il y a des artistes ex- aequo. Compl\u00e9ter les fonctions depouille et vainqueur ci-apr\u00e8s pour qu\u2019elles renvoient les r\u00e9sultats attendus. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 urne = [ 'A' , 'A' , 'A' , 'B' , 'C' , 'B' , 'C' , 'B' , 'C' , 'B' ] def depouille ( urne ): resultat = ... for bulletin in urne : if ... : resultat [ bulletin ] = resultat [ bulletin ] + 1 else : ... return resultat def vainqueur ( election ): vainqueur = '' nmax = 0 for candidat in election : if ... > ... : nmax = ... vainqueur = candidat liste_finale = [ nom for nom in election if election [ nom ] == ... ] return ... Exemples d\u2019utilisation : >>> election = depouille ( urne ) >>> election { 'A' : 3 , 'B' : 4 , 'C' : 3 } >>> vainqueur ( election ) [ 'B' ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 urne = [ 'A' , 'A' , 'A' , 'B' , 'C' , 'B' , 'C' , 'B' , 'C' , 'B' ] def depouille ( urne ): resultat = {} for bulletin in urne : if bulletin in resultat : resultat [ bulletin ] = resultat [ bulletin ] + 1 else : resultat [ bulletin ] = 1 return resultat def vainqueur ( election ): vainqueur = '' #(1) nmax = 0 for candidat in election : if election [ candidat ] > nmax : nmax = election [ candidat ] vainqueur = candidat #(2) liste_finale = [ nom for nom in election if election [ nom ] == nmax ] return liste_finale Il est pourtant tr\u00e8s d\u00e9conseill\u00e9 de nommer une variable avec le m\u00eame nom que la fonction qui la contient... Cette variable vainqueur est inutile, on ne s'en sert pas dans l'\u00e9laboration de la liste finale.", "title": "Exercice 01.2"}, {"location": "term/ep.html#sujet-02", "text": "", "title": "\u25b6 Sujet 02"}, {"location": "term/ep.html#exercice-021", "text": "Exercice 02.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction indices_maxi qui prend en param\u00e8tre une liste tab , non vide, de nombres entiers et renvoie un couple donnant d\u2019une part le plus grand \u00e9l\u00e9ment de cette liste et d\u2019autre part la liste des indices de la liste tab o\u00f9 appara\u00eet ce plus grand \u00e9l\u00e9ment. Exemple : >>> indices_maxi ([ 1 , 5 , 6 , 9 , 1 , 2 , 3 , 7 , 9 , 8 ]) ( 9 , [ 3 , 8 ]) >>> indices_maxi ([ 7 ]) ( 7 , [ 0 ]) 1 2 3 4 5 6 7 8 9 10 def indices_maxi ( tab ): val_max = tab [ 0 ] ind_max = [] for i in range ( len ( tab )): if tab [ i ] > val_max : val_max = tab [ i ] for i in range ( len ( tab )): if tab [ i ] == val_max : ind_max . append ( i ) return ( val_max , ind_max )", "title": "Exercice 02.1"}, {"location": "term/ep.html#exercice-022", "text": "Exercice 02.2 \u00c9nonc\u00e9 Correction Cet exercice utilise des piles qui seront repr\u00e9sent\u00e9es en Python par des listes (type list ). On rappelle que l\u2019expression liste_1 = list(liste) fait une copie de liste ind\u00e9pendante de liste , que l\u2019expression x = liste.pop() enl\u00e8ve le sommet de la pile liste et le place dans la variable x et, enfin, que l\u2019expression liste.append(v) place la valeur v au sommet de la pile liste . Compl\u00e9ter le code Python de la fonction positif ci-dessous qui prend une pile liste de nombres entiers en param\u00e8tre et qui renvoie la pile des entiers positifs dans le m\u00eame ordre, sans modifier la variable liste . 1 2 3 4 5 6 7 8 9 10 11 def positif ( pile ): pile_1 = ... ( pile ) pile_2 = ... while pile_1 != []: x = ... if ... >= 0 : pile_2 . append ( ... ) while pile_2 != ... : x = pile_2 . pop () ... return pile_1 Exemple : >>> positif ([ - 1 , 0 , 5 , - 3 , 4 , - 6 , 10 , 9 , - 8 ]) [ 0 , 5 , 4 , 10 , 9 ] >>> positif ([ - 2 ]) [] 1 2 3 4 5 6 7 8 9 10 11 def positif ( pile ): pile_1 = list ( pile ) pile_2 = [] while pile_1 != []: x = pile_1 . pop () if x >= 0 : pile_2 . append ( x ) while pile_2 != []: x = pile_2 . pop () pile_1 . append ( x ) return pile_1", "title": "Exercice 02.2"}, {"location": "term/ep.html#sujet-03", "text": "", "title": "\u25b6 Sujet 03"}, {"location": "term/ep.html#exercice-031", "text": "Exercice 03.1 \u00c9nonc\u00e9 Correction Dans cet exercice, les nombres sont des entiers ou des flottants. \u00c9crire une fonction moyenne renvoyant la moyenne pond\u00e9r\u00e9e d\u2019une liste non vide, pass\u00e9e en param\u00e8tre, de tuples \u00e0 deux \u00e9l\u00e9ments de la forme ( valeur , coefficient ) o\u00f9 valeur et coefficient sont des nombres positifs ou nuls. Si la somme des coefficients est nulle, la fonction renvoie None , si la somme des coefficients est non nulle, la fonction renvoie, sous forme de flottant, la moyenne des valeurs affect\u00e9es de leur coefficient. Exemple : >>> moyenne ([( 8 , 2 ), ( 12 , 0 ), ( 13.5 , 1 ), ( 5 , 0.5 )]) 9.142857142857142 >>> moyenne ([( 3 , 0 ), ( 5 , 0 )]) None Dans le premier exemple la moyenne est calcul\u00e9e par la formule : \\(\\dfrac{8 \\times 2 + 12 \\times 0 + 13,5 \\times 1 + 5 \\times 0,5}{2+0+1+0,5}\\) 1 2 3 4 5 6 7 8 9 def moyenne ( tab ): somme = 0 coeffs = 0 for couple in tab : somme += couple [ 0 ] * couple [ 1 ] coeffs += couple [ 1 ] if coeffs == 0 : return None return somme / coeffs", "title": "Exercice 03.1"}, {"location": "term/ep.html#exercice-032", "text": "Exercice 03.2 \u00c9nonc\u00e9 Correction On travaille sur des dessins en noir et blanc obtenu \u00e0 partir de pixels noirs et blancs : La figure \u00ab c\u0153ur \u00bb ci-dessus va servir d\u2019exemple. On la repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire par une liste compos\u00e9e de sous-listes de m\u00eame longueurs. Chaque sous-liste repr\u00e9sentera donc une ligne du dessin. Dans le code ci-dessous, la fonction affiche permet d\u2019afficher le dessin. Les pixels noirs (1 dans la grille) seront repr\u00e9sent\u00e9s par le caract\u00e8re \"*\" et les blancs (0 dans la grille) par deux espaces. La fonction zoomListe prend en argument une liste liste_depart et un entier k . Elle renvoie une liste o\u00f9 chaque \u00e9l\u00e9ment de liste_depart est dupliqu\u00e9 k fois. La fonction zoomDessin prend en argument la grille dessin et renvoie une grille o\u00f9 toutes les lignes de dessin sont zoom\u00e9es k fois et r\u00e9p\u00e9t\u00e9es k fois. Soit le code ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 coeur = [[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 ], \\ [ 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 ], \\ [ 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ], \\ [ 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ], \\ [ 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ], \\ [ 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ], \\ [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]] def affiche ( dessin ): ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par des \" *\" , les 0 par deux espaces \" \" ''' for ligne in dessin : for col in ligne : if col == 1 : print ( \" *\" , end = \"\" ) else : print ( \" \" , end = \"\" ) print () def zoomListe ( liste_depart , k ): '''renvoie une liste contenant k fois chaque \u00e9l\u00e9ment de liste_depart''' liste_zoom = ... for elt in ... : for i in range ( k ): ... return liste_zoom def zoomDessin ( grille , k ): '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois ET r\u00e9p\u00e9t\u00e9es k fois''' grille_zoom = [] for elt in grille : liste_zoom = ... for i in range ( k ): ... . append ( ... ) return grille_zoom R\u00e9sultats \u00e0 obtenir : >>> affiche ( coeur ) >>> affiche ( zoomDessin ( coeurcoeur = [[ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 ], \\ [ 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 ], \\ [ 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ], \\ [ 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ], \\ [ 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ], \\ [ 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ], \\ [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ], \\ [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ]] def affiche ( dessin ): ''' affichage d'une grille : les 1 sont repr\u00e9sent\u00e9s par des \" *\" , les 0 par deux espaces \" \" ''' for ligne in dessin : for col in ligne : if col == 1 : print ( ' *' , end = '' ) else : print ( ' ' , end = '' ) print () def zoomListe ( liste_depart , k ): '''renvoie une liste contenant k fois chaque \u00e9l\u00e9ment de liste_depart''' liste_zoom = [] for elt in liste_depart : for i in range ( k ): liste_zoom . append ( elt ) return liste_zoom def zoomDessin ( grille , k ): '''renvoie une grille o\u00f9 les lignes sont zoom\u00e9es k fois ET r\u00e9p\u00e9t\u00e9es k fois''' grille_zoom = [] for elt in grille : liste_zoom = zoomListe ( elt , k ) for i in range ( k ): grille_zoom . append ( liste_zoom ) return grille_zoom", "title": "Exercice 03.2"}, {"location": "term/ep.html#sujet-04", "text": "", "title": "\u25b6 Sujet 04"}, {"location": "term/ep.html#exercice-041", "text": "Exercice 04.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction a_doublon qui prend en param\u00e8tre une liste tri\u00e9e de nombres et renvoie True si la liste contient au moins deux nombres identiques, False sinon. Par exemple : >>> a_doublon ([]) False >>> a_doublon ([ 1 ]) False >>> a_doublon ([ 1 , 2 , 4 , 6 , 6 ]) True >>> a_doublon ([ 2 , 5 , 7 , 7 , 7 , 9 ]) True >>> a_doublon ([ 0 , 2 , 3 ]) False 1 2 3 4 5 def a_doublon ( lst ): for i in range ( len ( lst ) - 1 ): if lst [ i ] == lst [ i + 1 ]: return True return False", "title": "Exercice 04.1"}, {"location": "term/ep.html#exercice-042", "text": "Exercice 04.2 \u00c9nonc\u00e9 Correction On souhaite g\u00e9n\u00e9rer des grilles du jeu de d\u00e9mineur \u00e0 partir de la position des bombes \u00e0 placer. On se limite \u00e0 la g\u00e9n\u00e9ration de grilles carr\u00e9es de taille \\(n \\times n\\) o\u00f9 \\(n\\) est le nombre de bombes du jeu. Dans le jeu du d\u00e9mineur, chaque case de la grille contient soit une bombe, soit une valeur qui correspond aux nombres de bombes situ\u00e9es dans le voisinage direct de la case (au- dessus, en dessous, \u00e0 droite, \u00e0 gauche ou en diagonale : chaque case a donc 8 voisins si elle n'est pas situ\u00e9e au bord de la grille). Voici un exemple de grille \\(5 \\times 5\\) de d\u00e9mineur dans laquelle la bombe est repr\u00e9sent\u00e9e par une \u00e9toile : On utilise une liste de listes pour repr\u00e9senter la grille et on choisit de coder une bombe par la valeur -1. L'exemple ci-contre sera donc cod\u00e9 par la liste : [[ 1 , 1 , 1 , 0 , 0 ], [ 1 , - 1 , 1 , 1 , 1 ], [ 2 , 2 , 3 , 2 , - 1 ], [ 1 , - 1 , 2 , - 1 , 3 ], [ 1 , 1 , 2 , 2 , - 1 ]] Compl\u00e9ter le code suivant afin de g\u00e9n\u00e9rer des grilles de d\u00e9mineur, on pourra v\u00e9rifier que l\u2019instruction genere_grille([(1, 1), (2, 4), (3, 1), (3, 3), (4, 4)]) produit bien la liste donn\u00e9e en exemple. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def voisinage ( n , ligne , colonne ): \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\" voisins = [] for l in range ( max ( 0 , ligne - 1 ), min ( n , ligne + 2 )): for c in range ( max ( 0 , colonne - 1 ), min ( n , colonne + 2 )): if ( l , c ) != ( ligne , colonne ): voisins . append (( l , c )) return voisins def incremente_voisins ( grille , ligne , colonne ): \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\" voisins = ... for l , c in voisins : if grille [ l ][ c ] != ... : # si ce n'est pas une bombe ... # on ajoute 1 \u00e0 sa valeur def genere_grille ( bombes ): \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en param\u00e8tre. \"\"\" n = len ( bombes ) # Initialisation d'une grille nxn remplie de 0 grille = [[ 0 for colonne in range ( n )] for ligne in range ( n )] # Place les bombes et calcule les valeurs des autres cases for ligne , colonne in bombes : grille [ ligne ][ colonne ] = ... # place la bombe ... # incr\u00e9mente ses voisins return grille 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def voisinage ( n , ligne , colonne ): \"\"\" Renvoie la liste des coordonn\u00e9es des voisins de la case (ligne, colonne) en g\u00e9rant les cases sur les bords. \"\"\" voisins = [] for l in range ( max ( 0 , ligne - 1 ), min ( n , ligne + 2 )): for c in range ( max ( 0 , colonne - 1 ), min ( n , colonne + 2 )): if ( l , c ) != ( ligne , colonne ): voisins . append (( l , c )) return voisins def incremente_voisins ( grille , ligne , colonne ): \"\"\" Incr\u00e9mente de 1 toutes les cases voisines d'une bombe.\"\"\" voisins = voisinage ( len ( grille ), ligne , colonne ) for l , c in voisins : if grille [ l ][ c ] != - 1 : # si ce n'est pas une bombe grille [ l ][ c ] += 1 # on ajoute 1 \u00e0 sa valeur def genere_grille ( bombes ): \"\"\" Renvoie une grille de d\u00e9mineur de taille nxn o\u00f9 n est le nombre de bombes, en pla\u00e7ant les bombes \u00e0 l'aide de la liste bombes de coordonn\u00e9es (tuples) pass\u00e9e en param\u00e8tre. \"\"\" n = len ( bombes ) # Initialisation d'une grille nxn remplie de 0 grille = [[ 0 for colonne in range ( n )] for ligne in range ( n )] # Place les bombes et calcule les valeurs des autres cases for ligne , colonne in bombes : grille [ ligne ][ colonne ] = - 1 # place la bombe incremente_voisins ( grille , ligne , colonne ) # incr\u00e9mente ses voisins return grille", "title": "Exercice 04.2"}, {"location": "term/ep.html#sujet-05", "text": "", "title": "\u25b6 Sujet 05"}, {"location": "term/ep.html#exercice-051", "text": "Exercice 05.1 \u00c9nonc\u00e9 Correction \u00c9crire en python deux fonctions : lancer de param\u00e8tre n , un entier positif, qui renvoie un tableau de type list de n entiers obtenus al\u00e9atoirement entre 1 et 6 (1 et 6 inclus) ; paire_6 de param\u00e8tre tab , un tableau de type list de n entiers entre 1 et 6 obtenus al\u00e9atoirement, qui renvoie un bool\u00e9en \u00e9gal \u00e0 True si le nombre de 6 est sup\u00e9rieur ou \u00e9gal \u00e0 2, False sinon. On pourra utiliser la fonction randint(a,b) du module random pour laquelle la documentation officielle est la suivante : Renvoie un entier al\u00e9atoire N tel que a <=N <= b. Exemples : >>> lancer1 = lancer ( 5 ) [ 5 , 6 , 6 , 2 , 2 ] >>> paire_6 ( lancer1 ) True >>> lancer2 = lancer ( 5 ) [ 6 , 5 , 1 , 6 , 6 ] >>> paire_6 ( lancer2 ) True >>> lancer3 = lancer ( 3 ) [ 2 , 2 , 6 ] >>> paire_6 ( lancer3 ) False >>> lancer4 = lancer ( 0 ) [] >>> paire_6 ( lancer4 ) False 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from random import randint def lancer ( n ): return [ randint ( 1 , 6 ) for _ in range ( n )] def paire_6 ( tab ): nb = 0 for elt in tab : if elt == 6 : nb += 1 if nb >= 2 : return True else : return False", "title": "Exercice 05.1"}, {"location": "term/ep.html#exercice-052", "text": "Exercice 05.2 \u00c9nonc\u00e9 Correction On consid\u00e8re une image en 256 niveaux de gris que l\u2019on repr\u00e9sente par une grille de nombres, c\u2019est-\u00e0-dire une liste compos\u00e9e de sous-listes toutes de longueurs identiques. La largeur de l\u2019image est donc la longueur d\u2019une sous-liste et la hauteur de l\u2019image est le nombre de sous-listes. Chaque sous-liste repr\u00e9sente une ligne de l\u2019image et chaque \u00e9l\u00e9ment des sous-listes est un entier compris entre 0 et 255, repr\u00e9sentant l\u2019intensit\u00e9 lumineuse du pixel. Le n\u00e9gatif d\u2019une image est l\u2019image constitu\u00e9e des pixels x_n tels que x_n + x_i = 255 o\u00f9 x_i est le pixel correspondant de l\u2019image initiale. Compl\u00e9ter le programme suivant : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def nbLig ( image ): '''renvoie le nombre de lignes de l'image''' return ... def nbCol ( image ): '''renvoie la largeur de l'image''' return ... def negatif ( image ): '''renvoie le negatif de l'image sous la forme d'une liste de listes''' # on cree une image de 0 aux memes dimensions que le parametre image L = [[ 0 for k in range ( nbCol ( image ))] for i in range ( nbLig ( image ))] for i in range ( nbLig ( image )): for j in range ( ... ): L [ i ][ j ] = ... return L def binaire ( image , seuil ): '''renvoie une image binarisee de l'image sous la forme d'une liste de listes contenant des 0 si la valeur du pixel est strictement inferieure au seuil et 1 sinon''' # on cree une image de 0 aux memes dimensions que le parametre image L = [[ 0 for k in range ( nbCol ( image ))] for i in range ( nbLig ( image ))] for i in range ( nbLig ( image )): for j in range ( ... ): if image [ i ][ j ] < ... : L [ i ][ j ] = ... else : L [ i ][ j ] = ... return L Exemples : >>> img = [[ 20 , 34 , 254 , 145 , 6 ], [ 23 , 124 , 237 , 225 , 69 ], [ 197 , 174 , 207 , 25 , 87 ], [ 255 , 0 , 24 , 197 , 189 ]] >>> nbLig ( img ) 4 >>> nbCol ( img ) 5 >>> negatif ( img ) [[ 235 , 221 , 1 , 110 , 249 ], [ 232 , 131 , 18 , 30 , 186 ], [ 58 , 81 , 48 , 230 , 168 ], [ 0 , 255 , 231 , 58 , 66 ]] >>> binaire ( img , 120 ) [[ 0 , 0 , 1 , 1 , 0 ], [ 0 , 1 , 1 , 1 , 0 ], [ 1 , 1 , 1 , 0 , 0 ], [ 1 , 0 , 0 , 1 , 1 ]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def nbLig ( image ): '''renvoie le nombre de lignes de l'image''' return len ( image ) def nbCol ( image ): '''renvoie la largeur de l'image''' return len ( image [ 0 ]) def negatif ( image ): '''renvoie le negatif de l'image sous la forme d'une liste de listes''' # on cree une image de 0 aux memes dimensions que le parametre image L = [[ 0 for k in range ( nbCol ( image ))] for i in range ( nbLig ( image ))] for i in range ( nbLig ( image )): for j in range ( nbCol ( image )): L [ i ][ j ] = 255 - image [ i ][ j ] return L def binaire ( image , seuil ): '''renvoie une image binarisee de l'image sous la forme d'une liste de listes contenant des 0 si la valeur du pixel est strictement inferieure au seuil et 1 sinon''' # on cree une image de 0 aux memes dimensions que le parametre image L = [[ 0 for k in range ( nbCol ( image ))] for i in range ( nbLig ( image ))] for i in range ( nbLig ( image )): for j in range ( nbCol ( image )): if image [ i ][ j ] < seuil : L [ i ][ j ] = 0 else : L [ i ][ j ] = 1 return L", "title": "Exercice 05.2"}, {"location": "term/ep.html#sujet-06", "text": "", "title": "\u25b6 Sujet 06"}, {"location": "term/ep.html#exercice-061", "text": "Exercice 06.1 \u00c9nonc\u00e9 Correction Programmer la fonction recherche , prenant en param\u00e8tre un tableau non vide tab (type list ) d'entiers et un entier n , et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau. Exemples >>> recherche ([ 5 , 3 ], 1 ) 2 >>> recherche ([ 2 , 4 ], 2 ) 0 >>> recherche ([ 2 , 3 , 5 , 2 , 4 ], 2 ) 3 1 2 3 4 5 6 def recherche ( tab , n ): indice_solution = len ( tab ) for i in range ( len ( tab )): if tab [ i ] == n : indice_solution = i return indice_solution", "title": "Exercice 06.1"}, {"location": "term/ep.html#exercice-062", "text": "Exercice 06.2 \u00c9nonc\u00e9 Correction On souhaite programmer une fonction donnant la distance la plus courte entre un point de d\u00e9part et une liste de points. Les points sont tous \u00e0 coordonn\u00e9es enti\u00e8res. Les points sont donn\u00e9s sous la forme d'un tuple de deux entiers. La liste des points \u00e0 traiter est donc un tableau de tuples. On rappelle que la distance entre deux points du plan de coordonn\u00e9es \\((x;y)\\) et \\((x';y')\\) est donn\u00e9e par la formule : \\[d=\\sqrt{(x-x')^2+(y-y')^2}\\] On importe pour cela la fonction racine carr\u00e9e ( sqrt ) du module math de Python. Compl\u00e9ter le code des fonctions distance et plus_courte_distance fournies ci-dessous pour qu\u2019elles r\u00e9pondent \u00e0 leurs sp\u00e9cifications. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from math import sqrt # import de la fonction racine carr\u00e9e def distance ( point1 , point2 ): \"\"\" Calcule et renvoie la distance entre deux points. \"\"\" return sqrt (( ... ) ** 2 + ( ... ) ** 2 ) def plus_courte_distance ( tab , depart ): \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\" point = tab [ 0 ] min_dist = ... for i in range ( 1 , ... ): if distance ( tab [ i ], depart ) ... : point = ... min_dist = ... return point Exemples : >>> distance (( 1 , 0 ), ( 5 , 3 )) 5.0 >>> distance (( 1 , 0 ), ( 0 , 1 )) 1.4142135623730951 >>> plus_courte_distance ([( 7 , 9 ), ( 2 , 5 ), ( 5 , 2 )], ( 0 , 0 )) ( 2 , 5 ) >>> plus_courte_distance ([( 7 , 9 ), ( 2 , 5 ), ( 5 , 2 )], ( 5 , 2 )) ( 5 , 2 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from math import sqrt def distance ( point1 , point2 ): \"\"\" Calcule et renvoie la distance entre deux points. \"\"\" return sqrt (( point1 [ 0 ] - point2 [ 0 ]) ** 2 + (( point1 [ 1 ] - point2 [ 1 ])) ** 2 ) def plus_courte_distance ( tab , depart ): \"\"\" Renvoie le point du tableau tab se trouvant \u00e0 la plus courte distance du point depart.\"\"\" point = tab [ 0 ] min_dist = distance ( point , depart ) for i in range ( 1 , len ( tab )): if distance ( tab [ i ], depart ) < min_dist : point = tab [ i ] min_dist = distance ( tab [ i ], depart ) return point", "title": "Exercice 06.2"}, {"location": "term/ep.html#sujet-07", "text": "", "title": "\u25b6 Sujet 07"}, {"location": "term/ep.html#exercice-071", "text": "Exercice 07.1 \u00c9nonc\u00e9 Correction Programmer la fonction fusion prenant en param\u00e8tres deux tableaux non vides tab1 et tab2 (type list ) d'entiers, chacun dans l\u2019ordre croissant, et renvoyant un tableau tri\u00e9 dans l\u2019ordre croissant et contenant l\u2019ensemble des valeurs de tab1 et tab2 . Exemples : >>> fusion ([ 3 , 5 ], [ 2 , 5 ]) [ 2 , 3 , 5 , 5 ] >>> fusion ([ - 2 , 4 ], [ - 3 , 5 , 10 ]) [ - 3 , - 2 , 4 , 5 , 10 ] >>> fusion ([ 4 ], [ 2 , 6 ]) [ 2 , 4 , 6 ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def fusion ( tab1 , tab2 ): tab_fusion = [] i1 = 0 i2 = 0 while i1 < len ( tab1 ) and i2 < len ( tab2 ): if tab1 [ i1 ] < tab2 [ i2 ]: tab_fusion . append ( tab1 [ i1 ]) i1 += 1 else : tab_fusion . append ( tab2 [ i2 ]) i2 += 1 if i1 == len ( tab1 ): while i2 < len ( tab2 ): tab_fusion . append ( tab2 [ i2 ]) i2 += 1 else : while i1 < len ( tab1 ): tab_fusion . append ( tab1 [ i1 ]) i1 += 1 return tab_fusion", "title": "Exercice 07.1"}, {"location": "term/ep.html#exercice-072", "text": "Exercice 07.2 \u00c9nonc\u00e9 Correction Le but de cet exercice est d\u2019\u00e9crire une fonction r\u00e9cursive traduire_romain qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res, non vide, repr\u00e9sentant un nombre \u00e9crit en chiffres romains et qui renvoie son \u00e9criture d\u00e9cimale. Les chiffres romains consid\u00e9r\u00e9s sont : I, V, X, L, C, D et M. Ils repr\u00e9sentent respectivement les nombres 1, 5, 10, 50, 100, 500, et 1000 en base dix. On dispose d\u2019un dictionnaire romains dont les cl\u00e9s sont les caract\u00e8res apparaissant dans l\u2019\u00e9criture en chiffres romains et les valeurs sont les nombres entiers associ\u00e9s en \u00e9criture d\u00e9cimale : romains = {\"I\":1, \"V\":5, \"X\":10, \"L\":50, \"C\":100, \"D\":500, \"M\":1000} Le code de la fonction traduire_romain fournie repose sur le principe suivant : la valeur d\u2019un caract\u00e8re est ajout\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur sup\u00e9rieure (ou \u00e9gale) \u00e0 celle du caract\u00e8re qui le suit ; la valeur d\u2019un caract\u00e8re est retranch\u00e9e \u00e0 la valeur du reste de la cha\u00eene si ce caract\u00e8re a une valeur strictement inf\u00e9rieure \u00e0 celle du caract\u00e8re qui le suit. Ainsi, XIV correspond au nombre 10 + 5 - 1 puisque : la valeur de X (10) est sup\u00e9rieure \u00e0 celle de I (1), on ajoute donc 10 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire IV ; la valeur de I (1) est strictement inf\u00e9rieure \u00e0 celle de V (5), on soustrait donc 1 \u00e0 la valeur du reste de la cha\u00eene, c\u2019est-\u00e0-dire V. On rappelle que pour priver une cha\u00eene de caract\u00e8res de son premier caract\u00e8re, on utilisera l\u2019instruction : nom_de_variable[1:] Par exemple, si la variable mot contient la cha\u00eene \"CDI\" , mot[1:] renvoie \"DI\" . 1 2 3 4 5 6 7 8 9 10 11 romains = { \"I\" : 1 , \"V\" : 5 , \"X\" : 10 , \"L\" : 50 , \"C\" : 100 , \"D\" : 500 , \"M\" : 1000 } def traduire_romain ( nombre ): \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres romains \"\"\" if len ( nombre ) == 1 : return ... elif romains [ nombre [ 0 ]] >= ... return romains [ nombre [ 0 ]] + ... else : return ... Compl\u00e9ter le code de la fonction traduire_romain et le tester. Exemples : >>> traduire_romain ( \"XIV\" ) 14 >>> traduire_romain ( \"CXLII\" ) 142 >>> traduire_romain ( \"MMXXIII\" ) 2023 1 2 3 4 5 6 7 8 9 10 11 romains = { \"I\" : 1 , \"V\" : 5 , \"X\" : 10 , \"L\" : 50 , \"C\" : 100 , \"D\" : 500 , \"M\" : 1000 } def traduire_romain ( nombre ): \"\"\" Renvoie l\u2019\u00e9criture d\u00e9cimale du nombre donn\u00e9 en chiffres romains \"\"\" if len ( nombre ) == 1 : return romains [ nombre ] elif romains [ nombre [ 0 ]] >= romains [ nombre [ 1 ]]: return romains [ nombre [ 0 ]] + traduire_romain ( nombre [ 1 :]) else : return traduire_romain ( nombre [ 1 :]) - romains [ nombre [ 0 ]]", "title": "Exercice 07.2"}, {"location": "term/ep.html#sujet-08", "text": "", "title": "\u25b6 Sujet 08"}, {"location": "term/ep.html#exercice-081", "text": "Exercice 08.1 \u00c9nonc\u00e9 Correction Sur le r\u00e9seau social TipTop, on s\u2019int\u00e9resse au nombre de \u00ab like \u00bb des abonn\u00e9s. Les donn\u00e9es sont stock\u00e9es dans des dictionnaires o\u00f9 les cl\u00e9s sont les pseudos et les valeurs correspondantes sont les nombres de \u00ab like \u00bb comme ci-dessous : {'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50} \u00c9crire une fonction max_dico qui : Prend en param\u00e8tre un dictionnaire dico non vide dont les cl\u00e9s sont des cha\u00eenes de caract\u00e8res et les valeurs associ\u00e9es sont des entiers ; Renvoie un tuple dont : La premi\u00e8re valeur est la cl\u00e9 du dictionnaire associ\u00e9e \u00e0 la valeur maximale ; La seconde valeur est la premi\u00e8re valeur maximale pr\u00e9sente dans le dictionnaire. Exemples : >>> max_dico ({ 'Bob' : 102 , 'Ada' : 201 , 'Alice' : 103 , 'Tim' : 50 }) ( 'Ada' , 201 ) >>> max_dico ({ 'Alan' : 222 , 'Ada' : 201 , 'Eve' : 220 , 'Tim' : 50 }) ( 'Alan' , 222 ) 1 2 3 4 5 6 7 8 def max_dico ( dico ): cle_max = '' val_max = 0 for cle in dico : if dico [ cle ] > val_max : val_max = dico [ cle ] cle_max = cle return ( cle_max , val_max )", "title": "Exercice 08.1"}, {"location": "term/ep.html#exercice-082", "text": "Exercice 08.2 \u00c9nonc\u00e9 Correction Sources Markdown Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : [3, 2, '*', 5, '+']. D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante : Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ; Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile. \u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique. Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +. Pour cet exercice, on dispose d\u2019une classe Pile qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile. Compl\u00e9ter le script de la fonction eval_expression qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Pile : \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\" def __init__ ( self ): self . contenu = [] def est_vide ( self ): \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\" return self . contenu == [] def empiler ( self , v ): \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\" self . contenu . append ( v ) def depiler ( self ): \"\"\" Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, si la pile n\u2019est pas vide. \"\"\" if not self . est_vide (): return self . contenu . pop () def eval_expression ( tab ): p = Pile () for ... in tab : if element != '+' ... element != '*' : p . empiler ( ... ) else : if element == ... : resultat = p . depiler () + ... else : resultat = ... p . empiler ( ... ) return ... Exemple : >>> eval_expression ([ 2 , 3 , '+' , 5 , '*' ]) 25 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Pile : \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\" def __init__ ( self ): self . contenu = [] def est_vide ( self ): \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\" return self . contenu == [] def empiler ( self , v ): \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\" self . contenu . append ( v ) def depiler ( self ): \"\"\" Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, si la pile n\u2019est pas vide. \"\"\" if not self . est_vide (): return self . contenu . pop () def eval_expression ( tab ): p = Pile () for element in tab : if element != '+' and element != '*' : p . empiler ( element ) else : if element == '+' : resultat = p . depiler () + p . depiler () else : resultat = p . depiler () * p . depiler () p . empiler ( resultat ) return p . depiler () Nous avons l\u2019habitude de noter les expressions arithm\u00e9tiques avec des parenth\u00e8ses comme par exemple : (2 + 3) \u00d7 5. Il existe une autre notation utilis\u00e9e par certaines calculatrices, appel\u00e9e notation postfixe, qui n\u2019utilise pas de parenth\u00e8ses. L\u2019expression arithm\u00e9tique pr\u00e9c\u00e9dente est alors obtenue en saisissant successivement 2, puis 3, puis l\u2019op\u00e9rateur +, puis 5, et enfin l\u2019op\u00e9rateur \u00d7. On mod\u00e9lise cette saisie par le tableau [2, 3, '+', 5, '*']. Autre exemple, la notation postfixe de 3 \u00d7 2 + 5 est mod\u00e9lis\u00e9e par le tableau : [3, 2, '*', 5, '+']. D\u2019une mani\u00e8re plus g\u00e9n\u00e9rale, la valeur associ\u00e9e \u00e0 une expression arithm\u00e9tique en notation postfixe est d\u00e9termin\u00e9e \u00e0 l\u2019aide d\u2019une pile en parcourant l\u2019expression arithm\u00e9tique de gauche \u00e0 droite de la fa\u00e7on suivante : - Si l\u2019\u00e9l\u00e9ment parcouru est un nombre, on le place au sommet de la pile ; - Si l\u2019\u00e9l\u00e9ment parcouru est un op\u00e9rateur, on r\u00e9cup\u00e8re les deux \u00e9l\u00e9ments situ\u00e9s au sommet de la pile et on leur applique l\u2019op\u00e9rateur. On place alors le r\u00e9sultat au sommet de la pile. - \u00c0 la fin du parcours, il reste alors un seul \u00e9l\u00e9ment dans la pile qui est le r\u00e9sultat de l\u2019expression arithm\u00e9tique. Dans le cadre de cet exercice, on se limitera aux op\u00e9rations \u00d7 et +. Pour cet exercice, on dispose d\u2019une classe `Pile` qui impl\u00e9mente les m\u00e9thodes de base sur la structure de pile. Compl\u00e9ter le script de la fonction `eval_expression` qui re\u00e7oit en param\u00e8tre une liste python repr\u00e9sentant la notation postfixe d\u2019une expression arithm\u00e9tique et qui renvoie sa valeur associ\u00e9e. ```python linenums='1' class Pile: \"\"\"Classe d\u00e9finissant une structure de pile.\"\"\" def __init__ (self): self.contenu = [] def est_vide(self): \"\"\"Renvoie le bool\u00e9en True si la pile est vide, False sinon.\"\"\" return self.contenu == [] def empiler(self, v): \"\"\"Place l'\u00e9l\u00e9ment v au sommet de la pile\"\"\" self.contenu.append(v) def depiler(self): \"\"\" Retire et renvoie l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, si la pile n\u2019est pas vide. \"\"\" if not self.est_vide(): return self.contenu.pop() def eval_expression(tab): p = Pile() for ... in tab: if element != '+' ... element != '*': p.empiler(...) else: if element == ...: resultat = p.depiler() + ... else: resultat = ... p.empiler(...) return ... Exemple : >>> eval_expression ([ 2 , 3 , '+' , 5 , '*' ]) 25 ```", "title": "Exercice 08.2"}, {"location": "term/ep.html#sujet-09", "text": "", "title": "\u25b6 Sujet 09"}, {"location": "term/ep.html#exercice-091", "text": "Exercice 09.1 \u00c9nonc\u00e9 Correction Programmer la fonction multiplication , prenant en param\u00e8tres deux nombres entiers n1 et n2 , et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. Exemples : >>> multiplication ( 3 , 5 ) 15 >>> multiplication ( - 4 , - 8 ) 32 >>> multiplication ( - 2 , 6 ) - 12 >>> multiplication ( - 2 , 0 ) 0 1 2 3 4 5 6 7 8 9 def multiplication ( n1 , n2 ): if n1 < 0 : return - multiplication ( - n1 , n2 ) if n2 < 0 : return - multiplication ( n1 , - n2 ) resultat = 0 for _ in range ( n2 ): resultat += n1 return resultat", "title": "Exercice 09.1"}, {"location": "term/ep.html#exercice-092", "text": "Exercice 09.2 \u00c9nonc\u00e9 Correction Soit tab un tableau non vide d'entiers tri\u00e9s dans l'ordre croissant et n un entier. La fonction chercher ci-dessous doit renvoyer un indice o\u00f9 la valeur n appara\u00eet dans tab si cette valeur y figure et None sinon. Les param\u00e8tres de la fonction sont : tab , le tableau dans lequel s'effectue la recherche ; n , l'entier \u00e0 chercher dans le tableau ; i , l'indice de d\u00e9but de la partie du tableau o\u00f9 s'effectue la recherche ; j , l'indice de fin de la partie du tableau o\u00f9 s'effectue la recherche. L\u2019algorithme demand\u00e9 est une recherche dichotomique r\u00e9cursive. Recopier et compl\u00e9ter le code de la fonction chercher suivante : 1 2 3 4 5 6 7 8 9 10 11 12 def chercher ( tab , n , i , j ): if i < 0 or j > len ( tab ) : return None if i > j : return None m = ( i + j ) // ... if ... < n : return chercher ( tab , n , ... , ... ) elif ... > n : return chercher ( tab , n , ... , ... ) else : return ... L'ex\u00e9cution du code doit donner : >>> chercher ([ 1 , 5 , 6 , 6 , 9 , 12 ], 7 , 0 , 10 ) >>> chercher ([ 1 , 5 , 6 , 6 , 9 , 12 ], 7 , 0 , 5 ) >>> chercher ([ 1 , 5 , 6 , 6 , 9 , 12 ], 9 , 0 , 5 ) 4 >>> chercher ([ 1 , 5 , 6 , 6 , 9 , 12 ], 6 , 0 , 5 ) 2 1 2 3 4 5 6 7 8 9 10 11 12 def chercher ( tab , n , i , j ): if i < 0 or j > len ( tab ) : return None if i > j : return None m = ( i + j ) // 2 if tab [ m ] < n : return chercher ( tab , n , m + 1 , j ) elif tab [ m ] > n : return chercher ( tab , n , i , m - 1 ) else : return m", "title": "Exercice 09.2"}, {"location": "term/ep.html#sujet-10", "text": "", "title": "\u25b6 Sujet 10"}, {"location": "term/ep.html#exercice-101", "text": "Exercice 10.1 \u00c9nonc\u00e9 Correction \u00c9crire la fonction maxliste , prenant en param\u00e8tre un tableau non vide de nombres tab (de type list ) et renvoyant le plus grand \u00e9l\u00e9ment de ce tableau. Exemples : >>> maxliste ([ 98 , 12 , 104 , 23 , 131 , 9 ]) 131 >>> maxliste ([ - 27 , 24 , - 3 , 15 ]) 24 1 2 3 4 5 6 def maxliste ( tab ): maximum = tab [ 0 ] for element in tab : if element > maximum : maximum = element return maximum", "title": "Exercice 10.1"}, {"location": "term/ep.html#exercice-102", "text": "Exercice 10.2 \u00c9nonc\u00e9 Correction On dispose de cha\u00eenes de caract\u00e8res contenant uniquement des parenth\u00e8ses ouvrantes et fermantes. Un parenth\u00e9sage est correct si : le nombre de parenth\u00e8ses ouvrantes de la cha\u00eene est \u00e9gal au nombre de parenth\u00e8ses fermantes. en parcourant la cha\u00eene de gauche \u00e0 droite, le nombre de parenth\u00e8ses d\u00e9j\u00e0 ouvertes doit \u00eatre, \u00e0 tout moment, sup\u00e9rieur ou \u00e9gal au nombre de parenth\u00e8ses d\u00e9j\u00e0 ferm\u00e9es. Ainsi, ((()())(())) est un parenth\u00e9sage correct. Les parenth\u00e9sages ())(() et (())(() sont, eux, incorrects. On dispose du code de la classe Pile suivant : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Pile : \"\"\" Classe d\u00e9finissant une pile \"\"\" def __init__ ( self ): self . valeurs = [] def est_vide ( self ): \"\"\"Renvoie True si la pile est vide, False sinon\"\"\" return self . valeurs == [] def empiler ( self , c ): \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\" self . valeurs . append ( c ) def depiler ( self ): \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\" if self . est_vide () == False : self . valeurs . pop () On souhaite programmer une fonction parenthesage qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res ch form\u00e9e de parenth\u00e8ses et renvoie True si la cha\u00eene est bien parenth\u00e9s\u00e9e et False sinon. Cette fonction utilise une pile et suit le principe suivant : en parcourant la cha\u00eene de gauche \u00e0 droite, si on trouve une parenth\u00e8se ouvrante, on l\u2019empile au sommet de la pile et si on trouve une parenth\u00e8se fermante, on d\u00e9pile (si possible) la parenth\u00e8se ouvrante stock\u00e9e au sommet de la pile. La cha\u00eene est alors bien parenth\u00e9s\u00e9e si, \u00e0 la fin du parcours, la pile est vide. Elle est, par contre, mal parenth\u00e9s\u00e9e : si dans le parcours, on trouve une parenth\u00e8se fermante, alors que la pile est vide ; ou si, \u00e0 la fin du parcours, la pile n\u2019est pas vide. 1 2 3 4 5 6 7 8 9 10 11 12 def parenthesage ( ch ): \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\" p = Pile () for c in ch : if c == ... : p . empiler ( c ) elif c == ... : if p . est_vide (): return ... else : ... return p . est_vide () Compl\u00e9ter le code de la fonction parenthesage . Exemples : >>> parenthesage ( \"((()())(()))\" ) True >>> parenthesage ( \"())(()\" ) False >>> parenthesage ( \"(())(()\" ) False 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Pile : \"\"\" Classe d\u00e9finissant une pile \"\"\" def __init__ ( self ): self . valeurs = [] def est_vide ( self ): \"\"\"Renvoie True si la pile est vide, False sinon\"\"\" return self . valeurs == [] def empiler ( self , c ): \"\"\"Place l\u2019\u00e9l\u00e9ment c au sommet de la pile\"\"\" self . valeurs . append ( c ) def depiler ( self ): \"\"\"Supprime l\u2019\u00e9l\u00e9ment plac\u00e9 au sommet de la pile, \u00e0 condition qu\u2019elle soit non vide\"\"\" if self . est_vide () == False : self . valeurs . pop () def parenthesage ( ch ): \"\"\"Renvoie True si la cha\u00eene ch est bien parenth\u00e9s\u00e9e et False sinon\"\"\" p = Pile () for c in ch : if c == '(' : p . empiler ( c ) elif c == ')' : if p . est_vide (): return False else : p . depiler () return p . est_vide ()", "title": "Exercice 10.2"}, {"location": "term/ep.html#sujet-11", "text": "", "title": "\u25b6 Sujet 11"}, {"location": "term/ep.html#exercice-111", "text": "Exercice 11.1 \u00c9nonc\u00e9 Correction On mod\u00e9lise la repr\u00e9sentation binaire d'un entier non sign\u00e9 par un tableau d'entiers dont les \u00e9l\u00e9ments sont 0 ou 1. Par exemple, le tableau [1, 0, 1, 0, 0, 1, 1] repr\u00e9sente l'\u00e9criture binaire de l'entier dont l'\u00e9criture d\u00e9cimale est 2**6 + 2**4 + 2**1 + 2**0 = 83 . \u00c0 l'aide d'un parcours s\u00e9quentiel, \u00e9crire la fonction convertir r\u00e9pondant aux sp\u00e9cifications suivantes : def convertir ( tab ): \"\"\" tab est un tableau d'entiers, dont les \u00e9l\u00e9ments sont 0 ou 1 et repr\u00e9sentant un entier \u00e9crit en binaire. Renvoie l'\u00e9criture d\u00e9cimale de l'entier positif dont la repr\u00e9sentation binaire est donn\u00e9e par le tableau tab \"\"\" Exemple : >>> convertir ([ 1 , 0 , 1 , 0 , 0 , 1 , 1 ]) 83 >>> convertir ([ 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ]) 130 1 2 3 4 5 6 7 def convertir ( tab ): puissance = 0 total = 0 for i in range ( len ( tab ) - 1 , - 1 , - 1 ): total += tab [ i ] * ( 2 ** puissance ) puissance += 1 return total", "title": "Exercice 11.1"}, {"location": "term/ep.html#exercice-112", "text": "Exercice 11.2 \u00c9nonc\u00e9 Correction La fonction tri_insertion suivante prend en argument une liste tab et trie cette liste en utilisant la m\u00e9thode du tri par insertion. Compl\u00e9ter cette fonction pour qu'elle r\u00e9ponde \u00e0 la sp\u00e9cification demand\u00e9e. On rappelle le principe du tri par insertion : on consid\u00e8re les \u00e9l\u00e9ments \u00e0 trier un par un, le premier \u00e9l\u00e9ment constituant, \u00e0 lui tout seul, une liste tri\u00e9e de longueur 1. On range ensuite le second \u00e9l\u00e9ment pour constituer une liste tri\u00e9e de longueur 2, puis on range le troisi\u00e8me \u00e9l\u00e9ment pour avoir une liste tri\u00e9e de longueur 3 et ainsi de suite\u2026 A chaque \u00e9tape, le premier \u00e9l\u00e9ment de la sous-liste non tri\u00e9e est plac\u00e9 dans la sous-liste des \u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s de sorte que cette sous-liste demeure tri\u00e9e. Le principe du tri par insertion est donc d'ins\u00e9rer \u00e0 la n-i\u00e8me it\u00e9ration, le n-i\u00e8me \u00e9l\u00e9ment \u00e0 la bonne place. 1 2 3 4 5 6 7 8 9 10 11 12 def tri_insertion ( tab ): n = len ( tab ) for i in range ( 1 , n ): valeur_insertion = tab [ ... ] # la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger j = ... # tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer # on d\u00e9cale les valeurs du tableau vers la droite while j > ... and valeur_insertion < tab [ ... ]: tab [ j ] = tab [ j - 1 ] j = ... tab [ j ] = ... Exemples : >>> liste = [ 9 , 5 , 8 , 4 , 0 , 2 , 7 , 1 , 10 , 3 , 6 ] >>> tri_insertion ( liste ) >>> liste [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] 1 2 3 4 5 6 7 8 9 10 11 12 def tri_insertion ( tab ): n = len ( tab ) for i in range ( 1 , n ): valeur_insertion = tab [ i ] # la variable j sert \u00e0 d\u00e9terminer o\u00f9 placer la valeur \u00e0 ranger j = i # tant qu'on a pas trouv\u00e9 la place de l'\u00e9l\u00e9ment \u00e0 ins\u00e9rer # on d\u00e9cale les valeurs du tableau vers la droite while j > 0 and valeur_insertion < tab [ j - 1 ]: tab [ j ] = tab [ j - 1 ] j = j - 1 tab [ j ] = valeur_insertion", "title": "Exercice 11.2"}, {"location": "term/ep.html#sujet-12", "text": "", "title": "\u25b6 Sujet 12"}, {"location": "term/ep.html#exercice-121", "text": "Exercice 12.1 \u00c9nonc\u00e9 Correction On consid\u00e8re la classe ABR , dont le constructeur est le suivant : class ABR : def __init__ ( self , g0 , v0 , d0 ): self . gauche = g0 self . cle = v0 self . droit = d0 def __repr__ ( self ): if self is None : return '' else : return '(' + ( self . gauche ) . __repr__ () + ',' + str ( self . cle ) + ',' + ( self . droit ) . __repr__ () + ')' Ainsi, l\u2019arbre binaire de recherche abr1 ci- contre est cr\u00e9\u00e9 par le code python ci- dessous n0 = ABR ( None , 0 , None ) n3 = ABR ( None , 3 , None ) n2 = ABR ( None , 2 , n3 ) n3 = ABR ( n0 , 1 , n2 ) Dans tout le code, None correspondra \u00e0 un arbre vide. La classe ABR dispose aussi d\u2019une m\u00e9thode de repr\u00e9sentation ( __repr__ ), qui affiche entre parenth\u00e8ses le contenu du sous arbre gauche, puis la cl\u00e9 de l\u2019arbre, et enfin le contenu du sous arbre droit. Elle s\u2019utilise en console de la mani\u00e8re suivante : >>> abr1 (( None , 0 , None ), 1 ,( None , 2 ,( None , 3 , None ))) \u00c9crire une fonction r\u00e9cursive ajoute(cle, a) qui prend en param\u00e8tres une cl\u00e9 cle et un arbre binaire de recherche a , et qui renvoie un arbre binaire de recherche dans lequel cle a \u00e9t\u00e9 ins\u00e9r\u00e9e. Dans le cas o\u00f9 cle est d\u00e9j\u00e0 pr\u00e9sente dans a , la fonction renvoie l\u2019arbre a inchang\u00e9. R\u00e9sultats \u00e0 obtenir : >>> a = ajoute ( 4 , abr1 ) >>> a (( None , 0 , None ), 1 ,( None , 2 ,( None , 3 ,( None , 4 , None )))) >>> ajoute ( - 5 , abr1 ) ((( None , - 5 , None ), 0 , None ), 1 ,( None , 2 ,( None , 3 , None ))) >>> ajoute ( 2 , abr1 ) (( None , 0 , None ), 1 ,( None , 2 ,( None , 3 , None ))) 1 2 3 4 5 6 7 8 def ajoute ( cle , a ): if a is None : a = ABR ( None , cle , None ) elif cle > a . cle : a . droit = ajoute ( cle , a . droit ) elif cle < a . cle : a . gauche = ajoute ( cle , a . gauche ) return a", "title": "Exercice 12.1"}, {"location": "term/ep.html#exercice-122", "text": "Exercice 12.2 \u00c9nonc\u00e9 Correction Sources Markdown On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On souhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle mani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe pas la capacit\u00e9 c de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour ranger cet ensemble d\u2019objets. Pour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer chacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible. Par exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 c = 5 un ensemble de trois objets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste [1, 5, 2] , on proc\u00e8de de la fa\u00e7on suivante : Le premier objet, de masse 1, va dans une premi\u00e8re boite. Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le premier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet objet dans une deuxi\u00e8me bo\u00eete. Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete. On a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 c = 5 pour ranger les 3 objets. Compl\u00e9ter la fonction Python empaqueter(liste_masses, c) suivante pour qu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 c n\u00e9cessaires pour empaqueter un ensemble d\u2019objets dont les masses sont contenues dans la liste liste_masses . 1 2 3 4 5 6 7 8 9 10 11 12 def empaqueter ( liste_masses , c ): n = len ( liste_masses ) nb_boites = 0 boites = [ 0 ] * n for masse in ... : i = 0 while i <= nb_boites and boites [ i ] + ... > C : i = i + 1 if i == nb_boites + 1 : ... boites [ i ] = ... return ... Tester ensuite votre fonction : >>> empaqueter ([ 7 , 6 , 3 , 4 , 8 , 5 , 9 , 2 ], 11 ) 5 1 2 3 4 5 6 7 8 9 10 11 12 def empaqueterR ( liste_masses , c ): n = len ( liste_masses ) nb_boites = 0 boites = [ 0 ] * n for masse in liste_masses : i = 0 while i <= nb_boites and boites [ i ] + masse > c : i = i + 1 if i == nb_boites + 1 : nb_boites = nb_boites + 1 boites [ i ] = boites [ i ] + masse return nb_boites + 1 On dispose d\u2019un ensemble d\u2019objets dont on conna\u00eet, pour chacun, la masse. On souhaite ranger l\u2019ensemble de ces objets dans des boites identiques de telle mani\u00e8re que la somme des masses des objets contenus dans une bo\u00eete ne d\u00e9passe pas la capacit\u00e9 `c` de la bo\u00eete. On souhaite utiliser le moins de bo\u00eetes possibles pour ranger cet ensemble d\u2019objets. Pour r\u00e9soudre ce probl\u00e8me, on utilisera un algorithme glouton consistant \u00e0 placer chacun des objets dans la premi\u00e8re bo\u00eete o\u00f9 cela est possible. Par exemple, pour ranger dans des bo\u00eetes de capacit\u00e9 `c = 5` un ensemble de trois objets dont les masses sont repr\u00e9sent\u00e9es en Python par la liste `[1, 5, 2]` , on proc\u00e8de de la fa\u00e7on suivante : - Le premier objet, de masse 1, va dans une premi\u00e8re boite. - Le deuxi\u00e8me objet, de masse 5, ne peut pas aller dans la m\u00eame boite que le premier objet car cela d\u00e9passerait la capacit\u00e9 de la boite. On place donc cet objet dans une deuxi\u00e8me bo\u00eete. - Le troisi\u00e8me objet, de masse 2, va dans la premi\u00e8re bo\u00eete. On a donc utilis\u00e9 deux bo\u00eetes de capacit\u00e9 `c = 5` pour ranger les 3 objets. Compl\u00e9ter la fonction Python `empaqueter(liste_masses, c)` suivante pour qu\u2019elle renvoie le nombre de bo\u00eetes de capacit\u00e9 c n\u00e9cessaires pour empaqueter un ensemble d\u2019objets dont les masses sont contenues dans la liste `liste_masses` . ```python linenums='1' def empaqueter(liste_masses, c): n = len(liste_masses) nb_boites = 0 boites = [0]*n for masse in ... : i = 0 while i <= nb_boites and boites[i] + ... > C: i = i + 1 if i == nb_boites + 1: ... boites[i] = ... return ... Tester ensuite votre fonction : >>> empaqueter ([ 7 , 6 , 3 , 4 , 8 , 5 , 9 , 2 ], 11 ) 5 ```", "title": "Exercice 12.2"}, {"location": "term/ep.html#sujet-13", "text": "", "title": "\u25b6 Sujet 13"}, {"location": "term/ep.html#exercice-131", "text": "Exercice 13.1 \u00c9nonc\u00e9 Correction \u00c9crire en langage Python une fonction recherche prenant comme param\u00e8tres une variable a de type num\u00e9rique ( float ou int ) et un tableau tab (type list ) et qui renvoie le nombre d'occurrences de a dans tab . Exemples : >>> recherche ( 5 , []) 0 >>> recherche ( 5 , [ - 2 , 3 , 4 , 8 ]) 0 >>> recherche ( 5 , [ - 2 , 3 , 1 , 5 , 3 , 7 , 4 ]) 1 >>> recherche ( 5 , [ - 2 , 5 , 3 , 5 , 4 , 5 ]) 3 1 2 3 4 5 6 def recherche ( a , tab ): nb = 0 for element in tab : if element == a : nb += 1 return nb", "title": "Exercice 13.1"}, {"location": "term/ep.html#exercice-132", "text": "Exercice 13.2 \u00c9nonc\u00e9 Correction La fonction rendu_monnaie prend en param\u00e8tres deux nombres entiers positifs somme_due et somme_versee et elle permet de proc\u00e9der au rendu de monnaie de la diff\u00e9rence somme_versee \u2013 somme_due pour des achats effectu\u00e9s avec le syst\u00e8me de pi\u00e8ces de la zone Euro. On utilise pour cela un algorithme glouton qui commence par rendre le maximum de pi\u00e8ces de plus grandes valeurs et ainsi de suite. Par la suite, on assimilera les billets \u00e0 des pi\u00e8ces. La fonction rendu_monnaie renvoie un tableau de type list contenant les pi\u00e8ces qui composent le rendu. Toutes les sommes sont exprim\u00e9es en euros. Les valeurs possibles pour les pi\u00e8ces sont donc [1, 2, 5, 10, 20, 50, 100, 200] . Ainsi, l\u2019instruction rendu_monnaie(452, 500) renvoie le tableau [20, 20, 5, 2, 1] . En effet, la somme \u00e0 rendre est de 48 euros soit 20 + 20 + 5 + 2 + 1 . Le code de la fonction rendu_monnaie est donn\u00e9 ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 def rendu_monnaie ( somme_due , somme_versee ): pieces = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 ] rendu = ... a_rendre = ... i = len ( pieces ) - 1 while a_rendre > ... : if pieces [ i ] <= a_rendre : rendu . append ( ... ) a_rendre = ... else : i = ... return rendu Compl\u00e9ter ce code et le tester : >>> rendu_monnaie ( 700 , 700 ) [] >>> rendu_monnaie ( 102 , 500 ) [ 200 , 100 , 50 , 20 , 20 , 5 , 2 , 1 ] 1 2 3 4 5 6 7 8 9 10 11 12 def rendu_monnaie ( somme_due , somme_versee ): pieces = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 200 ] rendu = [] a_rendre = somme_versee - somme_due i = len ( pieces ) - 1 while a_rendre > 0 : if pieces [ i ] <= a_rendre : rendu . append ( pieces [ i ]) a_rendre = a_rendre - pieces [ i ] else : i = i - 1 return rendu", "title": "Exercice 13.2"}, {"location": "term/ep.html#sujet-14", "text": "", "title": "\u25b6 Sujet 14"}, {"location": "term/ep.html#exercice-141", "text": "Exercice 14.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction recherche qui prend en param\u00e8tres elt un nombre entier et tab un tableau de nombres entiers, et qui renvoie l\u2019indice de la premi\u00e8re occurrence de elt dans tab si elt est dans tab et -1 sinon. Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions. Exemples : >>> recherche ( 1 , [ 2 , 3 , 4 ]) - 1 >>> recherche ( 1 , [ 10 , 12 , 1 , 56 ]) 2 >>> recherche ( 50 , [ 1 , 50 , 1 ]) 1 >>> recherche ( 15 , [ 8 , 9 , 10 , 15 ]) 3 1 2 3 4 5 6 7 8 9 10 def recherche ( elt , tab ): ''' renvoie l\u2019indice de la premi\u00e8re occurrence de elt dans tab si elt est dans tab et -1 sinon. ''' assert tab != [], \"le tableau est vide\" for i in range ( len ( tab )): if tab [ i ] == elt : return i return - 1", "title": "Exercice 14.1"}, {"location": "term/ep.html#exercice-142", "text": "Exercice 14.2 \u00c9nonc\u00e9 Correction On consid\u00e8re la fonction insere ci-dessous qui prend en argument un entier a et un tableau tab d'entiers tri\u00e9s par ordre croissant. Cette fonction cr\u00e9e et renvoie un nouveau tableau \u00e0 partir de celui fourni en param\u00e8tre en y ins\u00e9rant la valeur a de sorte que le tableau renvoy\u00e9 soit encore tri\u00e9 par ordre croissant. Les tableaux seront repr\u00e9sent\u00e9s sous la forme de listes Python. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def insere ( a , tab ): \"\"\" Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list) tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le nouveau tableau. \"\"\" l = list ( tab ) #l contient les m\u00eames \u00e9l\u00e9ments que tab l . append ( a ) i = ... while a < ... and i >= 0 : l [ i + 1 ] = ... l [ i ] = a i = ... return l Compl\u00e9ter la fonction insere ci-dessus. Exemples : >>> insere ( 3 , [ 1 , 2 , 4 , 5 ]) [ 1 , 2 , 3 , 4 , 5 ] >>> insere ( 30 , [ 1 , 2 , 7 , 12 , 14 , 25 ]) [ 1 , 2 , 7 , 12 , 14 , 25 , 30 ] >>> insere ( 1 , [ 2 , 3 , 4 ]) [ 1 , 2 , 3 , 4 ] >>> insere ( 1 , []) [ 1 ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def insere ( a , tab ): \"\"\" Ins\u00e8re l'\u00e9l\u00e9ment a (int) dans le tableau tab (list) tri\u00e9 par ordre croissant \u00e0 sa place et renvoie le nouveau tableau. \"\"\" l = list ( tab ) #l contient les m\u00eames \u00e9l\u00e9ments que tab l . append ( a ) i = len ( l ) - 2 while a < l [ i ] and i >= 0 : l [ i + 1 ] = l [ i ] l [ i ] = a i = i - 1 return l", "title": "Exercice 14.2"}, {"location": "term/ep.html#sujet-15", "text": "", "title": "\u25b6 Sujet 15"}, {"location": "term/ep.html#exercice-151", "text": "Exercice 15.1 \u00c9nonc\u00e9 Correction Source Markdown On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : t_moy = [ 14.9 , 13.3 , 13.1 , 12.5 , 13.0 , 13.6 , 13.7 ] annees = [ 2013 , 2014 , 2015 , 2016 , 2017 , 2018 , 2019 ] \u00c9crire la fonction mini qui prend en param\u00e8tres un tableau releve des relev\u00e9s et un tableau date des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante. On suppose que la temp\u00e9rature minimale est atteinte une seule fois. Exemple : >>> mini ( t_moy , annees ) ( 12.5 , 2016 ) 1 2 3 4 5 6 7 8 9 10 11 t_moy = [ 14.9 , 13.3 , 13.1 , 12.5 , 13.0 , 13.6 , 13.7 ] annees = [ 2013 , 2014 , 2015 , 2016 , 2017 , 2018 , 2019 ] def mini ( releve , date ): temp_mini = releve [ 0 ] date_mini = date [ 0 ] for i in range ( len ( releve )): if releve [ i ] < temp_mini : temp_mini = releve [ i ] date_mini = date [ i ] return temp_mini , date_mini On a relev\u00e9 les valeurs moyennes annuelles des temp\u00e9ratures \u00e0 Paris pour la p\u00e9riode allant de 2013 \u00e0 2019. Les r\u00e9sultats ont \u00e9t\u00e9 r\u00e9cup\u00e9r\u00e9s sous la forme de deux listes : l\u2019une pour les temp\u00e9ratures, l\u2019autre pour les ann\u00e9es : ```python t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7] annees = [2013, 2014, 2015, 2016, 2017, 2018, 2019] ``` \u00c9crire la fonction `mini` qui prend en param\u00e8tres un tableau `releve` des relev\u00e9s et un tableau `date` des dates et qui renvoie la plus petite valeur relev\u00e9e au cours de la p\u00e9riode et l\u2019ann\u00e9e correspondante. On suppose que la temp\u00e9rature minimale est atteinte une seule fois. Exemple : ```python >>> mini(t_moy, annees) (12.5, 2016) ```", "title": "Exercice 15.1"}, {"location": "term/ep.html#exercice-152", "text": "Exercice 15.2 \u00c9nonc\u00e9 Correction Sources Markdown Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : bob , radar , et non sont des mots palindromes. De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543. L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome. Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction est_nbre_palindrome s\u2019appuiera sur la fonction est_palindrome qui elle-m\u00eame s\u2019appuiera sur la fonction inverse_chaine . La fonction inverse_chaine inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res chaine et renvoie la cha\u00eene invers\u00e9e. La fonction est_palindrome teste si une chaine de caract\u00e8res chaine est un palindrome. Elle renvoie True si c\u2019est le cas et False sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente. La fonction est_nbre_palindrome teste si un nombre nbre est un palindrome. Elle renvoie True si c\u2019est le cas et False sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente. Compl\u00e9ter le code des trois fonctions ci-dessous. 1 2 3 4 5 6 7 8 9 10 11 12 13 def inverse_chaine ( chaine ): result = ... for caractere in chaine : result = ... return result def est_palindrome ( chaine ): inverse = inverse_chaine ( chaine ) return ... def est_nbre_palindrome ( nbre ): chaine = ... return est_palindrome ( chaine ) Exemples : >>> inverse_chaine ( 'bac' ) 'cab' >>> est_palindrome ( 'NSI' ) False >>> est_palindrome ( 'ISN-NSI' ) True >>> est_nbre_palindrome ( 214312 ) False >>> est_nbre_palindrome ( 213312 ) True 1 2 3 4 5 6 7 8 9 10 11 12 13 def inverse_chaine ( chaine ): result = '' for caractere in chaine : result = caractere + result return result def est_palindrome ( chaine ): inverse = inverse_chaine ( chaine ) return chaine == inverse def est_nbre_palindrome ( nbre ): chaine = str ( nbre ) return est_palindrome ( chaine ) Un mot palindrome peut se lire de la m\u00eame fa\u00e7on de gauche \u00e0 droite ou de droite \u00e0 gauche : *bob* , *radar* , et *non* sont des mots palindromes. De m\u00eame certains nombres sont eux aussi des palindromes : 33, 121, 345543. L\u2019objectif de cet exercice est d\u2019obtenir un programme Python permettant de tester si un nombre est un nombre palindrome. Pour remplir cette t\u00e2che, on vous demande de compl\u00e9ter le code des trois fonctions ci- dessous sachant que la fonction `est_nbre_palindrome` s\u2019appuiera sur la fonction `est_palindrome` qui elle-m\u00eame s\u2019appuiera sur la fonction `inverse_chaine` . La fonction `inverse_chaine` inverse l'ordre des caract\u00e8res d'une cha\u00eene de caract\u00e8res `chaine` et renvoie la cha\u00eene invers\u00e9e. La fonction `est_palindrome` teste si une chaine de caract\u00e8res `chaine` est un palindrome. Elle renvoie `True` si c\u2019est le cas et `False` sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente. La fonction `est_nbre_palindrome` teste si un nombre `nbre` est un palindrome. Elle renvoie `True` si c\u2019est le cas et `False` sinon. Cette fonction s\u2019appuie sur la fonction pr\u00e9c\u00e9dente. Compl\u00e9ter le code des trois fonctions ci-dessous. ```python linenums='1' def inverse_chaine(chaine): result = ... for caractere in chaine: result = ... return result def est_palindrome(chaine): inverse = inverse_chaine(chaine) return ... def est_nbre_palindrome(nbre): chaine = ... return est_palindrome(chaine) Exemples : >>> inverse_chaine ( 'bac' ) 'cab' >>> est_palindrome ( 'NSI' ) False >>> est_palindrome ( 'ISN-NSI' ) True >>> est_nbre_palindrome ( 214312 ) False >>> est_nbre_palindrome ( 213312 ) True ```", "title": "Exercice 15.2"}, {"location": "term/ep.html#sujet-16", "text": "", "title": "\u25b6 Sujet 16"}, {"location": "term/ep.html#exercice-161", "text": "Exercice 16.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction recherche_indices_classement qui prend en param\u00e8tres un entier elt et une liste d\u2019entiers tab , et qui renvoie trois listes : la premi\u00e8re liste contient les indices des valeurs de la liste tab strictement inf\u00e9rieures \u00e0 elt ; la deuxi\u00e8me liste contient les indices des valeurs de la liste tab \u00e9gales \u00e0 elt ; la troisi\u00e8me liste contient les indices des valeurs de la liste tab strictement sup\u00e9rieures \u00e0 elt . Exemples : >>> recherche_indices_classement ( 3 , [ 1 , 3 , 4 , 2 , 4 , 6 , 3 , 0 ]) ([ 0 , 3 , 7 ], [ 1 , 6 ], [ 2 , 4 , 5 ]) >>> recherche_indices_classement ( 3 , [ 1 , 4 , 2 , 4 , 6 , 0 ]) ([ 0 , 2 , 5 ], [], [ 1 , 3 , 4 ]) >>> recherche_indices_classement ( 3 , [ 1 , 1 , 1 , 1 ]) ([ 0 , 1 , 2 , 3 ], [], []) >>> recherche_indices_classement ( 3 , []) ([], [], []) 1 2 3 4 5 6 7 8 9 10 11 12 def recherche_indices_classement ( elt , tab ): ind_inf = [] ind_egal = [] ind_sup = [] for i in range ( len ( tab )): if tab [ i ] < elt : ind_inf . append ( i ) elif tab [ i ] > elt : ind_sup . append ( i ) else : ind_egal . append ( i ) return ( ind_inf , ind_egal , ind_sup )", "title": "Exercice 16.1"}, {"location": "term/ep.html#exercice-162", "text": "Exercice 16.2 \u00c9nonc\u00e9 Correction Un professeur de NSI d\u00e9cide de g\u00e9rer les r\u00e9sultats de sa classe sous la forme d\u2019un dictionnaire : les clefs sont les noms des \u00e9l\u00e8ves ; les valeurs sont des dictionnaires dont les clefs sont les types d\u2019\u00e9preuves sous forme de cha\u00eene de caract\u00e8res et les valeurs sont les notes obtenues associ\u00e9es \u00e0 leurs coefficients dans une liste. Avec : resultats = { 'Dupont' : { 'DS1' : [ 15.5 , 4 ], 'DM1' : [ 14.5 , 1 ], 'DS2' : [ 13 , 4 ], 'PROJET1' : [ 16 , 3 ], 'DS3' : [ 14 , 4 ] }, 'Durand' : { 'DS1' : [ 6 , 4 ], 'DM1' : [ 14.5 , 1 ], 'DS2' : [ 8 , 4 ], 'PROJET1' : [ 9 , 3 ], 'IE1' : [ 7 , 2 ], 'DS3' : [ 8 , 4 ], 'DS4' :[ 15 , 4 ] } } L\u2019\u00e9l\u00e8ve dont le nom est Durand a ainsi obtenu au DS2 la note de 8 avec un coefficient 4. Le professeur cr\u00e9e une fonction moyenne qui prend en param\u00e8tre le nom d\u2019un de ses \u00e9l\u00e8ves et renvoie sa moyenne arrondie au dixi\u00e8me. Compl\u00e9ter le code du professeur ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 def moyenne ( nom , dico_result ): if nom in ... : notes = dico_result [ nom ] total_points = ... total_coefficients = ... for ... in notes . values (): note , coefficient = valeurs total_points = total_points + ... * coefficient total_coefficients = ... + coefficient return round ( ... / total_coefficients , 1 ) else : return - 1 1 2 3 4 5 6 7 8 9 10 11 12 def moyenne ( nom , dico_result ): if nom in dico_result : notes = dico_result [ nom ] total_points = 0. total_coefficients = 0 for valeurs in notes . values (): note , coefficient = valeurs total_points = total_points + note * coefficient total_coefficients = total_coefficients + coefficient return round ( total_points / total_coefficients , 1 ) else : return - 1", "title": "Exercice 16.2"}, {"location": "term/ep.html#sujet-17", "text": "", "title": "\u25b6 Sujet 17"}, {"location": "term/ep.html#exercice-171", "text": "Exercice 17.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction moyenne(liste_notes) qui renvoie la moyenne pond\u00e9r\u00e9e des r\u00e9sultats contenus dans la liste liste_notes , non vide, donn\u00e9e en param\u00e8tre. Cette liste contient des couples (note, coefficient) dans lesquels : note est un nombre de type flottant ( float ) compris entre 0 et 20 ; coefficient est un nombre entier strictement positif. Ainsi l\u2019expression moyenne([(15,2),(9,1),(12,3)]) devra renvoyer 12.5 . \\(\\dfrac{2 \\times 15 + 1 \\times 9 + 3 \\times 12 }{2+1+3}=12,5\\) 1 2 3 4 5 6 7 8 9 def moyenne ( liste_notes ): somme_notes = 0 somme_coeffs = 0 for devoir in liste_notes : note = devoir [ 0 ] coeff = devoir [ 1 ] somme_notes += note * coeff somme_coeffs += coeff return somme_notes / somme_coeffs", "title": "Exercice 17.1"}, {"location": "term/ep.html#exercice-172", "text": "Exercice 17.2 \u00c9nonc\u00e9 Correction On cherche \u00e0 d\u00e9terminer les valeurs du triangle de Pascal (Figure 1). Dans le triangle de Pascal, chaque ligne commence et se termine par le nombre 1. Comme l\u2019illustre la Figure 2, on additionne deux valeurs successives d\u2019une ligne pour obtenir la valeur qui se situe sous la deuxi\u00e8me valeur. Compl\u00e9ter la fonction pascal ci-apr\u00e8s prenant en param\u00e8tre un entier n sup\u00e9rieur ou \u00e9gal \u00e0 2. Cette fonction doit renvoyer une liste correspondant au triangle de Pascal de la ligne 0 \u00e0 la ligne n . Le tableau repr\u00e9sentant le triangle de Pascal sera contenu dans la variable triangle . 1 2 3 4 5 6 7 8 9 def pascal ( n ): triangle = [[ 1 ]] for k in range ( 1 , ... ): ligne_k = [ ... ] for i in range ( 1 , k ): ligne_k . append ( triangle [ ... ][ i - 1 ] + triangle [ ... ][ ... ]) ligne_k . append ( ... ) triangle . append ( ligne_k ) return triangle Pour n = 4 , voici ce qu'on devra obtenir : >>> pascal ( 4 ) [[ 1 ], [ 1 , 1 ], [ 1 , 2 , 1 ], [ 1 , 3 , 3 , 1 ], [ 1 , 4 , 6 , 4 , 1 ]] Pour n = 5 , voici ce qu'on devra obtenir : >>> pascal ( 5 ) [[ 1 ], [ 1 , 1 ], [ 1 , 2 , 1 ], [ 1 , 3 , 3 , 1 ], [ 1 , 4 , 6 , 4 , 1 ], [ 1 , 5 , 10 , 10 , 5 , 1 ]] 1 2 3 4 5 6 7 8 9 def pascal ( n ): triangle = [[ 1 ]] for k in range ( 1 , n + 1 ): ligne_k = [ 1 ] for i in range ( 1 , k ): ligne_k . append ( triangle [ k - 1 ][ i - 1 ] + triangle [ k - 1 ][ i ]) ligne_k . append ( 1 ) triangle . append ( ligne_k ) return triangle", "title": "Exercice 17.2"}, {"location": "term/ep.html#sujet-18", "text": "", "title": "\u25b6 Sujet 18"}, {"location": "term/ep.html#exercice-181", "text": "Exercice 18.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction max_et_indice qui prend en param\u00e8tre une liste non vide tab de nombres entiers et qui renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi que l\u2019indice de sa premi\u00e8re apparition dans cette liste. L\u2019utilisation de la fonction native max n\u2019est pas autoris\u00e9e. Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions. Exemples : >>> max_et_indice ([ 1 , 5 , 6 , 9 , 1 , 2 , 3 , 7 , 9 , 8 ]) ( 9 , 3 ) >>> max_et_indice ([ - 2 ]) ( - 2 , 0 ) >>> max_et_indice ([ - 1 , - 1 , 3 , 3 , 3 ]) ( 3 , 2 ) >>> max_et_indice ([ 1 , 1 , 1 , 1 ]) ( 1 , 0 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def max_et_indice ( tab ): ''' renvoie la valeur du plus grand \u00e9l\u00e9ment de cette liste ainsi que l\u2019indice de sa premi\u00e8re apparition dans cette liste. ''' assert tab != [], 'le tableau est vide' val_max = tab [ 0 ] ind_max = 0 for i in range ( len ( tab )): if tab [ i ] > val_max : val_max = tab [ i ] ind_max = i return ( val_max , ind_max )", "title": "Exercice 18.1"}, {"location": "term/ep.html#exercice-182", "text": "Exercice 18.2 \u00c9nonc\u00e9 Correction L\u2019ordre des g\u00e8nes sur un chromosome est repr\u00e9sent\u00e9 par un tableau ordre de n cases d\u2019entiers distincts deux \u00e0 deux et compris entre 1 et n . Par exemple, ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9] dans le cas n = 9 . On dit qu\u2019il y a un point de rupture dans ordre dans chacune des situations suivantes : la premi\u00e8re valeur de ordre n\u2019est pas 1 ; l\u2019\u00e9cart entre deux g\u00e8nes cons\u00e9cutifs n\u2019est pas \u00e9gal \u00e0 1 ; la derni\u00e8re valeur de ordre n\u2019est pas n. Par exemple, si ordre = [5, 4, 3, 6, 7, 2, 1, 8, 9] avec n = 9 , on a un point de rupture au d\u00e9but car 5 est diff\u00e9rent de 1 un point de rupture entre 3 et 6 (l\u2019\u00e9cart est de 3) un point de rupture entre 7 et 2 (l\u2019\u00e9cart est de 5) un point de rupture entre 1 et 8 (l\u2019\u00e9cart est de 7) Il y a donc 4 points de rupture. Compl\u00e9ter les fonctions Python est_un_ordre et nombre_points_rupture propos\u00e9es \u00e0 la page suivante pour que : la fonction est_un_ordre renvoie True si le tableau pass\u00e9 en param\u00e8tre repr\u00e9sente bien un ordre de g\u00e8nes de chromosome et False sinon ; la fonction nombre_points_rupture renvoie le nombre de points de rupture d\u2019un tableau pass\u00e9 en param\u00e8tre repr\u00e9sentant l\u2019ordre de g\u00e8nes d\u2019un chromosome. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def est_un_ordre ( tab ): ''' Renvoie True si tab est de longueur n et contient tous les entiers de 1 \u00e0 n, False sinon ''' for i in range ( 1 , ... ): if ... : return False return True def nombre_points_rupture ( ordre ): ''' Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre de g\u00e8nes de chromosome ''' assert ... # ordre n'est pas un ordre de g\u00e8nes n = len ( ordre ) nb = 0 if ordre [ ... ] != 1 : # le premier n'est pas 1 nb = nb + 1 i = 0 while i < ... : if ... not in [ - 1 , 1 ]: # l'\u00e9cart n'est pas 1 nb = nb + 1 i = i + 1 if ordre [ ... ] != n : # le dernier n'est pas n nb = nb + 1 return nb Exemples : >>> est_un_ordre ([ 1 , 6 , 2 , 8 , 3 , 7 ]) False >>> est_un_ordre ([ 5 , 4 , 3 , 6 , 7 , 2 , 1 , 8 , 9 ]) True >>> nombre_points_rupture ([ 5 , 4 , 3 , 6 , 7 , 2 , 1 , 8 , 9 ]) 4 >>> nombre_points_rupture ([ 1 , 2 , 3 , 4 , 5 ]) 0 >>> nombre_points_rupture ([ 1 , 6 , 2 , 8 , 3 , 7 , 4 , 5 ]) 7 >>> nombre_points_rupture ([ 2 , 1 , 3 , 4 ]) 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def est_un_ordre ( tab ): ''' Renvoie True si tab est de longueur n et contient tous les entiers de 1 \u00e0 n, False sinon ''' for i in range ( 1 , len ( tab ) + 1 ): if i not in tab : return False return True def nombre_points_rupture ( ordre ): ''' Renvoie le nombre de point de rupture de ordre qui repr\u00e9sente un ordre de g\u00e8nes de chromosome ''' assert est_un_ordre ( ordre ) # ordre n'est pas un ordre de g\u00e8nes n = len ( ordre ) nb = 0 if ordre [ 0 ] != 1 : # le premier n'est pas 1 nb = nb + 1 i = 0 while i < n - 1 : if ordre [ i + 1 ] - ordre [ i ] not in [ - 1 , 1 ]: # l'\u00e9cart n'est pas 1 nb = nb + 1 i = i + 1 if ordre [ n - 1 ] != n : # le dernier n'est pas n nb = nb + 1 return nb", "title": "Exercice 18.2"}, {"location": "term/ep.html#sujet-19", "text": "", "title": "\u25b6 Sujet 19"}, {"location": "term/ep.html#exercice-191", "text": "Exercice 19.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction recherche qui prend en param\u00e8tres un tableau tab de nombres entiers tri\u00e9s par ordre croissant et un nombre entier n , et qui effectue une recherche dichotomique du nombre entier n dans le tableau non vide tab . Cette fonction doit renvoyer un indice correspondant au nombre cherch\u00e9 s\u2019il est dans le tableau, -1 sinon. Exemples : >>> recherche ([ 2 , 3 , 4 , 5 , 6 ], 5 ) 3 >>> recherche ([ 2 , 3 , 4 , 6 , 7 ], 5 ) - 1 1 2 3 4 5 6 7 8 9 10 11 12 def recherche ( tab , n ): ind_debut = 0 ind_fin = len ( tab ) - 1 while ind_debut <= ind_fin : ind_milieu = ( ind_debut + ind_fin ) // 2 if tab [ ind_milieu ] == n : return ind_milieu elif tab [ ind_milieu ] < n : ind_debut = ind_milieu + 1 else : ind_fin = ind_milieu - 1 return - 1", "title": "Exercice 19.1"}, {"location": "term/ep.html#exercice-192", "text": "Exercice 19.2 \u00c9nonc\u00e9 Correction Le codage de C\u00e9sar transforme un message en changeant chaque lettre en la d\u00e9calant dans l\u2019alphabet. Par exemple, avec un d\u00e9calage de 3, le A se transforme en D, le B en E, ..., le X en A, le Y en B et le Z en C. Les autres caract\u00e8res (\u2018!\u2019,\u2019 ?\u2019 ...) ne sont pas cod\u00e9s. La fonction position_alphabet ci-dessous prend en param\u00e8tre un caract\u00e8re lettre et renvoie la position de lettre dans la cha\u00eene de caract\u00e8res ALPHABET s\u2019il s\u2019y trouve. La fonction cesar prend en param\u00e8tre une cha\u00eene de caract\u00e8res message et un nombre entier decalage et renvoie le nouveau message cod\u00e9 avec le codage de C\u00e9sar utilisant le d\u00e9calage decalage . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' def position_alphabet ( lettre ): return ord ( lettre ) - ord ( 'A' ) def cesar ( message , decalage ): resultat = '' for ... in message : if 'A' <= c and c <= 'Z' : indice = ( ... ) % 26 resultat = resultat + ALPHABET [ indice ] else : resultat = ... return resultat Compl\u00e9ter la fonction cesar . Exemples : >>> cesar ( 'BONJOUR A TOUS. VIVE LA MATIERE NSI !' , 4 ) 'FSRNSYV E XSYW. ZMZI PE QEXMIVI RWM !' >>> cesar ( 'GTSOTZW F YTZX. ANAJ QF RFYNJWJ SXN !' , - 5 ) 'BONJOUR A TOUS. VIVE LA MATIERE NSI !' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' def position_alphabet ( lettre ): return ord ( lettre ) - ord ( 'A' ) def cesar ( message , decalage ): resultat = '' for c in message : if 'A' <= c and c <= 'Z' : indice = ( position_alphabet ( c ) + decalage ) % 26 resultat = resultat + ALPHABET [ indice ] else : resultat = resultat + c return resultat", "title": "Exercice 19.2"}, {"location": "term/ep.html#sujet-20", "text": "", "title": "\u25b6 Sujet 20"}, {"location": "term/ep.html#exercice-201", "text": "Exercice 20.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction ajoute_dictionnaires qui prend en param\u00e8tres deux dictionnaires d1 et d2 dont les cl\u00e9s sont des nombres et renvoie le dictionnaire d d\u00e9fini de la fa\u00e7on suivante : Les cl\u00e9s de d sont celles de d1 et celles de d2 r\u00e9unies. Si une cl\u00e9 est pr\u00e9sente dans les deux dictionnaires d1 et d2 , sa valeur associ\u00e9e dans le dictionnaire d est la somme de ses valeurs dans les dictionnaires d1 et d2 . Si une cl\u00e9 n\u2019est pr\u00e9sente que dans un des deux dictionnaires, sa valeur associ\u00e9e dans le dictionnaire d est la m\u00eame que sa valeur dans le dictionnaire o\u00f9 elle est pr\u00e9sente. Exemples : >>> ajoute_dictionnaires ({ 1 : 5 , 2 : 7 }, { 2 : 9 , 3 : 11 }) { 1 : 5 , 2 : 16 , 3 : 11 } >>> ajoute_dictionnaires ({}, { 2 : 9 , 3 : 11 }) { 2 : 9 , 3 : 11 } >>> ajoute_dictionnaires ({ 1 : 5 , 2 : 7 }, {}) { 1 : 5 , 2 : 7 } 1 2 3 4 5 6 7 def ajoute_dictionnaires ( d1 , d2 ): for cle in d2 : if cle in d1 : d1 [ cle ] += d2 [ cle ] else : d1 [ cle ] = d2 [ cle ] return d1", "title": "Exercice 20.1"}, {"location": "term/ep.html#exercice-202", "text": "Exercice 20.2 \u00c9nonc\u00e9 Correction On consid\u00e8re une piste carr\u00e9e qui contient 4 cases par c\u00f4t\u00e9. Les cases sont num\u00e9rot\u00e9es de 0 inclus \u00e0 12 exclu comme ci-dessous : L\u2019objectif de l\u2019exercice est d\u2019impl\u00e9menter le jeu suivant : Au d\u00e9part, le joueur place son pion sur la case 0. A chaque coup, il lance un d\u00e9 \u00e9quilibr\u00e9 \u00e0 six faces et avance son pion d\u2019autant de cases que le nombre indiqu\u00e9 par le d\u00e9 (entre 1 et 6 inclus) dans le sens des aiguilles d\u2019une montre. Par exemple, s\u2019il obtient 2 au premier lancer, il pose son pion sur la case 2 puis s\u2019il obtient 6 au deuxi\u00e8me lancer, il le pose sur la case 8, puis s\u2019il obtient \u00e0 nouveau 6, il pose le pion sur la case 2. Le jeu se termine lorsque le joueur a pos\u00e9 son pion sur toutes les cases de la piste. Compl\u00e9ter la fonction nbre_coups ci-dessous de sorte qu\u2019elle renvoie le nombre de lancers al\u00e9atoires n\u00e9cessaires pour terminer le jeu. Proposer ensuite quelques tests pour en v\u00e9rifier le fonctionnement. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from random import randint def nbre_coups (): n = ... cases_vues = [ 0 ] case_en_cours = 0 nbre_cases = 12 while ... < ... : x = randint ( 1 , 6 ) case_en_cours = ( case_en_cours + ... ) % ... if ... : cases_vues . append ( case_en_cours ) n = ... return n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from random import randint def nbre_coups (): n = 0 cases_vues = [ 0 ] case_en_cours = 0 nbre_cases = 12 while len ( cases_vues ) < nbre_cases : x = randint ( 1 , 6 ) case_en_cours = ( case_en_cours + x ) % nbre_cases if case_en_cours not in cases_vues : cases_vues . append ( case_en_cours ) n = n + 1 return n", "title": "Exercice 20.2"}, {"location": "term/ep.html#sujet-21", "text": "", "title": "\u25b6 Sujet 21"}, {"location": "term/ep.html#exercice-211", "text": "Exercice 21.1 \u00c9nonc\u00e9 Correction Le codage par diff\u00e9rence ( delta encoding en anglais) permet de compresser un tableau de donn\u00e9es en indiquant pour chaque donn\u00e9e, sa diff\u00e9rence avec la pr\u00e9c\u00e9dente (plut\u00f4t que la donn\u00e9e elle-m\u00eame). On se retrouve alors avec un tableau de donn\u00e9es plus petit, n\u00e9cessitant moins de place en m\u00e9moire. Cette m\u00e9thode se r\u00e9v\u00e8le efficace lorsque les valeurs cons\u00e9cutives sont proches. Programmer la fonction delta(liste) qui prend en param\u00e8tre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs enti\u00e8res compress\u00e9es \u00e0 l\u2019aide cette technique. Exemples : >>> delta ([ 1000 , 800 , 802 , 1000 , 1003 ]) [ 1000 , - 200 , 2 , 198 , 3 ] >>> delta ([ 42 ]) [ 42 ] 1 2 3 4 5 def delta ( tab ): diff = [ tab [ 0 ]] for i in range ( 1 , len ( tab )): diff . append ( tab [ i ] - tab [ i - 1 ]) return diff", "title": "Exercice 21.1"}, {"location": "term/ep.html#exercice-212", "text": "Exercice 21.2 \u00c9nonc\u00e9 Correction Une expression arithm\u00e9tique ne comportant que les quatre op\u00e9rations +, \u2212, \u00d7, \u00f7 peut \u00eatre repr\u00e9sent\u00e9e sous forme d\u2019arbre binaire. Les n\u0153uds internes sont des op\u00e9rateurs et les feuilles sont des nombres. Dans un tel arbre, la disposition des n\u0153uds joue le r\u00f4le des parenth\u00e8ses que nous connaissons bien. En parcourant en profondeur infixe l\u2019arbre binaire ci-dessus, on retrouve l\u2019expression not\u00e9e habituellement : \\[(3 \\times (8 + 7)) \u2212 (2 + 1)\\] La classe Noeud ci-apr\u00e8s permet d\u2019impl\u00e9menter une structure d\u2019arbre binaire. Compl\u00e9ter la fonction r\u00e9cursive expression_infixe qui prend en param\u00e8tre un objet de la classe Noeud et qui renvoie l\u2019expression arithm\u00e9tique repr\u00e9sent\u00e9e par l\u2019arbre binaire pass\u00e9 en param\u00e8tre, sous forme d\u2019une cha\u00eene de caract\u00e8res contenant des parenth\u00e8ses. R\u00e9sultat attendu avec l\u2019arbre ci-dessus : >>> e = Noeud ( Noeud ( Noeud ( None , 3 , None ), '*' , Noeud ( Noeud ( None , 8 , None ), '+' , Noeud ( None , 7 , None ))), '-' , Noeud ( Noeud ( None , 2 , None ), '+' , Noeud ( None , 1 , None ))) >>> expression_infixe ( e ) '((3*(8+7))-(2+1))' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Noeud : ''' classe impl\u00e9mentant un noeud d'arbre binaire ''' def __init__ ( self , g , v , d ): ''' un objet Noeud poss\u00e8de 3 attributs : - gauche : le sous-arbre gauche, - valeur : la valeur de l'\u00e9tiquette, - droit : le sous-arbre droit. ''' self . gauche = g self . valeur = v self . droit = d def __str__ ( self ): ''' renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res ''' return str ( self . valeur ) def est_une_feuille ( self ): ''' renvoie True si et seulement si le noeud est une feuille ''' return self . gauche is None and self . droit is None def expression_infixe ( e ): s = ... if e . gauche is not None : s = '(' + s + expression_infixe ( ... ) s = s + ... if ... is not None : s = s + ... + ... return s 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Noeud : ''' classe impl\u00e9mentant un noeud d'arbre binaire ''' def __init__ ( self , g , v , d ): ''' un objet Noeud poss\u00e8de 3 attributs : - gauche : le sous-arbre gauche, - valeur : la valeur de l'\u00e9tiquette, - droit : le sous-arbre droit. ''' self . gauche = g self . valeur = v self . droit = d def __str__ ( self ): ''' renvoie la repr\u00e9sentation du noeud en chaine de caract\u00e8res ''' return str ( self . valeur ) def est_une_feuille ( self ): ''' renvoie True si et seulement si le noeud est une feuille ''' return self . gauche is None and self . droit is None def expression_infixe ( e ): s = '' if e . gauche is not None : s = '(' + s + expression_infixe ( e . gauche ) s = s + str ( e . valeur ) if e . droit is not None : s = s + expression_infixe ( e . droit ) + ')' return s", "title": "Exercice 21.2"}, {"location": "term/ep.html#sujet-22", "text": "", "title": "\u25b6 Sujet 22"}, {"location": "term/ep.html#exercice-221", "text": "Exercice 22.1 \u00c9nonc\u00e9 Correction On rappelle que : le nombre \\(a^n\\) est le nombre \\(a \\times a \\times a \\times \\dots \\times a\\) , o\u00f9 le facteur \\(a\\) appara\u00eet \\(n\\) fois, en langage Python, l\u2019instruction t[-1] permet d\u2019acc\u00e9der au dernier \u00e9l\u00e9ment du tableau t . Dans cet exercice, l\u2019op\u00e9rateur ** et la fonction pow ne sont pas autoris\u00e9s. Programmer en langage Python une fonction liste_puissances qui prend en argument un nombre entier a , un entier strictement positif n et qui renvoie la liste de ses puissances \\(\\rm{[a^1, a^2, ..., a^n]}\\) . Programmer \u00e9galement une fonction liste_puisssances_borne qui prend en argument un nombre entier a sup\u00e9rieur ou \u00e9gal \u00e0 2 et un entier borne , et qui renvoie la liste de ses puissances, \u00e0 l\u2019exclusion de \\(\\rm{a^0}\\) , strictement inf\u00e9rieures \u00e0 borne . Exemples : >>> liste_puissances ( 3 , 5 ) [ 3 , 9 , 27 , 81 , 243 ] >>> liste_puissances ( - 2 , 4 ) [ - 2 , 4 , - 8 , 16 ] >>> liste_puissances_borne ( 2 , 16 ) [ 2 , 4 , 8 ] >>> liste_puissances_borne ( 2 , 17 ) [ 2 , 4 , 8 , 16 ] >>> liste_puissances_borne ( 5 , 5 ) [] 1 2 3 4 5 6 7 8 9 10 11 12 13 def liste_puissances ( a , n ): puissances = [ a ] for i in range ( n - 1 ): puissances . append ( puissances [ - 1 ] * a ) return puissances def liste_puissances_borne ( a , borne ): lst = [] val = a while val < borne : lst . append ( val ) val = val * a return lst", "title": "Exercice 22.1"}, {"location": "term/ep.html#exercice-222", "text": "Exercice 22.2 \u00c9nonc\u00e9 Correction On affecte \u00e0 chaque lettre de l'alphabet un code selon le tableau ci-dessous : A B C D E F G H I J K L M 1 2 3 4 5 6 7 8 9 10 11 12 13 N O P Q R S T U V W X Y Z 14 15 16 17 18 19 20 21 22 23 24 25 26 Pour un mot donn\u00e9, on d\u00e9termine d\u2019une part son code alphab\u00e9tique concat\u00e9n\u00e9 , obtenu par la juxtaposition des codes de chacun de ses caract\u00e8res, et d\u2019autre part, son code additionn\u00e9 , qui est la somme des codes de chacun de ses caract\u00e8res. Par ailleurs, on dit que ce mot est \u00ab parfait \u00bb si le code additionn\u00e9 divise le code concat\u00e9n\u00e9. Exemples : Pour le mot \"PAUL\" , le code concat\u00e9n\u00e9 est la cha\u00eene '1612112' , soit l\u2019entier 1 612 112. Son code additionn\u00e9 est l\u2019entier 50 car 16 + 1 + 21 + 12 = 50. 50 ne divise pas l\u2019entier 1 612 112 ; par cons\u00e9quent, le mot \"PAUL\" n\u2019est pas parfait. Pour le mot \"ALAIN\" , le code concat\u00e9n\u00e9 est la cha\u00eene '1121914' , soit l\u2019entier 1 121 914. Le code additionn\u00e9 est l\u2019entier 37 car 1 + 12 + 1 + 9 + 14 = 37. 37 divise l\u2019entier 1 121 914 ; par cons\u00e9quent, le mot \"ALAIN\" est parfait. Compl\u00e9ter la fonction est_parfait ci-dessous qui prend comme argument une cha\u00eene de caract\u00e8res mot (en lettres majuscules) et qui renvoie le code alphab\u00e9tique concat\u00e9n\u00e9, le code additionn\u00e9 de mot , ainsi qu\u2019un bool\u00e9en qui indique si mot est parfait ou pas. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 dico = { \"A\" : 1 , \"B\" : 2 , \"C\" : 3 , \"D\" : 4 , \"E\" : 5 , \"F\" : 6 , \"G\" : 7 , \"H\" : 8 , \"I\" : 9 , \"J\" : 10 , \"K\" : 11 , \"L\" : 12 , \"M\" : 13 , \"N\" : 14 , \"O\" : 15 , \"P\" : 16 , \"Q\" : 17 , \"R\" : 18 , \"S\" : 19 , \"T\" : 20 , \"U\" : 21 , \"V\" : 22 , \"W\" : 23 , \"X\" : 24 , \"Y\" : 25 , \"Z\" : 26 } def est_parfait ( mot ): # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules) code_concatene = \"\" code_additionne = ... for c in mot : code_concatene = code_concatene + ... code_additionne = ... code_concatene = int ( code_concatene ) if ... : mot_est_parfait = True else : mot_est_parfait = False return code_additionne , code_concatene , mot_est_parfait Exemples : >>> est_parfait ( \"PAUL\" ) ( 50 , 1612112 , False ) >>> est_parfait ( \"ALAIN\" ) ( 37 , 1121914 , True ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 dico = { \"A\" : 1 , \"B\" : 2 , \"C\" : 3 , \"D\" : 4 , \"E\" : 5 , \"F\" : 6 , \"G\" : 7 , \"H\" : 8 , \"I\" : 9 , \"J\" : 10 , \"K\" : 11 , \"L\" : 12 , \"M\" : 13 , \"N\" : 14 , \"O\" : 15 , \"P\" : 16 , \"Q\" : 17 , \"R\" : 18 , \"S\" : 19 , \"T\" : 20 , \"U\" : 21 , \"V\" : 22 , \"W\" : 23 , \"X\" : 24 , \"Y\" : 25 , \"Z\" : 26 } def est_parfait ( mot ): # mot est une cha\u00eene de caract\u00e8res (en lettres majuscules) code_concatene = \"\" code_additionne = 0 for c in mot : code_concatene = code_concatene + str ( dico [ c ]) code_additionne = code_additionne + dico [ c ] code_concatene = int ( code_concatene ) if code_concatene % code_additionne == 0 : mot_est_parfait = True else : mot_est_parfait = False return code_additionne , code_concatene , mot_est_parfait", "title": "Exercice 22.2"}, {"location": "term/ep.html#sujet-23", "text": "", "title": "\u25b6 Sujet 23"}, {"location": "term/ep.html#exercice-231", "text": "Exercice 23.1 \u00c9nonc\u00e9 Correction On consid\u00e8re des tables (des tableaux de dictionnaires) qui contiennent des enregistrements relatifs \u00e0 des animaux h\u00e9berg\u00e9s dans un refuge. Les attributs des enregistrements sont 'nom' , 'espece' , 'age' , 'enclos' . Voici un exemple d'une telle table : animaux = [ { 'nom' : 'Medor' , 'espece' : 'chien' , 'age' : 5 , 'enclos' : 2 }, { 'nom' : 'Titine' , 'espece' : 'chat' , 'age' : 2 , 'enclos' : 5 }, { 'nom' : 'Tom' , 'espece' : 'chat' , 'age' : 7 , 'enclos' : 4 }, { 'nom' : 'Belle' , 'espece' : 'chien' , 'age' : 6 , 'enclos' : 3 }, { 'nom' : 'Mirza' , 'espece' : 'chat' , 'age' : 6 , 'enclos' : 5 }] Programmer une fonction selection_enclos qui : prend en param\u00e8tres : une table table_animaux contenant des enregistrements relatifs \u00e0 des animaux (comme dans l'exemple ci-dessus), un num\u00e9ro d'enclos num_enclos ; renvoie une table contenant les enregistrements de table_animaux dont l'attribut 'enclos' est num_enclos . Exemples avec la table animaux ci-dessus : >>> selection_enclos ( animaux , 5 ) [{ 'nom' : 'Titine' , 'espece' : 'chat' , 'age' : 2 , 'enclos' : 5 }, { 'nom' : 'Mirza' , 'espece' : 'chat' , 'age' : 6 , 'enclos' : 5 }] >>> selection_enclos ( animaux , 2 ) [{ 'nom' : 'Medor' , 'espece' : 'chien' , 'age' : 5 , 'enclos' : 2 }] >>> selection_enclos ( animaux , 7 ) [] 1 2 3 4 5 6 def selection_enclos ( table_animaux , num_enclos ): table = [] for animal in table_animaux : if animal [ 'enclos' ] == num_enclos : table . append ( animal ) return table", "title": "Exercice 23.1"}, {"location": "term/ep.html#exercice-232", "text": "Exercice 23.2 \u00c9nonc\u00e9 Correction On consid\u00e8re des tableaux de nombres dont tous les \u00e9l\u00e9ments sont pr\u00e9sents exactement trois fois et \u00e0 suivre, sauf un \u00e9l\u00e9ment qui est pr\u00e9sent une unique fois et que l'on appelle \u00ab l'intrus \u00bb. Voici quelques exemples : tab_a = [ 3 , 3 , 3 , 9 , 9 , 9 , 1 , 1 , 1 , 7 , 2 , 2 , 2 , 4 , 4 , 4 , 8 , 8 , 8 , 5 , 5 , 5 ] #l'intrus est 7 tab_b = [ 8 , 5 , 5 , 5 , 9 , 9 , 9 , 18 , 18 , 18 , 3 , 3 , 3 ] #l'intrus est 8 tab_c = [ 5 , 5 , 5 , 1 , 1 , 1 , 0 , 0 , 0 , 6 , 6 , 6 , 3 , 8 , 8 , 8 ] #l'intrus est 3 On remarque qu'avec de tels tableaux : pour les indices multiples de 3 situ\u00e9s strictement avant l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite sont \u00e9gaux, pour les indices multiples de 3 situ\u00e9s apr\u00e8s l'intrus, l'\u00e9l\u00e9ment correspondant et son voisin de droite - s'il existe - sont diff\u00e9rents. Ce que l'on peut observer ci-dessous en observant les valeurs des paires de voisins marqu\u00e9es par des caract\u00e8res ^ : [ 3 , 3 , 3 , 9 , 9 , 9 , 1 , 1 , 1 , 7 , 2 , 2 , 2 , 4 , 4 , 4 , 8 , 8 , 8 , 5 , 5 , 5 ] ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ 0 3 6 9 12 15 18 21 Dans des listes comme celles ci-dessus, un algorithme r\u00e9cursif pour trouver l'intrus consiste alors \u00e0 choisir un indice i multiple de 3 situ\u00e9 approximativement au milieu des indices parmi lesquels se trouve l'intrus. Puis, en fonction des valeurs de l'\u00e9l\u00e9ment d'indice i et de son voisin de droite, \u00e0 appliquer r\u00e9cursivement l'algorithme \u00e0 la moiti\u00e9 droite ou \u00e0 la moiti\u00e9 gauche des indices parmi lesquels se trouve l'intrus. Par exemple, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 12, on voit les valeurs 2 et 4 qui sont diff\u00e9rentes : l\u2019intrus est donc \u00e0 gauche de l\u2019indice 12 (indice 12 compris) En revanche, si on s\u2019int\u00e9resse \u00e0 l\u2019indice 3, on voit les valeurs 9 et 9 qui sont identiques : l\u2019intrus est donc \u00e0 droite des indices 3-4-5, donc \u00e0 partir de l\u2019indice 6. Compl\u00e9ter la fonction r\u00e9cursive trouver_intrus propos\u00e9e page suivante qui met en \u0153uvre cet algorithme. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def trouver_intrus ( tab , g , d ): ''' Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d dans la liste tab o\u00f9 : tab v\u00e9rifie les conditions de l'exercice, g et d sont des multiples de 3. ''' if g == d : return ... else : nombre_de_triplets = ( d - g ) // ... indice = g + 3 * ( nombre_de_triplets // 2 ) if ... : return ... else : return ... Exemples : >>> trouver_intrus ([ 3 , 3 , 3 , 9 , 9 , 9 , 1 , 1 , 1 , 7 , 2 , 2 , 2 , 4 , 4 , 4 , 8 , 8 , 8 , 5 , 5 , 5 ], 0 , 21 ) 7 >>> trouver_intrus ([ 8 , 5 , 5 , 5 , 9 , 9 , 9 , 18 , 18 , 18 , 3 , 3 , 3 ], 0 , 12 ) 8 >>> trouver_intrus ([ 5 , 5 , 5 , 1 , 1 , 1 , 0 , 0 , 0 , 6 , 6 , 6 , 3 , 8 , 8 , 8 ], 0 , 15 ) 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def trouver_intrus ( tab , g , d ): ''' Renvoie la valeur de l'intrus situ\u00e9 entre les indices g et d dans la liste tab o\u00f9 : tab v\u00e9rifie les conditions de l'exercice, g et d sont des multiples de 3. ''' if g == d : return tab [ g ] else : nombre_de_triplets = ( d - g ) // 3 indice = g + 3 * ( nombre_de_triplets // 2 ) if tab [ indice ] != tab [ indice + 1 ] : return trouver_intrus ( tab , g , indice ) else : return trouver_intrus ( tab , indice + 3 , d )", "title": "Exercice 23.2"}, {"location": "term/ep.html#sujet-24", "text": "", "title": "\u25b6 Sujet 24"}, {"location": "term/ep.html#exercice-241", "text": "Exercice 24.1 \u00c9nonc\u00e9 Correction Le nombre d\u2019occurrences d\u2019un caract\u00e8re dans une cha\u00eene de caract\u00e8re est le nombre d\u2019apparitions de ce caract\u00e8re dans la cha\u00eene. Exemples : le nombre d\u2019occurrences du caract\u00e8re \u2018o\u2019 dans \u2018bonjour\u2019 est 2 ; le nombre d\u2019occurrences du caract\u00e8re \u2018b\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ; le nombre d\u2019occurrences du caract\u00e8re \u2018B\u2019 dans \u2018B\u00e9b\u00e9\u2019 est 1 ; le nombre d\u2019occurrences du caract\u00e8re \u2018 \u2018 dans \u2018Hello world !\u2019 est 2. On cherche les occurrences des caract\u00e8res dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caract\u00e8res de la phrase et les valeurs l\u2019occurrence de ces caract\u00e8res. Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant : {'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1} L\u2019ordre des clefs n\u2019a pas d\u2019importance. \u00c9crire une fonction nbr_occurrences prenant comme param\u00e8tre une cha\u00eene de caract\u00e8res chaine et renvoyant le dictionnaire des nombres d\u2019occurrences des caract\u00e8res de cette cha\u00eene. 1 2 3 4 5 6 7 8 def nbr_occurrences ( chaine ): nb_occ = {} for caractere in chaine : if caractere in nb_occ : nb_occ [ caractere ] += 1 else : nb_occ [ caractere ] = 1 return nb_occ", "title": "Exercice 24.1"}, {"location": "term/ep.html#exercice-242", "text": "Exercice 24.2 \u00c9nonc\u00e9 Correction La fonction fusion prend deux listes lst1 , lst2 d\u2019entiers tri\u00e9es par ordre croissant et les fusionne en une liste tri\u00e9e lst12 qu\u2019elle renvoie. Le code Python de la fonction fusion est 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def fusion ( lst1 , lst2 ): n1 = len ( lst1 ) n2 = len ( lst2 ) lst12 = [ 0 ] * ( n1 + n2 ) i1 = 0 i2 = 0 i = 0 while i1 < n1 and ... : if lst1 [ i1 ] < lst2 [ i2 ]: lst12 [ i ] = ... i1 = ... else : lst12 [ i ] = lst2 [ i2 ] i2 = ... i += 1 while i1 < n1 : lst12 [ i ] = ... i1 = i1 + 1 i = ... while i2 < n2 : lst12 [ i ] = ... i2 = i2 + 1 i = ... return lst12 Compl\u00e9ter le code. Exemple : >>> fusion ([ 1 , 6 , 10 ],[ 0 , 7 , 8 , 9 ]) [ 0 , 1 , 6 , 7 , 8 , 9 , 10 ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def fusion ( lst1 , lst2 ): n1 = len ( lst1 ) n2 = len ( lst2 ) lst12 = [ 0 ] * ( n1 + n2 ) i1 = 0 i2 = 0 i = 0 while i1 < n1 and i2 < n2 : if lst1 [ i1 ] < lst2 [ i2 ]: lst12 [ i ] = lst1 [ i1 ] i1 = i1 + 1 else : lst12 [ i ] = lst2 [ i2 ] i2 = i2 + 1 i += 1 while i1 < n1 : lst12 [ i ] = lst1 [ i1 ] i1 = i1 + 1 i = i + 1 while i2 < n2 : lst12 [ i ] = lst2 [ i2 ] i2 = i2 + 1 i = i + 1 return lst12", "title": "Exercice 24.2"}, {"location": "term/ep.html#sujet-25", "text": "", "title": "\u25b6 Sujet 25"}, {"location": "term/ep.html#exercice-251", "text": "Exercice 25.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction enumere qui prend en param\u00e8tre une liste L et renvoie un dictionnaire d dont les cl\u00e9s sont les \u00e9l\u00e9ments de L avec pour valeur associ\u00e9e la liste des indices de l\u2019\u00e9l\u00e9ment dans la liste L . Exemple : >>> enumere ([ 1 , 1 , 2 , 3 , 2 , 1 ]) { 1 : [ 0 , 1 , 5 ], 2 : [ 2 , 4 ], 3 : [ 3 ]} 1 2 3 4 5 6 7 8 def enumere ( L ): d = {} for i in range ( len ( L )): if L [ i ] in d : d [ L [ i ]] . append ( i ) else : d [ L [ i ]] = [ i ] return d", "title": "Exercice 25.1"}, {"location": "term/ep.html#exercice-252", "text": "Exercice 25.2 \u00c9nonc\u00e9 Correction Un arbre binaire est impl\u00e9ment\u00e9 par la classe Arbre donn\u00e9e ci-dessous. Les attributs fg et fd prennent pour valeurs des instances de la classe Arbre ou None . 1 2 3 4 5 6 7 8 9 10 11 12 class Arbre : def __init__ ( self , etiquette ): self . v = etiquette self . fg = None self . fd = None def parcours ( arbre , liste ): if arbre != None : parcours ( arbre . fg , liste ) liste . append ( arbre . v ) parcours ( arbre . fd , liste ) return liste La fonction r\u00e9cursive parcours renvoie la liste des \u00e9tiquettes des n\u0153uds de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance arbre dans l\u2019ordre du parcours en profondeur infixe \u00e0 partir d\u2019une liste vide pass\u00e9e en argument. Compl\u00e9ter le code de la fonction insere qui ins\u00e8re un n\u0153ud d\u2019\u00e9tiquette cle en feuille de l\u2019arbre impl\u00e9ment\u00e9 par l\u2019instance arbre selon la sp\u00e9cification indiqu\u00e9e et de fa\u00e7on que l\u2019arbre ainsi compl\u00e9t\u00e9 soit encore un arbre binaire de recherche. Tester ensuite ce code en utilisant la fonction parcours et en ins\u00e9rant successivement des n\u0153uds d\u2019\u00e9tiquette 1, 4, 6 et 8 dans l\u2019arbre binaire de recherche repr\u00e9sent\u00e9 ci- dessous : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def insere ( arbre , cle ): \"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente un arbre binaire de recherche. \"\"\" if ... : if ... : insere ( arbre . fg , cle ) else : arbre . fg = Arbre ( cle ) else : if ... : insere ( arbre . fd , cle ) else : arbre . fd = Arbre ( cle ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def insere ( arbre , cle ): \"\"\" arbre est une instance de la classe Arbre qui impl\u00e9mente un arbre binaire de recherche. \"\"\" if cle < arbre . v : if arbre . fg is not None : insere ( arbre . fg , cle ) else : arbre . fg = Arbre ( cle ) else : if arbre . fd is not None : insere ( arbre . fd , cle ) else : arbre . fd = Arbre ( cle ) Tests : >>> a = Arbre ( 5 ) >>> insere ( a , 2 ) >>> insere ( a , 7 ) >>> insere ( a , 3 ) >>> parcours ( a , []) [ 2 , 3 , 5 , 7 ] >>> insere ( a , 1 ) >>> insere ( a , 4 ) >>> insere ( a , 6 ) >>> insere ( a , 8 ) >>> parcours ( a , []) [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ]", "title": "Exercice 25.2"}, {"location": "term/ep.html#sujet-26", "text": "", "title": "\u25b6 Sujet 26"}, {"location": "term/ep.html#exercice-261", "text": "Exercice 26.1 \u00c9nonc\u00e9 Correction Programmer la fonction multiplication , prenant en param\u00e8tres deux nombres entiers n1 et n2 , et qui renvoie le produit de ces deux nombres. Les seules op\u00e9rations autoris\u00e9es sont l\u2019addition et la soustraction. >>> multiplication ( 3 , 5 ) 15 >>> multiplication ( - 4 , - 8 ) 32 >>> multiplication ( - 2 , 6 ) - 12 >>> multiplication ( - 2 , 0 ) 0 1 2 3 4 5 6 7 8 9 10 11 def multiplication ( n1 , n2 ): # on se ram\u00e8ne d'abord au cas o\u00f9 n1 et n2 sont tous les deux positifs : if n1 < 0 : return - multiplication ( - n1 , n2 ) if n2 < 0 : return - multiplication ( n1 , - n2 ) resultat = 0 for _ in range ( n2 ): resultat += n1 return resultat", "title": "Exercice 26.1"}, {"location": "term/ep.html#exercice-262", "text": "Exercice 26.2 \u00c9nonc\u00e9 Correction Recopier et compl\u00e9ter sous Python la fonction suivante en respectant la sp\u00e9cification. On ne recopiera pas les commentaires. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def dichotomie ( tab , x ): \"\"\" tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant x : nombre entier La fonction renvoie True si tab contient x et False sinon \"\"\" debut = 0 fin = len ( tab ) - 1 while debut <= fin : m = ... if x == tab [ m ]: return ... if x > tab [ m ]: debut = m + 1 else : fin = ... return ... Exemples : >>> dichotomie ([ 15 , 16 , 18 , 19 , 23 , 24 , 28 , 29 , 31 , 33 ], 28 ) True >>> dichotomie ([ 15 , 16 , 18 , 19 , 23 , 24 , 28 , 29 , 31 , 33 ], 27 ) False 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def dichotomie ( tab , x ): \"\"\" tab : tableau d\u2019entiers tri\u00e9 dans l\u2019ordre croissant x : nombre entier La fonction renvoie True si tab contient x et False sinon \"\"\" debut = 0 fin = len ( tab ) - 1 while debut <= fin : m = ( debut + fin ) // 2 if x == tab [ m ]: return True if x > tab [ m ]: debut = m + 1 else : fin = m - 1 return False", "title": "Exercice 26.2"}, {"location": "term/ep.html#sujet-27", "text": "", "title": "\u25b6 Sujet 27"}, {"location": "term/ep.html#exercice-271", "text": "Exercice 27.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction recherche_min qui prend en param\u00e8tre un tableau de nombres non tri\u00e9 tab , et qui renvoie l'indice de la premi\u00e8re occurrence du minimum de ce tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python. Exemples : >>> recherche_min ([ 5 ]) 0 >>> recherche_min ([ 2 , 4 , 1 ]) 2 >>> recherche_min ([ 5 , 3 , 2 , 2 , 4 ]) 2 1 2 3 4 5 6 def recherche_min ( tab ): indice_min = 0 for i in range ( len ( tab )): if tab [ i ] < tab [ indice_min ]: indice_min = i return indice_min", "title": "Exercice 27.1"}, {"location": "term/ep.html#exercice-272", "text": "Exercice 27.2 \u00c9nonc\u00e9 Correction On consid\u00e8re la fonction separe ci-dessous qui prend en argument un tableau tab dont les \u00e9l\u00e9ments sont des 0 et des 1 et qui s\u00e9pare les 0 des 1 en pla\u00e7ant les 0 en d\u00e9but de tableau et les 1 \u00e0 la suite. 1 2 3 4 5 6 7 8 9 10 def separe ( tab ): gauche = 0 droite = ... while gauche < droite : if tab [ gauche ] == 0 : gauche = ... else : tab [ gauche ], tab [ droite ] = ... droite = ... return tab Compl\u00e9ter la fonction separe ci-dessus. Exemples : >>> separe ([ 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 ]) [ 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ] >>> separe ([ 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 ]) [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] Description d\u2019\u00e9tapes effectu\u00e9es par la fonction separe sur le tableau ci-dessous : tab = [1, 0, 1, 0, 1, 0, 1, 0] Etape 1 : on regarde la premi\u00e8re case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec la derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus la derni\u00e8re case en compte. tab = [0, 0, 1, 0, 1, 0, 1, 1] Etape 2 : on regarde \u00e0 nouveau la premi\u00e8re case, qui contient maintenant un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la premi\u00e8re case en compte. tab = [0, 0, 1, 0, 1, 0, 1, 1] Etape 3 : on regarde la seconde case, qui contient un 0 : ce 0 va aller dans la premi\u00e8re partie du tableau final et est bien positionn\u00e9 : on ne prend plus la seconde case en compte. tab = [0, 0, 1, 0, 1, 0, 1, 1] Etape 4 : on regarde la troisi\u00e8me case, qui contient un 1 : ce 1 va aller dans la seconde partie du tableau final et on l\u2019\u00e9change avec l\u2019avant-derni\u00e8re case. Il est \u00e0 pr\u00e9sent bien positionn\u00e9 : on ne prend plus l\u2019avant-derni\u00e8re case en compte. tab = [0, 0, 1, 0, 1, 0, 1, 1] Et ainsi de suite... tab = [0, 0, 0, 0, 1, 1, 1, 1] Compl\u00e9ter la fonction separe pr\u00e9sent\u00e9e \u00e0 la page pr\u00e9c\u00e9dente 1 2 3 4 5 6 7 8 9 10 def separe ( tab ): gauche = 0 droite = len ( tab ) - 1 while gauche < droite : if tab [ gauche ] == 0 : gauche = gauche + 1 else : tab [ gauche ], tab [ droite ] = tab [ droite ], tab [ gauche ] droite = droite - 1 return tab", "title": "Exercice 27.2"}, {"location": "term/ep.html#sujet-28", "text": "", "title": "\u25b6 Sujet 28"}, {"location": "term/ep.html#exercice-281", "text": "Exercice 28.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction qui prend en param\u00e8tre un tableau d'entiers non vide et qui renvoie la moyenne de ces entiers. La fonction est sp\u00e9cifi\u00e9e ci-apr\u00e8s et doit passer les assertions fournies. def moyenne ( tab ): ''' moyenne(list) -> float Entr\u00e9e : un tableau non vide d'entiers Sortie : nombre de type float Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le tableau ''' assert moyenne ([ 1 ]) == 1 assert moyenne ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]) == 4 assert moyenne ([ 1 , 2 ]) == 1.5 1 2 3 4 5 6 7 8 9 10 11 12 def moyenne ( tab ): ''' moyenne(list) -> float Entr\u00e9e : un tableau non vide d'entiers Sortie : nombre de type float Correspondant \u00e0 la moyenne des valeurs pr\u00e9sentes dans le tableau ''' somme = 0 for elt in tab : somme += elt return somme / len ( tab )", "title": "Exercice 28.1"}, {"location": "term/ep.html#exercice-282", "text": "Exercice 28.2 \u00c9nonc\u00e9 Correction Le but de l'exercice est de compl\u00e9ter une fonction qui d\u00e9termine si une valeur est pr\u00e9sente dans un tableau de valeurs tri\u00e9es dans l'ordre croissant. L'algorithme traite le cas du tableau vide et il est \u00e9crit pour que la recherche dichotomique ne se fasse que dans le cas o\u00f9 la valeur est comprise entre les valeurs extr\u00eames du tableau. On distingue les trois cas qui renvoient False en renvoyant False, 1 , False, 2 et False, 3 . Compl\u00e9ter l'algorithme de dichotomie donn\u00e9 ci-apr\u00e8s. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def dichotomie ( tab , x ): \"\"\" tab : tableau tri\u00e9 dans l\u2019ordre croissant x : nombre entier La fonction renvoie True si tab contient x et False sinon \"\"\" # cas du tableau vide if ... : return False , 1 # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames if ( x < tab [ 0 ]) or ... : return False , 2 debut = 0 fin = len ( tab ) - 1 while debut <= fin : m = ... if x == tab [ m ]: return ... if x > tab [ m ]: debut = m + 1 else : fin = ... return ... Exemples : >>> dichotomie ([ 15 , 16 , 18 , 19 , 23 , 24 , 28 , 29 , 31 , 33 ], 28 ) True >>> dichotomie ([ 15 , 16 , 18 , 19 , 23 , 24 , 28 , 29 , 31 , 33 ], 27 ) ( False , 3 ) >>> dichotomie ([ 15 , 16 , 18 , 19 , 23 , 24 , 28 , 29 , 31 , 33 ], 1 ) ( False , 2 ) >>> dichotomie ([], 28 ) ( False , 1 ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def dichotomie ( tab , x ): \"\"\" tab : tableau tri\u00e9 dans l\u2019ordre croissant x : nombre entier La fonction renvoie True si tab contient x et False sinon \"\"\" # cas du tableau vide if tab == []: return False , 1 # cas o\u00f9 x n'est pas compris entre les valeurs extr\u00eames if ( x < tab [ 0 ]) or ( x > tab [ - 1 ]): return False , 2 debut = 0 fin = len ( tab ) - 1 while debut <= fin : m = ( debut + fin ) // 2 if x == tab [ m ]: return True if x > tab [ m ]: debut = m + 1 else : fin = m - 1 return False , 3", "title": "Exercice 28.2"}, {"location": "term/ep.html#sujet-29", "text": "", "title": "\u25b6 Sujet 29"}, {"location": "term/ep.html#exercice-291", "text": "Exercice 29.1 \u00c9nonc\u00e9 Correction Un arbre binaire est impl\u00e9ment\u00e9 par la classe Arbre donn\u00e9e ci-dessous. Les attributs fg et fd prennent pour valeurs des instances de la classe Arbre ou None . class Arbre : def __init__ ( self , etiquette ): self . v = etiquette self . fg = None self . fd = None L\u2019arbre ci-dessus sera donc impl\u00e9ment\u00e9 de la mani\u00e8re suivante : a = Arbre ( 1 ) a . fg = Arbre ( 4 ) a . fd = Arbre ( 0 ) a . fd . fd = Arbre ( 7 ) \u00c9crire une fonction r\u00e9cursive taille prenant en param\u00e8tre une instance a de la classe Arbre et qui renvoie la taille de l\u2019arbre que cette instance impl\u00e9mente. \u00c9crire de m\u00eame une fonction r\u00e9cursive hauteur prenant en param\u00e8tre une instance a de la classe Arbre et qui renvoie la hauteur de l\u2019arbre que cette instance impl\u00e9mente. Si un arbre a un seul n\u0153ud, sa taille et sa hauteur sont \u00e9gales \u00e0 1. S\u2019il est vide, sa taille et sa hauteur sont \u00e9gales \u00e0 0. Tester les deux fonctions sur l\u2019arbre repr\u00e9sent\u00e9 ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 def taille ( a ): if a is None : return 0 else : return 1 + taille ( a . fg ) + taille ( a . fd ) def hauteur ( a ): if a is None : return 0 else : return 1 + max ( hauteur ( a . fg ), hauteur ( a . fd )) Tests : a = Arbre ( 0 ) a . fg = Arbre ( 1 ) a . fd = Arbre ( 2 ) a . fg . fg = Arbre ( 3 ) a . fd . fg = Arbre ( 4 ) a . fd . fd = Arbre ( 5 ) a . fd . fg . fd = Arbre ( 6 ) >>> taille ( a ) 7 >>> hauteur ( a ) 4", "title": "Exercice 29.1"}, {"location": "term/ep.html#exercice-292", "text": "Exercice 29.2 \u00c9nonc\u00e9 Correction La m\u00e9thode insert de la classe list permet d\u2019ins\u00e9rer un \u00e9l\u00e9ment dans une liste \u00e0 un indice donn\u00e9. Le but de cet exercice est, sans utiliser cette m\u00e9thode , d\u2019\u00e9crire une fonction ajoute r\u00e9alisant cette insertion en produisant une nouvelle liste. Cette fonction ajoute prend en param\u00e8tres trois variables indice , element et liste et renvoie une liste L dans laquelle les \u00e9l\u00e9ments sont ceux de la liste liste avec, en plus, l\u2019\u00e9l\u00e9ment element \u00e0 l\u2019indice indice . On consid\u00e8re que les variables indice et element sont des entiers positifs et que les \u00e9l\u00e9ments de liste sont \u00e9galement des entiers positifs. Les \u00e9l\u00e9ments de la liste liste , dont les indices sont sup\u00e9rieurs ou \u00e9gaux \u00e0 indice apparaissent d\u00e9cal\u00e9s vers la droite dans la liste L . Si indice est sup\u00e9rieur ou \u00e9gal au nombre d\u2019\u00e9l\u00e9ments de la liste liste , l\u2019\u00e9l\u00e9ment element est ajout\u00e9 dans L apr\u00e8s tous les \u00e9l\u00e9ments de la liste liste . Exemple : >>> ajoute ( 1 , 4 , [ 7 , 8 , 9 ]) [ 7 , 4 , 8 , 9 ] >>> ajoute ( 3 , 4 , [ 7 , 8 , 9 ]) [ 7 , 8 , 9 , 4 ] >>> ajoute ( 4 , 4 , [ 7 , 8 , 9 ]) [ 7 , 8 , 9 , 4 ] Compl\u00e9ter et tester le code ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def ajoute ( indice , element , liste ): nbre_elts = len ( liste ) L = [ 0 for i in range ( nbre_elts + 1 )] if ... : for i in range ( indice ): L [ i ] = ... L [ ... ] = ... for i in range ( indice + 1 , nbre_elts + 1 ): L [ i ] = ... else : for i in range ( nbre_elts ): L [ i ] = ... L [ ... ] = ... return L 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def ajoute ( indice , element , liste ): nbre_elts = len ( liste ) L = [ 0 for i in range ( nbre_elts + 1 )] if indice < nbre_elts : for i in range ( indice ): L [ i ] = liste [ i ] L [ indice ] = element for i in range ( indice + 1 , nbre_elts + 1 ): L [ i ] = liste [ i - 1 ] else : for i in range ( nbre_elts ): L [ i ] = liste [ i ] L [ nbre_elts ] = element return L", "title": "Exercice 29.2"}, {"location": "term/ep.html#sujet-30", "text": "", "title": "\u25b6 Sujet 30"}, {"location": "term/ep.html#exercice-301", "text": "Exercice 30.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction moyenne qui prend en param\u00e8tre un tableau non vide de nombres flottants et qui renvoie la moyenne des valeurs du tableau. Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python. Exemples : >>> moyenne ([ 1.0 ]) 1.0 >>> moyenne ([ 1.0 , 2.0 , 4.0 ]) 2.3333333333333335 1 2 3 4 5 def moyenne ( tab ): somme = 0 for val in tab : somme += val return somme / len ( tab )", "title": "Exercice 30.1"}, {"location": "term/ep.html#exercice-302", "text": "Exercice 30.2 \u00c9nonc\u00e9 Correction On consid\u00e8re la fonction binaire ci-dessous qui prend en param\u00e8tre un entier positif a en \u00e9criture d\u00e9cimale et qui renvoie son \u00e9criture binaire sous la forme d'une chaine de caract\u00e8res. L\u2019algorithme utilise la m\u00e9thode des divisions euclidiennes successives comme l\u2019illustre l\u2019exemple ci-apr\u00e8s. 1 2 3 4 5 6 7 def binaire ( a ): bin_a = ... a = a // 2 while a ... : bin_a = ... + bin_a a = ... return bin_a Compl\u00e9ter le code de la fonction binaire . Exemples : >>> binaire ( 83 ) '1010011' >>> binaire ( 127 ) '1111111' >>> binaire ( 0 ) '0' 1 2 3 4 5 6 7 def binaire ( a ): bin_a = str ( a % 2 ) a = a // 2 while a != 0 : bin_a = str ( a % 2 ) + bin_a a = a // 2 return bin_a", "title": "Exercice 30.2"}, {"location": "term/ep.html#sujet-31", "text": "", "title": "\u25b6 Sujet 31"}, {"location": "term/ep.html#exercice-311", "text": "Exercice 31.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction Python appel\u00e9e nb_repetitions qui prend en param\u00e8tres un \u00e9l\u00e9ment elt et une liste tab et renvoie le nombre de fois o\u00f9 l\u2019\u00e9l\u00e9ment appara\u00eet dans la liste. Exemples : >>> nb_repetitions ( 5 , [ 2 , 5 , 3 , 5 , 6 , 9 , 5 ]) 3 >>> nb_repetitions ( 'A' , [ 'B' , 'A' , 'B' , 'A' , 'R' ]) 2 >>> nb_repetitions ( 12 , [ 1 , '!' , 7 , 21 , 36 , 44 ]) 0 1 2 3 4 5 6 def nb_repetitions ( elt , tab ): nb = 0 for element in tab : if element == elt : nb += 1 return nb", "title": "Exercice 31.1"}, {"location": "term/ep.html#exercice-312", "text": "Exercice 31.2 \u00c9nonc\u00e9 Correction Pour rappel, la conversion d\u2019un nombre entier positif en binaire peut s\u2019effectuer \u00e0 l\u2019aide des divisions successives comme illustr\u00e9 ici : Voici une fonction Python bas\u00e9e sur la m\u00e9thode des divisions successives permettant de convertir un nombre entier positif en binaire : 1 2 3 4 5 6 7 def binaire ( a ): bin_a = str ( ... ) a = a // 2 while a ... : bin_a = ... ( a % 2 ) + ... a = ... return bin_a Compl\u00e9ter la fonction binaire . Exemples : >>> binaire ( 0 ) '0' >>> binaire ( 77 ) '1001101' 1 2 3 4 5 6 7 def binaire ( a ): bin_a = str ( a % 2 ) a = a // 2 while a != 0 : bin_a = str ( a % 2 ) + bin_a a = a // 2 return bin_a", "title": "Exercice 31.2"}, {"location": "term/ep.html#sujet-32", "text": "", "title": "\u25b6 Sujet 32"}, {"location": "term/ep.html#exercice-321", "text": "Exercice 32.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction min_et_max qui prend en param\u00e8tre un tableau de nombres tab non vide, et qui renvoie la plus petite et la plus grande valeur du tableau sous la forme d\u2019un dictionnaire \u00e0 deux cl\u00e9s min et max . Les tableaux seront repr\u00e9sent\u00e9s sous forme de liste Python. L\u2019utilisation des fonctions natives min , max et sorted , ainsi que la m\u00e9thode sort n\u2019est pas autoris\u00e9e. Exemples : >>> min_et_max ([ 0 , 1 , 4 , 2 , - 2 , 9 , 3 , 1 , 7 , 1 ]) { 'min' : - 2 , 'max' : 9 } >>> min_et_max ([ 0 , 1 , 2 , 3 ]) { 'min' : 0 , 'max' : 3 } >>> min_et_max ([ 3 ]) { 'min' : 3 , 'max' : 3 } >>> min_et_max ([ 1 , 3 , 2 , 1 , 3 ]) { 'min' : 1 , 'max' : 3 } >>> min_et_max ([ - 1 , - 1 , - 1 , - 1 , - 1 ]) { 'min' : - 1 , 'max' : - 1 } 1 2 3 4 5 6 7 8 9 10 def min_et_max ( tab ): d = {} d [ 'min' ] = tab [ 0 ] d [ 'max' ] = tab [ 0 ] for val in tab : if val < d [ 'min' ]: d [ 'min' ] = val if val > d [ 'max' ]: d [ 'max' ] = val return d", "title": "Exercice 32.1"}, {"location": "term/ep.html#exercice-322", "text": "Exercice 32.2 \u00c9nonc\u00e9 Correction On dispose d\u2019une classe Carte permettant de cr\u00e9er des objets mod\u00e9lisant des cartes \u00e0 jouer. Compl\u00e9ter la classe Paquet_de_cartes suivante en respectant les sp\u00e9cifications donn\u00e9es dans les cha\u00eenes de documentation. Ajouter une assertion dans la m\u00e9thode get_carte afin de v\u00e9rifier que le param\u00e8tre pos est correct. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Carte : def __init__ ( self , c , v ): \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\" self . couleur = c self . valeur = v def get_valeur ( self ): \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\" valeurs = [ 'As' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '10' , 'Valet' , 'Dame' , 'Roi' ] return valeurs [ self . valeur - 1 ] def get_couleur ( self ): \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\" couleurs = [ 'pique' , 'coeur' , 'carreau' , 'tr\u00e8fle' ] return couleurs [ self . couleur - 1 ] class Paquet_de_cartes : def __init__ ( self ): \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur, carreau et tr\u00e9fle. \"\"\" # A compl\u00e9ter def get_carte ( self , pos ): \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\" # A compl\u00e9ter Exemple : Exemple : >>> jeu = Paquet_de_cartes () >>> carte1 = jeu . get_carte ( 20 ) >>> print ( carte1 . get_valeur () + \" de \" + carte1 . get_couleur ()) 8 de coeur >>> carte2 = jeu . get_carte ( 0 ) >>> print ( carte2 . get_valeur () + \" de \" + carte2 . get_couleur ()) As de pique >>> carte3 = jeu . get_carte ( 52 ) AssertionError : param\u00e8tre pos invalide 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Carte : def __init__ ( self , c , v ): \"\"\" Initialise les attributs couleur (entre 1 et 4), et valeur (entre 1 et 13). \"\"\" self . couleur = c self . valeur = v def get_valeur ( self ): \"\"\" Renvoie la valeur de la carte : As, 2, ..., 10, Valet, Dame, Roi \"\"\" valeurs = [ 'As' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '10' , 'Valet' , 'Dame' , 'Roi' ] return valeurs [ self . valeur - 1 ] def get_couleur ( self ): \"\"\" Renvoie la couleur de la carte (parmi pique, coeur, carreau, tr\u00e8fle). \"\"\" couleurs = [ 'pique' , 'coeur' , 'carreau' , 'tr\u00e8fle' ] return couleurs [ self . couleur - 1 ] class Paquet_de_cartes : def __init__ ( self ): \"\"\" Initialise l'attribut contenu avec une liste des 52 objets Carte possibles rang\u00e9s par valeurs croissantes en commen\u00e7ant par pique, puis coeur, carreau et tr\u00e9fle. \"\"\" self . contenu = [ Carte ( c , v ) for c in range ( 1 , 5 ) for v in range ( 1 , 14 )] def get_carte ( self , pos ): \"\"\" Renvoie la carte qui se trouve \u00e0 la position pos (entier compris entre 0 et 51). \"\"\" assert 0 <= pos <= 51 , 'param\u00e8tre pos invalide' return self . contenu [ pos ]", "title": "Exercice 32.2"}, {"location": "term/ep.html#sujet-33", "text": "", "title": "\u25b6 Sujet 33"}, {"location": "term/ep.html#exercice-331", "text": "Exercice 33.1 \u00c9nonc\u00e9 Correction Dans cet exercice, un arbre binaire de caract\u00e8res est stock\u00e9 sous la forme d\u2019un dictionnaire o\u00f9 les clefs sont les caract\u00e8res des n\u0153uds de l\u2019arbre et les valeurs, pour chaque clef, la liste des caract\u00e8res des fils gauche et droit du n\u0153ud. Par exemple, l\u2019arbre est stock\u00e9 dans a = { 'F' :[ 'B' , 'G' ], 'B' :[ 'A' , 'D' ], 'A' :[ '' , '' ], 'D' :[ 'C' , 'E' ], \\ 'C' :[ '' , '' ], 'E' :[ '' , '' ], 'G' :[ '' , 'I' ], 'I' :[ '' , 'H' ], \\ 'H' :[ '' , '' ]} \u00c9crire une fonction r\u00e9cursive taille prenant en param\u00e8tres un arbre binaire arbre sous la forme d\u2019un dictionnaire et un caract\u00e8re lettre qui est la valeur du sommet de l\u2019arbre, et qui renvoie la taille de l\u2019arbre \u00e0 savoir le nombre total de n\u0153uds. On observe que, par exemple, arbre[lettre][0] , respectivement arbre[lettre][1] , permet d\u2019atteindre la cl\u00e9 du sous-arbre gauche, respectivement droit, de l\u2019arbre arbre de sommet lettre . Exemple : >>> taille ( a , \u2019 F \u2019 ) 9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 a = { 'F' :[ 'B' , 'G' ], 'B' :[ 'A' , 'D' ], 'A' :[ '' , '' ], 'D' :[ 'C' , 'E' ], 'C' :[ '' , '' ], 'E' :[ '' , '' ], 'G' :[ '' , 'I' ], 'I' :[ '' , 'H' ], 'H' :[ '' , '' ]} def taille ( arbre , lettre ): fils_gauche = arbre [ lettre ][ 0 ] fils_droit = arbre [ lettre ][ 1 ] if fils_gauche != '' and fils_droit != '' : return 1 + taille ( arbre , fils_gauche ) + taille ( arbre , fils_droit ) if fils_gauche != '' and fils_droit == '' : return 1 + taille ( arbre , fils_gauche ) if fils_gauche == '' and fils_droit != '' : return 1 + taille ( arbre , fils_droit ) else : return 1 ou plus simplement : 1 2 3 4 def taille ( arbre , lettre ): if lettre == '' : return 0 return 1 + taille ( arbre , arbre [ lettre ][ 0 ]) + taille ( arbre , arbre [ lettre ][ 1 ])", "title": "Exercice 33.1"}, {"location": "term/ep.html#exercice-332", "text": "Exercice 33.2 \u00c9nonc\u00e9 Correction On consid\u00e8re l'algorithme de tri de tableau suivant : \u00e0 chaque \u00e9tape, on parcourt le sous- tableau des \u00e9l\u00e9ments non rang\u00e9s et on place le plus petit \u00e9l\u00e9ment en premi\u00e8re position de ce sous-tableau. Exemple avec le tableau : t = [41, 55, 21, 18, 12, 6, 25] \u00c9tape 1 : on parcourt tous les \u00e9l\u00e9ments du tableau, on permute le plus petit \u00e9l\u00e9ment avec le premier. Le tableau devient t = [6, 55, 21, 18, 12, 41, 25] \u00c9tape 2 : on parcourt tous les \u00e9l\u00e9ments sauf le premier, on permute le plus petit \u00e9l\u00e9ment trouv\u00e9 avec le second. Le tableau devient : t = [6, 12, 21, 18, 55, 41, 25] Et ainsi de suite. La code de la fonction tri_selection qui impl\u00e9mente cet algorithme est donn\u00e9 ci- dessous. 1 2 3 4 5 6 7 8 def tri_selection ( tab ): N = len ( tab ) for k in range ( ... ): imin = ... for i in range ( ... , N ): if tab [ i ] < ... : imin = i ... , tab [ imin ] = tab [ imin ] , ... Compl\u00e9ter le code de cette fonction de fa\u00e7on \u00e0 obtenir : >>> liste = [ 41 , 55 , 21 , 18 , 12 , 6 , 25 ] >>> tri_selection ( liste ) >>> liste [ 6 , 12 , 18 , 21 , 25 , 41 , 55 ] On rappelle que l'instruction a, b = b, a \u00e9change les contenus de a et de b . 1 2 3 4 5 6 7 8 def tri_selection ( tab ): N = len ( tab ) for k in range ( N ): imin = k for i in range ( k , N ): if tab [ i ] < tab [ imin ] : imin = i tab [ k ] , tab [ imin ] = tab [ imin ] , tab [ k ]", "title": "Exercice 33.2"}, {"location": "term/ep.html#sujet-34", "text": "", "title": "\u25b6 Sujet 34"}, {"location": "term/ep.html#exercice-341", "text": "Exercice 34.1 \u00c9nonc\u00e9 Correction Programmer la fonction moyenne prenant en param\u00e8tre un tableau d'entiers tab (de type list ) qui renvoie la moyenne de ses \u00e9l\u00e9ments si le tableau est non vide. Proposer une fa\u00e7on de traiter le cas o\u00f9 le tableau pass\u00e9 en param\u00e8tre est vide. Dans cet exercice, on s\u2019interdira d\u2019utiliser la fonction Python sum . Exemples : >>> moyenne ([ 5 , 3 , 8 ]) 5.333333333333333 >>> moyenne ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]) 5.5 >>> moyenne ([]) # Comportement diff\u00e9rent suivant le traitement propos\u00e9. 1 2 3 4 5 6 7 8 9 def moyenne ( tab ): if tab == []: print ( 'Le tableau donn\u00e9 est vide' ) return None else : somme = 0 for elt in tab : somme += elt return somme / len ( tab )", "title": "Exercice 34.1"}, {"location": "term/ep.html#exercice-342", "text": "Exercice 34.2 \u00c9nonc\u00e9 Correction On consid\u00e8re un tableau d'entiers tab (de type list ) dont les \u00e9l\u00e9ments sont des 0 ou des 1 ). On se propose de trier ce tableau selon l'algorithme suivant : \u00e0 chaque \u00e9tape du tri, le tableau est constitu\u00e9 de trois zones cons\u00e9cutives, la premi\u00e8re ne contenant que des 0 , la seconde n'\u00e9tant pas tri\u00e9e et la derni\u00e8re ne contenant que des 1 . Zone de 0 Zone non tri\u00e9e Zone de 1 Tant que la zone non tri\u00e9e n'est pas r\u00e9duite \u00e0 un seul \u00e9l\u00e9ment, on regarde son premier \u00e9l\u00e9ment : si cet \u00e9l\u00e9ment vaut 0, on consid\u00e8re qu'il appartient d\u00e9sormais \u00e0 la zone ne contenant que des 0 ; si cet \u00e9l\u00e9ment vaut 1, il est \u00e9chang\u00e9 avec le dernier \u00e9l\u00e9ment de la zone non tri\u00e9e et on consid\u00e8re alors qu\u2019il appartient \u00e0 la zone ne contenant que des 1. Dans tous les cas, la longueur de la zone non tri\u00e9e diminue de 1. Recopier sous Python en la compl\u00e9tant la fonction tri suivante : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def tri ( tab ): # i est le premier indice de la zone non tri\u00e9e, # j est le dernier indice de cette zone non tri\u00e9e. # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet. i = ... j = ... while i != j : if tab [ i ] == 0 : i = ... else : valeur = tab [ j ] tab [ j ] = ... ... j = ... ... Exemple : >>> tri ([ 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 ]) [ 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def tri ( tab ): # i est le premier indice de la zone non tri\u00e9e, # j est le dernier indice de cette zone non tri\u00e9e. # Au d\u00e9but, la zone non tri\u00e9e est le tableau complet. i = 0 j = len ( tab ) - 1 while i != j : if tab [ i ] == 0 : i = i + 1 else : valeur = tab [ j ] tab [ j ] = tab [ i ] tab [ i ] = valeur j = j - 1 return tab", "title": "Exercice 34.2"}, {"location": "term/ep.html#sujet-35", "text": "", "title": "\u25b6 Sujet 35"}, {"location": "term/ep.html#exercice-351", "text": "Exercice 35.1 \u00c9nonc\u00e9 Correction L'op\u00e9rateur \u00ab ou exclusif \u00bb entre deux bits renvoie 0 si les deux bits sont \u00e9gaux et 1 s'ils sont diff\u00e9rents. Il est symbolis\u00e9 par le caract\u00e8re \u2295. Ainsi : 0 \u2295 0 = 0 0 \u2295 1 = 1 1 \u2295 0 = 1 1 \u2295 1 = 0 On repr\u00e9sente ici une suite de bits par un tableau contenant des 0 et des 1. Exemples : a = [ 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 ] b = [ 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 ] c = [ 1 , 1 , 0 , 1 ] d = [ 0 , 0 , 1 , 1 ] \u00c9crire la fonction ou_exclusif qui prend en param\u00e8tres deux tableaux de m\u00eame longueur et qui renvoie un tableau o\u00f9 l\u2019\u00e9l\u00e9ment situ\u00e9 \u00e0 position i est le r\u00e9sultat, par l\u2019op\u00e9rateur \u00ab ou exclusif \u00bb, des \u00e9l\u00e9ments \u00e0 la position i des tableaux pass\u00e9s en param\u00e8tres. En consid\u00e9rant les quatre exemples ci-dessus, cette fonction donne : >>> ou_exclusif ( a , b ) [ 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 ] >>> ou_exclusif ( c , d ) [ 1 , 1 , 1 , 0 ] 1 2 3 4 5 6 def ou_exclusif ( tab1 , tab2 ): resultat = [] taille = len ( tab1 ) for i in range ( taille ): resultat . append ( tab1 [ i ] ^ tab2 [ i ]) return resultat Si on ne connait pas la fonction native ^ qui fait le \u00abou exclusif\u00bb de deux entiers en Python, on peut la recoder : 1 2 3 4 5 6 7 8 9 def ou_exc ( a , b ): if a == 0 and b == 0 : return 0 if a == 0 and b == 1 : return 1 if a == 1 and b == 0 : return 1 if a == 1 and b == 1 : return 0 Le code devient alors : 1 2 3 4 5 6 def ou_exclusif ( tab1 , tab2 ): resultat = [] taille = len ( tab1 ) for i in range ( taille ): resultat . append ( ou_exc ( tab1 [ i ], tab2 [ i ])) return resultat", "title": "Exercice 35.1"}, {"location": "term/ep.html#exercice-352", "text": "Exercice 35.2 \u00c9nonc\u00e9 Correction Dans cet exercice, on appelle carr\u00e9 d\u2019ordre \\(n\\) un tableau de \\(n\\) lignes et \\(n\\) colonnes dont chaque case contient un entier naturel. Exemples : Un carr\u00e9 est dit semimagique lorsque les sommes des \u00e9l\u00e9ments situ\u00e9s sur chaque ligne, chaque colonne sont \u00e9gales. Ainsi c2 et c3 sont semimagiques car la somme de chaque ligne, chaque colonne et chaque diagonale est \u00e9gale \u00e0 8 pour c2 et 12 pour c3. Le carre c3bis n'est pas semimagique car la somme de la premi\u00e8re ligne est \u00e9gale \u00e0 15 alors que celle de la deuxi\u00e8me ligne est \u00e9gale \u00e0 10. La classe Carre ci-apr\u00e8s contient des m\u00e9thodes qui permettent de manipuler des carr\u00e9s. La m\u00e9thode constructeur cr\u00e9e un carr\u00e9 sous forme d\u2019un tableau \u00e0 deux dimensions \u00e0 partir d\u2019une liste d\u2019entiers, et d\u2019un ordre. La m\u00e9thode affiche permet d\u2019afficher le carr\u00e9 cr\u00e9\u00e9. Exemple : >>> liste = ( 3 , 4 , 5 , 4 , 4 , 4 , 5 , 4 , 3 ) >>> c3 = Carre ( liste , 3 ) >>> c3 . affiche () [ 3 , 4 , 5 ] [ 4 , 4 , 4 ] [ 5 , 4 , 3 ] Compl\u00e9ter la m\u00e9thode est_semimagique qui renvoie True si le carr\u00e9 est semimagique, False sinon. Puis tester la fonction est_semimagique sur les carr\u00e9s c2, c3 et c3bis. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Carre : def __init__ ( self , liste , n ): self . ordre = n self . tableau = [[ liste [ i + j * n ] for i in range ( n )] for j in range ( n )] def affiche ( self ): '''Affiche un carr\u00e9''' for i in range ( self . ordre ): print ( self . tableau [ i ]) def somme_ligne ( self , i ): '''Calcule la somme des valeurs de la ligne i''' somme = 0 for j in range ( self . ordre ): somme = somme + self . tableau [ i ][ j ] return somme def somme_col ( self , j ): '''Calcule la somme des valeurs de la colonne j''' somme = 0 for i in range ( self . ordre ): somme = somme + self . tableau [ i ][ j ] return somme def est_semimagique ( self ): s = self . somme_ligne ( 0 ) #test de la somme de chaque ligne for i in range ( ... ): if ... != s : return ... #test de la somme de chaque colonne for j in range ( ... ): if ... != s : return ... return ... Listes permettant de g\u00e9n\u00e9rer les carr\u00e9s c2, c3 et c3bis : 1 2 3 lst_c2 = [ 1 , 7 , 7 , 1 ] lst_c3 = [ 3 , 4 , 5 , 4 , 4 , 4 , 5 , 4 , 3 ] lst_c3bis = [ 2 , 9 , 4 , 7 , 0 , 3 , 6 , 1 , 8 ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Carre : def __init__ ( self , liste , n ): self . ordre = n self . tableau = [[ liste [ i + j * n ] for i in range ( n )] for j in range ( n )] def affiche ( self ): '''Affiche un carr\u00e9''' for i in range ( self . ordre ): print ( self . tableau [ i ]) def somme_ligne ( self , i ): '''Calcule la somme des valeurs de la ligne i''' somme = 0 for j in range ( self . ordre ): somme = somme + self . tableau [ i ][ j ] return somme def somme_col ( self , j ): '''Calcule la somme des valeurs de la colonne j''' somme = 0 for i in range ( self . ordre ): somme = somme + self . tableau [ i ][ j ] return somme def est_semimagique ( self ): s = self . somme_ligne ( 0 ) #test de la somme de chaque ligne for i in range ( self . ordre ): if self . somme_ligne ( i ) != s : return False #test de la somme de chaque colonne for j in range ( self . ordre ): if self . somme_col ( j ) != s : return False return True Tests avec : 1 2 3 lst_c2 = [ 1 , 7 , 7 , 1 ] lst_c3 = [ 3 , 4 , 5 , 4 , 4 , 4 , 5 , 4 , 3 ] lst_c3bis = [ 2 , 9 , 4 , 7 , 0 , 3 , 6 , 1 , 8 ] >>> c2 = Carre ( lst_c2 , 2 ) >>> c2 . est_semimagique () True >>> c3 = Carre ( lst_c3 , 3 ) >>> c3 . est_semimagique () True >>> c3bis = Carre ( lst_c3bis , 2 ) >>> c3bis . est_semimagique () False", "title": "Exercice 35.2"}, {"location": "term/ep.html#sujet-36", "text": "", "title": "\u25b6 Sujet 36"}, {"location": "term/ep.html#exercice-361", "text": "Exercice 36.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction couples_consecutifs qui prend en param\u00e8tre une liste de nombres entiers tab non vide, et qui renvoie la liste (\u00e9ventuellement vide) des couples d'entiers cons\u00e9cutifs successifs qu'il peut y avoir dans tab . Exemples : >>> couples_consecutifs ([ 1 , 4 , 3 , 5 ]) [] >>> couples_consecutifs ([ 1 , 4 , 5 , 3 ]) [( 4 , 5 )] >>> couples_consecutifs ([ 1 , 1 , 2 , 4 ]) [( 1 , 2 )] >>> couples_consecutifs ([ 7 , 1 , 2 , 5 , 3 , 4 ]) [( 1 , 2 ), ( 3 , 4 )] >>> couples_consecutifs ([ 5 , 1 , 2 , 3 , 8 , - 5 , - 4 , 7 ]) [( 1 , 2 ), ( 2 , 3 ), ( - 5 , - 4 )] 1 2 3 4 5 6 def couples_consecutifs ( tab ): solution = [] for i in range ( len ( tab ) - 1 ): if tab [ i ] + 1 == tab [ i + 1 ]: solution . append (( tab [ i ], tab [ i + 1 ])) return solution", "title": "Exercice 36.1"}, {"location": "term/ep.html#exercice-362", "text": "Exercice 36.2 \u00c9nonc\u00e9 Correction Soit une image binaire repr\u00e9sent\u00e9e dans un tableau \u00e0 2 dimensions. Les \u00e9l\u00e9ments M[i][j] , appel\u00e9s pixels, sont \u00e9gaux soit \u00e0 0 soit \u00e0 1 . Une composante d\u2019une image est un sous-ensemble de l\u2019image constitu\u00e9 uniquement de 1 et de 0 qui sont c\u00f4te \u00e0 c\u00f4te, soit horizontalement soit verticalement. Par exemple, les composantes de sont On souhaite, \u00e0 partir d\u2019un pixel \u00e9gal \u00e0 1 dans une image M , donner la valeur val \u00e0 tous les pixels de la composante \u00e0 laquelle appartient ce pixel. La fonction propager prend pour param\u00e8tre une image M (repr\u00e9sent\u00e9e par une liste de listes), deux entiers i et j et unevaleur enti\u00e8re val . Elle met \u00e0 la valeur val tous les pixels de la composante du pixel M[i][j] s\u2019il vaut 1 et ne fait rien s\u2019il vaut 0 . Par exemple, propager(M, 2, 1, 3) donne Compl\u00e9ter le code r\u00e9cursif de la fonction propager donn\u00e9 ci-dessous : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def propager ( M , i , j , val ): if M [ i ][ j ] == ... : M [ i ][ j ] = val # l'element en haut fait partie de la composante if i - 1 >= 0 and M [ i - 1 ][ j ] == ... : propager ( M , i - 1 , j , val ) # l'element en bas fait partie de la composante if ... < len ( M ) and M [ i + 1 ][ j ] == 1 : propager ( M , ... , j , val ) # l'element \u00e0 gauche fait partie de la composante if ... and M [ i ][ j - 1 ] == 1 : propager ( M , ... , ... , val ) # l'element \u00e0 droite fait partie de la composante if ... and ... : propager ( ... , ... , ... , ... ) Exemple : >>> M = [[ 0 , 0 , 1 , 0 ], [ 0 , 1 , 0 , 1 ], [ 1 , 1 , 1 , 0 ], [ 0 , 1 , 1 , 0 ]] >>> propager ( M , 2 , 1 , 3 ) >>> M [[ 0 , 0 , 1 , 0 ], [ 0 , 3 , 0 , 1 ], [ 3 , 3 , 3 , 0 ], [ 0 , 3 , 3 , 0 ]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def propager ( M , i , j , val ): if M [ i ][ j ] == 1 : M [ i ][ j ] = val # l'element en haut fait partie de la composante if i - 1 >= 0 and M [ i - 1 ][ j ] == 1 : propager ( M , i - 1 , j , val ) # l'element en bas fait partie de la composante if i + 1 < len ( M ) and M [ i + 1 ][ j ] == 1 : propager ( M , i + 1 , j , val ) # l'element \u00e0 gauche fait partie de la composante if j - 1 >= 0 and M [ i ][ j - 1 ] == 1 : propager ( M , i , j - 1 , val ) # l'element \u00e0 droite fait partie de la composante if j + 1 < len ( M [ i ]) and M [ i ][ j + 1 ] == 1 : propager ( M , i , j + 1 , val )", "title": "Exercice 36.2"}, {"location": "term/ep.html#sujet-37", "text": "", "title": "\u25b6 Sujet 37"}, {"location": "term/ep.html#exercice-371", "text": "Exercice 37.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction recherche qui prend en param\u00e8tres elt un nombre entier et tab un tableau de nombres entiers, et qui renvoie l\u2019indice de la derni\u00e8re occurrence de elt dans tab si elt est dans tab et -1 sinon. Exemples : >>> recherche ( 1 , [ 2 , 3 , 4 ]) - 1 >>> recherche ( 1 , [ 10 , 12 , 1 , 56 ]) 2 >>> recherche ( 1 , [ 1 , 0 , 42 , 7 ]) 0 >>> recherche ( 1 , [ 1 , 50 , 1 ]) 2 >>> recherche ( 1 , [ 8 , 1 , 10 , 1 , 7 , 1 , 8 ]) 5 1 2 3 4 5 def recherche ( elt , tab ): for i in range ( len ( tab ) - 1 , - 1 , - 1 ): if tab [ i ] == elt : return i return - 1", "title": "Exercice 37.1"}, {"location": "term/ep.html#exercice-372", "text": "Exercice 37.2 \u00c9nonc\u00e9 Correction On d\u00e9finit une classe g\u00e9rant une adresse IPv4. On rappelle qu\u2019une adresse IPv4 est une adresse de longueur 4 octets, not\u00e9e en d\u00e9cimale \u00e0 point, en s\u00e9parant chacun des octets par un point. On consid\u00e8re un r\u00e9seau priv\u00e9 avec une plage d\u2019adresses IP de 192.168.0.0 \u00e0 192.168.0.255 . On consid\u00e8re que les adresses IP saisies sont valides. Les adresses IP 192.168.0.0 et 192.168.0.255 sont des adresses r\u00e9serv\u00e9es. Le code ci-dessous impl\u00e9mente la classe AdresseIP . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class AdresseIP : def __init__ ( self , adresse ): self . adresse = ... def liste_octet ( self ): \"\"\"renvoie une liste de nombres entiers, la liste des octets de l'adresse IP\"\"\" return [ int ( i ) for i in self . adresse . split ( \".\" )] def est_reservee ( self ): \"\"\"renvoie True si l'adresse IP est une adresse r\u00e9serv\u00e9e, False sinon\"\"\" return ... or ... def adresse_suivante ( self ): \"\"\"renvoie un objet de AdresseIP avec l'adresse IP qui suit l\u2019adresse self si elle existe et False sinon\"\"\" if ... < 254 : octet_nouveau = ... + ... return AdresseIP ( '192.168.0.' + ... ) else : return False Compl\u00e9ter le code ci-dessus et instancier trois objets : adresse1 , adresse2 , adresse3 avec respectivement les arguments suivants : '192.168.0.1' , '192.168.0.2' , '192.168.0.0' V\u00e9rifier que : >>> adresse1 . est_reservee () False >>> adresse3 . est_reservee () True >>> adresse2 . adresse_suivante () . adresse '192.168.0.3' 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class AdresseIP : def __init__ ( self , adresse ): self . adresse = adresse def liste_octet ( self ): \"\"\"renvoie une liste de nombres entiers, la liste des octets de l'adresse IP\"\"\" return [ int ( i ) for i in self . adresse . split ( \".\" )] def est_reservee ( self ): \"\"\"renvoie True si l'adresse IP est une adresse r\u00e9serv\u00e9e, False sinon\"\"\" return self . liste_octet ()[ 3 ] == 0 or self . liste_octet ()[ 3 ] == 255 def adresse_suivante ( self ): \"\"\"renvoie un objet de AdresseIP avec l'adresse IP qui suit l\u2019adresse self si elle existe et False sinon\"\"\" if self . liste_octet ()[ 3 ] < 254 : octet_nouveau = self . liste_octet ()[ 3 ] + 1 return AdresseIP ( '192.168.0.' + str ( octet_nouveau )) else : return False adresse1 = AdresseIP ( '192.168.0.1' ) adresse2 = AdresseIP ( '192.168.0.2' ) adresse3 = AdresseIP ( '192.168.0.0' )", "title": "Exercice 37.2"}, {"location": "term/ep.html#sujet-38", "text": "", "title": "\u25b6 Sujet 38"}, {"location": "term/ep.html#exercice-381", "text": "Exercice 38.1 \u00c9nonc\u00e9 Correction On consid\u00e8re des mots \u00e0 trous : ce sont des cha\u00eenes de caract\u00e8res contenant uniquement des majuscules et des caract\u00e8res * . Par exemple INFO*MA*IQUE , ***I***E** et *S* sont des mots \u00e0 trous. Programmer une fonction correspond qui : prend en param\u00e8tres deux cha\u00eenes de caract\u00e8res mot et mot_a_trous o\u00f9 mot_a_trous est un mot \u00e0 trous comme indiqu\u00e9 ci-dessus, renvoie : True si on peut obtenir mot en rempla\u00e7ant convenablement les caract\u00e8res '*' de mot_a_trous . False sinon. Exemple : >>> correspond ( 'INFORMATIQUE' , 'INFO*MA*IQUE' ) True >>> correspond ( 'AUTOMATIQUE' , 'INFO*MA*IQUE' ) False >>> correspond ( 'STOP' , 'S*' ) False >>> correspond ( 'AUTO' , '*UT*' ) True 1 2 3 4 5 6 7 def correspond ( mot , mot_a_trous ): if len ( mot ) != len ( mot_a_trous ): return False for i in range ( len ( mot )): if mot [ i ] != mot_a_trous [ i ] and mot_a_trous [ i ] != '*' : return False return True", "title": "Exercice 38.1"}, {"location": "term/ep.html#exercice-382", "text": "Exercice 38.2 \u00c9nonc\u00e9 Correction On consid\u00e8re au plus 26 personnes A, B, C, D, E, F ... qui peuvent s'envoyer des messages avec deux r\u00e8gles \u00e0 respecter : chaque personne ne peut envoyer des messages qu'\u00e0 une seule personne (\u00e9ventuellement elle-m\u00eame), chaque personne ne peut recevoir des messages qu'en provenance d'une seule personne (\u00e9ventuellement elle-m\u00eame). Voici un exemple - avec 6 personnes - de \u00ab plan d'envoi des messages \u00bb qui respecte les r\u00e8gles ci-dessus, puisque chaque personne est pr\u00e9sente une seule fois dans chaque colonne : A envoie ses messages \u00e0 E E envoie ses messages \u00e0 B B envoie ses messages \u00e0 F F envoie ses messages \u00e0 A C envoie ses messages \u00e0 D D envoie ses messages \u00e0 C Et le dictionnaire correspondant \u00e0 ce plan d'envoi est le suivant : plan_a = {'A':'E', 'B':'F', 'C':'D', 'D':'C', 'E':'B', 'F':'A'} Un cycle est une suite de personnes dans laquelle la derni\u00e8re est la m\u00eame que la premi\u00e8re. Sur le plan d'envoi plan_a des messages ci-dessus, il y a deux cycles distincts : un premier cycle avec A, E, B, F et un second cycle avec C et D. En revanche, le plan d\u2019envoi plan_b ci-dessous : plan_b = {'A':'C', 'B':'F', 'C':'E', 'D':'A', 'E':'B', 'F':'D'} comporte un unique cycle : A, C, E, B, F, D. Dans ce cas, lorsqu\u2019un plan d\u2019envoi comporte un unique cycle , on dit que le plan d\u2019envoi est cyclique . Pour savoir si un plan d'envoi de messages comportant N personnes est cyclique, on peut utiliser l'algorithme ci-dessous : on part d\u2019un exp\u00e9diteur (ici A) et on inspecte son destinataire dans le plan d'envoi, chaque destinataire devient \u00e0 son tour exp\u00e9diteur, selon le plan d\u2019envoi, tant qu\u2019on ne \u00ab retombe \u00bb pas sur l\u2019exp\u00e9diteur initial, le plan d\u2019envoi est cyclique si on l\u2019a parcouru en entier. Compl\u00e9ter la fonction est_cyclique en respectant la sp\u00e9cification. Remarque : la fonction python len permet d'obtenir la longueur d'un dictionnaire. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def est_cyclique ( plan ): ''' Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F). Renvoie True si le plan d'envoi de messages est cyclique et False sinon. ''' expediteur = 'A' destinataire = plan [ ... ] nb_destinaires = 1 while destinataire != ... : destinataire = plan [ ... ] nb_destinaires += ... return nb_destinaires == ... Exemples : >>> est_cyclique ({ 'A' : 'E' , 'F' : 'A' , 'C' : 'D' , 'E' : 'B' , 'B' : 'F' , 'D' : 'C' }) False >>> est_cyclique ({ 'A' : 'E' , 'F' : 'C' , 'C' : 'D' , 'E' : 'B' , 'B' : 'F' , 'D' : 'A' }) True >>> est_cyclique ({ 'A' : 'B' , 'F' : 'C' , 'C' : 'D' , 'E' : 'A' , 'B' : 'F' , 'D' : 'E' }) True >>> est_cyclique ({ 'A' : 'B' , 'F' : 'A' , 'C' : 'D' , 'E' : 'C' , 'B' : 'F' , 'D' : 'E' }) False 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def est_cyclique ( plan ): ''' Prend en param\u00e8tre un dictionnaire `plan` correspondant \u00e0 un plan d'envoi de messages (ici entre les personnes A, B, C, D, E, F). Renvoie True si le plan d'envoi de messages est cyclique et False sinon. ''' expediteur = 'A' destinataire = plan [ expediteur ] nb_destinaires = 1 while destinataire != expediteur : destinataire = plan [ destinataire ] nb_destinaires += 1 return nb_destinaires == len ( plan ) #tests print ( est_cyclique ({ 'A' : 'E' , 'F' : 'A' , 'C' : 'D' , 'E' : 'B' , 'B' : 'F' , 'D' : 'C' })) print ( est_cyclique ({ 'A' : 'E' , 'F' : 'C' , 'C' : 'D' , 'E' : 'B' , 'B' : 'F' , 'D' : 'A' })) print ( est_cyclique ({ 'A' : 'B' , 'F' : 'C' , 'C' : 'D' , 'E' : 'A' , 'B' : 'F' , 'D' : 'E' })) print ( est_cyclique ({ 'A' : 'B' , 'F' : 'A' , 'C' : 'D' , 'E' : 'C' , 'B' : 'F' , 'D' : 'E' }))", "title": "Exercice 38.2"}, {"location": "term/ep.html#sujet-39", "text": "", "title": "\u25b6 Sujet 39"}, {"location": "term/ep.html#exercice-391", "text": "Exercice 39.1 \u00c9nonc\u00e9 Correction On s\u2019int\u00e9resse \u00e0 la suite d\u2019entiers d\u00e9finie par : les deux premiers termes sont \u00e9gaux \u00e0 1, ensuite, chaque terme est obtenu en faisant la somme des deux termes qui le pr\u00e9c\u00e8dent. En math\u00e9matiques, on le formule ainsi : \\(U_1 = 1\\) , \\(U_2 = 1\\) et, pour tout entier naturel non nul \\(n\\) , par \\(U_{n+2} = U_{n+1} + U_n\\) . Cette suite est connue sous le nom de suite de Fibonacci. \u00c9crire en Python une fonction fibonacci qui prend en param\u00e8tre un entier n suppos\u00e9 strictement positif et qui renvoie le terme d\u2019indice n de cette suite. Exemples : >>> fibonacci ( 1 ) 1 >>> fibonacci ( 2 ) 1 >>> fibonacci ( 25 ) 75025 >>> fibonacci ( 45 ) 1134903170 Version r\u00e9cursive : 1 2 3 4 5 6 7 def fibonacci ( n ): if n == 1 : return 1 elif n == 1 : return 1 else : return fibonacci ( n - 1 ) + fibonacci ( n - 2 ) Version imp\u00e9rative : 1 2 3 4 5 6 7 8 def fibonacci ( n ): a = 1 b = 1 for k in range ( n - 2 ): t = b b = a + b a = t return b Version programmation dynamique : 1 2 3 4 5 6 7 def fibonacci ( n ): d = {} d [ 1 ] = 1 d [ 2 ] = 1 for k in range ( 3 , n + 1 ): d [ k ] = d [ k - 1 ] + d [ k - 2 ] return d [ n ] On peut constater que la version r\u00e9cursive \u00e9choue \u00e0 calculer fibonacci(45) , alors que les deux autres versions le font quasi-imm\u00e9diatement.", "title": "Exercice 39.1"}, {"location": "term/ep.html#exercice-392", "text": "Exercice 39.2 \u00c9nonc\u00e9 Correction On consid\u00e8re la fonction pantheon prenant en param\u00e8tres eleves et notes deux tableaux de m\u00eame longueur, le premier contenant le nom des \u00e9l\u00e8ves et le second, des entiers positifs d\u00e9signant leur note \u00e0 un contr\u00f4le de sorte que eleves[i] a obtenu la note notes[i] . Cette fonction renvoie le couple constitu\u00e9 de la note maximale attribu\u00e9e et des noms des \u00e9l\u00e8ves ayant obtenu cette note regroup\u00e9s dans un tableau. Ainsi, l\u2019instruction pantheon(['a', 'b', 'c', 'd'], [15, 18, 12, 18]) renvoie le couple (18, ['b', 'd']) . 1 2 3 4 5 6 7 8 9 10 11 12 def pantheon ( eleves , notes ): note_maxi = 0 meilleurs_eleves = ... for i in range ( ... ) : if notes [ i ] == ... : meilleurs_eleves . append ( ... ) elif notes [ i ] > note_maxi : note_maxi = ... meilleurs_eleves = [ ... ] return ( note_maxi , meilleurs_eleves ) Compl\u00e9ter ce code. Exemples : >>> eleves_nsi = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' ] >>> notes_nsi = [ 30 , 40 , 80 , 60 , 58 , 80 , 75 , 80 , 60 , 24 ] >>> pantheon ( eleves_nsi , notes_nsi ) ( 80 , [ 'c' , 'f' , 'h' ]) >>> pantheon ([],[]) ( 0 , []) 1 2 3 4 5 6 7 8 9 10 11 12 def pantheon ( eleves , notes ): note_maxi = 0 meilleurs_eleves = [] for i in range ( len ( eleves )) : if notes [ i ] == note_maxi : meilleurs_eleves . append ( eleves [ i ]) elif notes [ i ] > note_maxi : note_maxi = notes [ i ] meilleurs_eleves = [ eleves [ i ]] return ( note_maxi , meilleurs_eleves )", "title": "Exercice 39.2"}, {"location": "term/ep.html#sujet-40", "text": "", "title": "\u25b6 Sujet 40"}, {"location": "term/ep.html#exercice-401", "text": "Exercice 40.1 \u00c9nonc\u00e9 Correction Pour cet exercice : On appelle \u00ab mot \u00bb une cha\u00eene de caract\u00e8res compos\u00e9e avec des caract\u00e8res choisis parmi les 26 lettres minuscules ou majuscules de l'alphabet, On appelle \u00ab phrase \u00bb une cha\u00eene de caract\u00e8res : compos\u00e9e avec un ou plusieurs \u00ab mots \u00bb s\u00e9par\u00e9s entre eux par un seul caract\u00e8re espace ' ' , se finissant : soit par un point '.' qui est alors coll\u00e9 au dernier mot, soit par un point d'exclamation '!' ou d'interrogation '?' qui est alors s\u00e9par\u00e9 du dernier mot par un seul caract\u00e8re espace ' ' . Exemples : 'Cet exercice est simple.' 'Le point d exclamation est separe !' Apr\u00e8s avoir remarqu\u00e9 le lien entre le nombre de mots et le nombres de caract\u00e8res espace dans une phrase, programmer une fonction nombre_de_mots qui prend en param\u00e8tre une phrase et renvoie le nombre de mots pr\u00e9sents dans cette phrase. >>> nombre_de_mots ( 'Le point d exclamation est separe !' ) 6 >>> nombre_de_mots ( 'Il y a un seul espace entre les mots !' ) 9 >>> nombre_de_mots ( 'Combien de mots y a t il dans cette phrase ?' ) 10 >>> nombre_de_mots ( 'Fin.' ) 1 1 2 3 4 5 6 def nombre_de_mots ( phrase ): nb_mots = 0 for caractere in phrase : if caractere == ' ' or caractere == '.' : nb_mots += 1 return nb_mots", "title": "Exercice 40.1"}, {"location": "term/ep.html#exercice-402", "text": "Exercice 40.2 \u00c9nonc\u00e9 Correction La classe ABR ci-dessous permet d'impl\u00e9menter une structure d'arbre binaire de recherche. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class Noeud : def __init__ ( self , valeur ): '''M\u00e9thode constructeur pour la classe Noeud. Param\u00e8tre d'entr\u00e9e : valeur (str)''' self . valeur = valeur self . gauche = None self . droit = None def getValeur ( self ): '''M\u00e9thode accesseur pour obtenir la valeur du noeud Aucun param\u00e8tre en entr\u00e9e''' return self . valeur def droitExiste ( self ): '''M\u00e9thode renvoyant True si l'enfant droit existe Aucun param\u00e8tre en entr\u00e9e''' return ( self . droit is not None ) def gaucheExiste ( self ): '''M\u00e9thode renvoyant True si l'enfant gauche existe Aucun param\u00e8tre en entr\u00e9e''' return ( self . gauche is not None ) def inserer ( self , cle ): '''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche Param\u00e8tre d'entr\u00e9e : cle (int)''' if cle < ... : # on ins\u00e8re \u00e0 gauche if self . gaucheExiste (): # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9 ... else : # on cr\u00e9e un fils gauche self . gauche = ... elif cle > ... : # on ins\u00e8re \u00e0 droite if ... : # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9 ... else : # on cr\u00e9e un fils droit ... = Noeud ( cle ) Compl\u00e9ter la fonction r\u00e9cursive inserer afin qu'elle permette d\u2019ins\u00e9rer un n\u0153ud dans l\u2019arbre binaire de recherche propos\u00e9, \u00e0 l\u2019aide de sa cl\u00e9. Voici un exemple d'utilisation : >>> arbre = Noeud ( 7 ) >>> for cle in ( 3 , 9 , 1 , 6 ): arbre . inserer ( cle ) >>> arbre . gauche . getValeur () 3 >>> arbre . droit . getValeur () 9 >>> arbre . gauche . gauche . getValeur () 1 >>> arbre . gauche . droit . getValeur () 6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class Noeud : def __init__ ( self , valeur ): '''M\u00e9thode constructeur pour la classe Noeud. Param\u00e8tre d'entr\u00e9e : valeur (str)''' self . valeur = valeur self . gauche = None self . droit = None def getValeur ( self ): '''M\u00e9thode accesseur pour obtenir la valeur du noeud Aucun param\u00e8tre en entr\u00e9e''' return self . valeur def droitExiste ( self ): '''M\u00e9thode renvoyant True si l'enfant droit existe Aucun param\u00e8tre en entr\u00e9e''' return ( self . droit is not None ) def gaucheExiste ( self ): '''M\u00e9thode renvoyant True si l'enfant gauche existe Aucun param\u00e8tre en entr\u00e9e''' return ( self . gauche is not None ) def inserer ( self , cle ): '''M\u00e9thode d'insertion de cl\u00e9 dans un arbre binaire de recherche Param\u00e8tre d'entr\u00e9e : cle (int)''' if cle < self . valeur : # on ins\u00e8re \u00e0 gauche if self . gaucheExiste (): # on descend \u00e0 gauche et on retente l'insertion de la cl\u00e9 self . gauche . inserer ( cle ) else : # on cr\u00e9e un fils gauche self . gauche = Noeud ( cle ) elif cle > self . valeur : # on ins\u00e8re \u00e0 droite if self . droitExiste (): # on descend \u00e0 droite et on retente l'insertion de la cl\u00e9 self . droit . inserer ( cle ) else : # on cr\u00e9e un fils droit self . droit = Noeud ( cle )", "title": "Exercice 40.2"}, {"location": "term/ep.html#sujet-41", "text": "", "title": "\u25b6 Sujet 41"}, {"location": "term/ep.html#exercice-411", "text": "Exercice 41.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction recherche(caractere, chaine) qui prend en param\u00e8tres caractere , un unique caract\u00e8re (c\u2019est-\u00e0-dire une cha\u00eene de caract\u00e8re de longueur 1), et chaine , une cha\u00eene de caract\u00e8res. Cette fonction renvoie le nombre d\u2019occurrences de caractere dans chaine , c\u2019est-\u00e0-dire le nombre de fois o\u00f9 caractere appara\u00eet dans chaine. Exemples : >>> recherche ( 'e' , \"sciences\" ) 2 >>> recherche ( 'i' , \"mississippi\" ) 4 >>> recherche ( 'a' , \"mississippi\" ) 0 1 2 3 4 5 6 def recherche ( caractere , chaine ): somme = 0 for lettre in chaine : if lettre == caractere : somme += 1 return somme", "title": "Exercice 41.1"}, {"location": "term/ep.html#exercice-412", "text": "Exercice 41.2 \u00c9nonc\u00e9 Correction On s\u2019int\u00e9resse \u00e0 un algorithme r\u00e9cursif qui permet de rendre la monnaie \u00e0 partir d\u2019une liste donn\u00e9e de valeurs de pi\u00e8ces et de billets. Le syst\u00e8me mon\u00e9taire est donn\u00e9 sous forme d\u2019une liste valeurs = [100, 50, 20, 10, 5, 2, 1] . On suppose que les pi\u00e8ces et billets sont disponibles sans limitation. On cherche \u00e0 donner la liste des valeurs \u00e0 rendre pour une somme donn\u00e9e en argument. L\u2019algorithme utilis\u00e9 est de type glouton. Compl\u00e9ter le code Python ci-dessous de la fonction rendu_glouton qui impl\u00e9mente cet algorithme et renvoie la liste des pi\u00e8ces \u00e0 rendre. 1 2 3 4 5 6 7 8 9 10 valeurs = [ 100 , 50 , 20 , 10 , 5 , 2 , 1 ] def rendu_glouton ( a_rendre , rang ): if a_rendre == 0 : return ... v = valeurs [ rang ] if v <= ... : return ... + rendu_glouton ( a_rendre - v , rang ) else : return rendu_glouton ( a_rendre , ... ) On devra obtenir : >>> rendu_glouton ( 67 , 0 ) [ 50 , 10 , 5 , 2 ] >>> rendu_glouton ( 291 , 0 ) [ 100 , 100 , 50 , 20 , 20 , 1 ] >>> rendu_glouton ( 291 , 1 ) # si on ne dispose pas de billets de 100 [ 50 , 50 , 50 , 50 , 50 , 20 , 20 , 1 ] 1 2 3 4 5 6 7 8 9 10 valeurs = [ 100 , 50 , 20 , 10 , 5 , 2 , 1 ] def rendu_glouton ( a_rendre , rang ): if a_rendre == 0 : return [] v = valeurs [ rang ] if v <= a_rendre : return [ v ] + rendu_glouton ( a_rendre - v , rang ) else : return rendu_glouton ( a_rendre , rang + 1 )", "title": "Exercice 41.2"}, {"location": "term/ep.html#sujet-42", "text": "", "title": "\u25b6 Sujet 42"}, {"location": "term/ep.html#exercice-421", "text": "Exercice 42.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction tri_selection qui prend en param\u00e8tre une liste tab de nombres entiers et qui renvoie la liste tri\u00e9e par ordre croissant. Il est demand\u00e9 de ne pas cr\u00e9er de nouvelle liste mais de modifier celle fournie. On utilisera l\u2019algorithme suivant : on recherche le plus petit \u00e9l\u00e9ment de la liste, en la parcourant du rang 0 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 0 ; on recherche ensuite le plus petit \u00e9l\u00e9ment de la liste restreinte du rang 1 au dernier rang, et on l'\u00e9change avec l'\u00e9l\u00e9ment d'indice 1 ; on continue de cette fa\u00e7on jusqu'\u00e0 ce que la liste soit enti\u00e8rement tri\u00e9e. Exemple : >>> tri_selection ([ 1 , 52 , 6 , - 9 , 12 ]) [ - 9 , 1 , 6 , 12 , 52 ] 1 2 3 4 5 6 7 8 def tri_selection ( tab ): for i in range ( len ( tab ) - 1 ): indice_min = i for j in range ( i + 1 , len ( tab )): if tab [ j ] < tab [ indice_min ]: indice_min = j tab [ i ], tab [ indice_min ] = tab [ indice_min ], tab [ i ] return tab", "title": "Exercice 42.1"}, {"location": "term/ep.html#exercice-422", "text": "Exercice 42.2 \u00c9nonc\u00e9 Correction Le jeu du \u00ab plus ou moins \u00bb consiste \u00e0 deviner un nombre entier choisi entre 1 et 99. Un \u00e9l\u00e8ve de NSI d\u00e9cide de le coder en langage Python de la mani\u00e8re suivante : le programme g\u00e9n\u00e8re un nombre entier al\u00e9atoire compris entre 1 et 99 ; si la proposition de l\u2019utilisateur est plus petite que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ; si la proposition de l\u2019utilisateur est plus grande que le nombre cherch\u00e9, l\u2019utilisateur en est averti. Il peut alors en tester un autre ; si l\u2019utilisateur trouve le bon nombre en 10 essais ou moins, il gagne ; si l\u2019utilisateur a fait plus de 10 essais sans trouver le bon nombre, il perd. La fonction randint est utilis\u00e9e. Si a et b sont des entiers tels que a <= b , randint(a,b) renvoie un nombre entier compris entre a et b . Compl\u00e9ter le code ci-dessous et le tester : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from random import randint def plus_ou_moins (): nb_mystere = randint ( 1 , ... ) nb_test = int ( input ( \"Proposez un nombre entre 1 et 99 : \" )) compteur = ... while nb_mystere != ... and compteur < ... : compteur = compteur + ... if nb_mystere ... nb_test : nb_test = int ( input ( \"Trop petit ! Testez encore : \" )) else : nb_test = int ( input ( \"Trop grand ! Testez encore : \" )) if nb_mystere == nb_test : print ( \"Bravo ! Le nombre \u00e9tait \" , ... ) print ( \"Nombre d'essais: \" , ... ) else : print ( \"Perdu ! Le nombre \u00e9tait \" , ... ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from random import randint def plus_ou_moins (): nb_mystere = randint ( 1 , 99 ) nb_test = int ( input ( 'Proposez un nombre entre 1 et 99 : ' )) compteur = 1 while nb_mystere != nb_test and compteur < 10 : compteur = compteur + 1 if nb_mystere > nb_test : nb_test = int ( input ( 'Trop petit ! Testez encore : ' )) else : nb_test = int ( input ( 'Trop grand ! Testez encore : ' )) if nb_mystere == nb_test : print ( 'Bravo ! Le nombre \u00e9tait ' , nb_mystere ) print ( 'Nombre d essais: ' , compteur ) else : print ( 'Perdu ! Le nombre \u00e9tait ' , nb_mystere )", "title": "Exercice 42.2"}, {"location": "term/ep.html#sujet-43", "text": "", "title": "\u25b6 Sujet 43"}, {"location": "term/ep.html#exercice-431", "text": "Exercice 43.1 \u00c9nonc\u00e9 Correction \u00c9crire une fonction ecriture_binaire_entier_positif qui prend en param\u00e8tre un entier positif n et renvoie une liste d'entiers correspondant \u00e0 l\u2018\u00e9criture binaire de n . Ne pas oublier d\u2019ajouter au corps de la fonction une documentation et une ou plusieurs assertions pour v\u00e9rifier les pr\u00e9-conditions. Exemples : >>> ecriture_binaire_entier_positif ( 0 ) [ 0 ] >>> ecriture_binaire_entier_positif ( 2 ) [ 1 , 0 ] >>> ecriture_binaire_entier_positif ( 105 ) [ 1 , 1 , 0 , 1 , 0 , 0 , 1 ] Aide : l'op\u00e9rateur // donne le quotient de la division euclidienne : 5//2 donne 2 ; l'op\u00e9rateur % donne le reste de la division euclidienne : 5%2 donne 1 ; append est une m\u00e9thode qui ajoute un \u00e9l\u00e9ment \u00e0 une liste existante : Soit T=[5,2,4] , alors T.append(10) ajoute 10 \u00e0 la liste T . Ainsi, T devient [5,2,4,10] . reverse est une m\u00e9thode qui renverse les \u00e9l\u00e9ments d'une liste. Soit T=[5,2,4,10] . Apr\u00e8s T.reverse() , la liste devient [10,4,2,5] . On remarquera qu\u2019on r\u00e9cup\u00e8re la repr\u00e9sentation binaire d\u2019un entier n en partant de la gauche en appliquant successivement les instructions : b = n%2 n = n//2 r\u00e9p\u00e9t\u00e9es autant que n\u00e9cessaire. 1 2 3 4 5 6 7 8 9 10 11 def ecriture_binaire_entier_positif ( n ): # cas particulier pour n = 0 if n == 0 : return [ 0 ] # cas g\u00e9n\u00e9ral b = [] while n != 0 : b . append ( n % 2 ) n = n // 2 b . reverse () return b", "title": "Exercice 43.1"}, {"location": "term/ep.html#exercice-432", "text": "Exercice 43.2 \u00c9nonc\u00e9 Correction La fonction tri_bulles prend en param\u00e8tre une liste T d\u2019entiers non tri\u00e9s et renvoie la liste tri\u00e9e par ordre croissant. Le tri \u00e0 bulles est un tri en place qui commence par placer le plus grand \u00e9l\u00e9ment en derni\u00e8re position en parcourant la liste de gauche \u00e0 droite et en \u00e9changeant au passage les \u00e9l\u00e9ments voisins mal ordonn\u00e9s (si la valeur de l\u2019\u00e9l\u00e9ment d\u2019indice i a une valeur strictement sup\u00e9rieure \u00e0 celle de l\u2019indice i + 1 , ils sont \u00e9chang\u00e9s). Le tri place ensuite en avant-derni\u00e8re position le plus grand \u00e9l\u00e9ment de la liste priv\u00e9e de son dernier \u00e9l\u00e9ment en proc\u00e9dant encore \u00e0 des \u00e9changes d\u2019\u00e9l\u00e9ments voisins. Ce principe est r\u00e9p\u00e9t\u00e9 jusqu\u2019\u00e0 placer le minimum en premi\u00e8re position. Exemple : pour trier la liste [7, 9, 4, 3] : premi\u00e8re \u00e9tape : 7 et 9 ne sont pas \u00e9chang\u00e9s, puis 9 et 4 sont \u00e9chang\u00e9s, puis 9 et 3 sont \u00e9chang\u00e9s, la liste est alors [7, 4, 3, 9] deuxi\u00e8me \u00e9tape : 7 et 4 sont \u00e9chang\u00e9s, puis 7 et 3 sont \u00e9chang\u00e9s, la liste est alors [4, 3, 7, 9] troisi\u00e8me \u00e9tape : 4 et 3 sont \u00e9chang\u00e9s, la liste est alors [3, 4, 7, 9] Compl\u00e9ter le code Python ci-dessous qui impl\u00e9mente la fonction tri_bulles. 1 2 3 4 5 6 7 8 9 10 11 12 def tri_bulles ( T ): ''' Renvoie le tableau T tri\u00e9 par ordre croissant ''' n = len ( T ) for i in range ( ... , ... , - 1 ): for j in range ( i ): if T [ j ] > T [ ... ]: ... = T [ j ] T [ j ] = T [ ... ] T [ j + 1 ] = temp return T Exemples : >>> tri_bulles ([]) [] >>> tri_bulles ([ 7 ]) [ 7 ] >>> tri_bulles ([ 9 , 3 , 7 , 2 , 3 , 1 , 6 ]) [ 1 , 2 , 3 , 3 , 6 , 7 , 9 ] >>> tri_bulles ([ 9 , 7 , 4 , 3 ]) [ 3 , 4 , 7 , 9 ] 1 2 3 4 5 6 7 8 9 10 11 12 def tri_bulles ( T ): ''' Renvoie le tableau T tri\u00e9 par ordre croissant ''' n = len ( T ) for i in range ( n - 1 , - 1 , - 1 ): for j in range ( i ): if T [ j ] > T [ j + 1 ]: temp = T [ j ] T [ j ] = T [ j + 1 ] T [ j + 1 ] = temp return T", "title": "Exercice 43.2"}, {"location": "term/ep.html#sujet-44", "text": "", "title": "\u25b6 Sujet 44"}, {"location": "term/ep.html#exercice-441", "text": "Exercice 44.1 \u00c9nonc\u00e9 Correction Programmer une fonction renverse , prenant en param\u00e8tre une cha\u00eene de caract\u00e8res non vide mot et renvoie une cha\u00eene de caract\u00e8res en inversant ceux de la cha\u00eene mot . Exemple : >>> renverse ( \"informatique\" ) \"euqitamrofni\" 1 2 3 4 5 def renverse ( mot ): sol = '' for lettre in mot : sol = lettre + sol return sol", "title": "Exercice 44.1"}, {"location": "term/ep.html#exercice-442", "text": "Exercice 44.2 \u00c9nonc\u00e9 Correction Un nombre premier est un nombre entier naturel qui admet exactement deux diviseurs distincts entiers et positifs : 1 et lui-m\u00eame. Le crible d\u2019\u00c9ratosth\u00e8ne permet de d\u00e9terminer les nombres premiers plus petit qu\u2019un certain nombre n fix\u00e9. On consid\u00e8re pour cela un tableau tab de n bool\u00e9ens, initialement tous \u00e9gaux \u00e0 True , sauf tab[0] et tab[1] qui valent False , 0 et 1 n\u2019\u00e9tant pas des nombres premiers. On parcourt alors ce tableau de gauche \u00e0 droite. Pour chaque indice i : si tab[i] vaut True : le nombre i est premier et on donne la valeur False \u00e0 toutes les cases du tableau dont l\u2019indice est un multiple de i , \u00e0 partir de 2*i (c\u2019est-\u00e0-dire 2*i , 3*i ...). si tab[i] vaut False : le nombre i n\u2019est pas premier et on n\u2019effectue aucun changement sur le tableau. On dispose de la fonction crible , incompl\u00e8te et donn\u00e9e ci-dessous, prenant en param\u00e8tre un entier n strictement positif et renvoyant un tableau contenant tous les nombres premiers plus petits que n . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def crible ( n ): \"\"\" Renvoie un tableau contenant tous les nombres premiers plus petits que N \"\"\" premiers = [] tab = [ True ] * n tab [ 0 ], tab [ 1 ] = False , False for i in range ( ... , n ): if tab [ i ] == ... : premiers . append ( ... ) for multiple in range ( 2 * i , n , ... ): tab [ multiple ] = ... return premiers assert crible ( 40 ) == [ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 ] Compl\u00e9ter le code de cette fonction. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def crible ( n ): \"\"\" Renvoie un tableau contenant tous les nombres premiers plus petits que N \"\"\" premiers = [] tab = [ True ] * n tab [ 0 ], tab [ 1 ] = False , False for i in range ( 2 , n ): if tab [ i ] == True : premiers . append ( i ) for multiple in range ( 2 * i , n , i ): tab [ multiple ] = False return premiers assert crible ( 40 ) == [ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 ]", "title": "Exercice 44.2"}, {"location": "term/ep.html#sujet-45", "text": "", "title": "\u25b6 Sujet 45"}, {"location": "term/ep.html#exercice-451", "text": "Exercice 45.1 \u00c9nonc\u00e9 Correction On veut trier par ordre croissant les notes d\u2019une \u00e9valuation qui sont des nombres entiers compris entre 0 et 10 (inclus). Ces notes sont contenues dans une liste notes_eval . \u00c9crire une fonction rangement_valeurs prenant en param\u00e8tre la liste notes_eval et renvoyant une liste de longueur 11 telle que la valeur de cette liste \u00e0 chaque rang est \u00e9gale au nombre de notes valant ce rang. Ainsi le terme de rang 0 indique le nombre de note 0, le terme de rang 1 le nombre de note 1, etc. \u00c9crire ensuite une fonction notes_triees prenant en param\u00e8tre la liste des effectifs des notes et renvoyant une liste contenant la liste, tri\u00e9e dans l\u2019ordre croissant, des notes des \u00e9l\u00e8ves. Exemple : >>> notes_eval = [ 2 , 0 , 5 , 9 , 6 , 9 , 10 , 5 , 7 , 9 , 9 , 5 , 0 , 9 , 6 , 5 , 4 ] >>> effectifs_notes = rangement_valeurs ( notes_eval ) >>> effectifs_notes [ 2 , 0 , 1 , 0 , 1 , 4 , 2 , 1 , 0 , 5 , 1 ] >>> notes_triees ( effectifs_notes ) [ 0 , 0 , 2 , 4 , 5 , 5 , 5 , 5 , 6 , 6 , 7 , 9 , 9 , 9 , 9 , 9 , 10 ] 1 2 3 4 5 6 7 8 9 10 11 12 13 def rangement_valeurs ( notes_eval ): lst = [ 0 ] * 11 for note in notes_eval : lst [ note ] += 1 return lst def notes_triees ( effectifs_notes ): triees = [] for i in range ( 11 ): if effectifs_notes [ i ] != 0 : for _ in range ( effectifs_notes [ i ]): triees . append ( i ) return triees", "title": "Exercice 45.1"}, {"location": "term/ep.html#exercice-452", "text": "Exercice 45.2 \u00c9nonc\u00e9 Correction L\u2019objectif de cet exercice est d\u2019\u00e9crire deux fonctions r\u00e9cursives dec_to_bin et bin_to_dec assurant respectivement la conversion de l\u2019\u00e9criture d\u00e9cimale d\u2019un nombre entier vers son \u00e9criture en binaire et, r\u00e9ciproquement, la conversion de l\u2019\u00e9criture en binaire d\u2019un nombre vers son \u00e9criture d\u00e9cimale. Dans cet exercice, on s\u2019interdit l\u2019usage des fonctions Python bin et int . On rappelle sur l\u2019exemple ci-dessous une fa\u00e7on d\u2019obtenir l\u2019\u00e9criture en binaire du nombre 25 : \\(25 = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 \\times 12\\) \\(\\phantom{25} = 1 + 2 (0 + 2 \\times 6)\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 \\times 3))\\) \\(\\phantom{25} = 1 + 2 (0 + 2 (0 + 2 (1 + 2 \\times 1)))\\) \\(\\phantom{25} = 1 \\times 2^0 + 0 \\times 2^1 + 0 \\times 2^2 + 1 \\times 2^3 + 1 \\times 2^4\\) L'\u00e9criture binaire de 25 est donc 11001 . 0n rappelle \u00e9galement que : a // 2 renvoie le quotient de la division euclidienne de a par 2. a % 2 renvoie le reste dans la division euclidienne de a par 2. On indique enfin qu\u2019en Python si mot = \"informatique\" alors : mot[-1] renvoie 'e' , c\u2019est-\u00e0-dire le dernier caract\u00e8re de la cha\u00eene de caract\u00e8res mot . mot[:-1] renvoie 'informatiqu' , c\u2019est-\u00e0-dire l\u2019ensemble de la cha\u00eene de caract\u00e8res mot priv\u00e9e de son dernier caract\u00e8re. Compl\u00e9ter, puis tester, les codes de deux fonctions ci-dessous. On pr\u00e9cise que la fonction r\u00e9cursive dec_to_bin prend en param\u00e8tre un nombre entier et renvoie une cha\u00eene de caract\u00e8res contenant l\u2019\u00e9criture en binaire du nombre pass\u00e9 en param\u00e8tre. Exemple : >>> dec_to_bin ( 25 ) '11001' La fonction r\u00e9cursive bin_to_dec prend en param\u00e8tre une cha\u00eene de caract\u00e8res repr\u00e9sentant l\u2019\u00e9criture d\u2019un nombre en binaire et renvoie l\u2019\u00e9criture d\u00e9cimale de ce nombre. >>> bin_to_dec ( '101010' ) 42 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def dec_to_bin ( nb_dec ): q , r = nb_dec // 2 , nb_dec % 2 if q == ... : return str ( r ) else : return dec_to_bin ( ... ) + ... def bin_to_dec ( nb_bin ): if nb_bin == '0' : return 0 elif ... : return 1 else : if nb_bin [ - 1 ] == '0' : bit_droit = 0 else : bit_droit = ... return ... * bin_to_dec ( nb_bin [: - 1 ]) + ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def dec_to_bin ( nb_dec ): q , r = nb_dec // 2 , nb_dec % 2 if q == 0 : return str ( r ) else : return dec_to_bin ( q ) + str ( r ) def bin_to_dec ( nb_bin ): if nb_bin == '0' : return 0 elif nb_bin == '1' : return 1 else : if nb_bin [ - 1 ] == '0' : bit_droit = 0 else : bit_droit = 1 return 2 * bin_to_dec ( nb_bin [: - 1 ]) + bit_droit", "title": "Exercice 45.2"}, {"location": "term/interface.html", "text": "Interface et impl\u00e9mentation \u00b6 Principe \u00b6 Une structure de donn\u00e9es ? Une structure de donn\u00e9es est une collection, une organisation de donn\u00e9es en vue de leur utilisation: les listes, les tuples ou les dictionnaires Python sont des exemples de structures. D\u00e8s que la structure est d\u00e9clar\u00e9e, il est n\u00e9cessaire alors de d\u00e9finir les m\u00e9thodes qui agissent sur ces objets : c'est l'interface qui permet entre autres, de cr\u00e9er la structure, de la modifier, d'afficher son contenu voire de la supprimer... Cr\u00e9ation d'une nouvelle interface On se propose de d\u00e9finir ici une nouvelle structure de donn\u00e9es: les polyn\u00f4mes! En math\u00e9matiques, les polyn\u00f4mes sont des objets qui s'\u00e9crivent commme combinaison de mon\u00f4mes, de la forme \\(a_n\\times x^n\\) . Par exemple, \\(P(x)=2x^4-5x^2+x-3\\) est un polyn\u00f4me de degr\u00e9 4. Nous allons d\u00e9finir toute une interface en commen\u00e7ant par r\u00e9fl\u00e9chir par l'impl\u00e9mentation de cette structure: comment allons-nous repr\u00e9senter, on dit impl\u00e9menter, les polyn\u00f4mes en informatique!!? Nous allons choisir de le r\u00e9pr\u00e9senter par une liste Python de telle fa\u00e7on que: le coefficient \\(a_n\\) du polyn\u00f4me \\(P\\) se trouve au rang \\(n\\) de la liste. la longueur de la liste est \u00e9gale au degr\u00e9 du polyn\u00f4me plus 1! Ainsi, le polyn\u00f4me \\(P(x)=2x^4-5x^2+x-3\\) est-il repr\u00e9sent\u00e9 par la liste Python P = [-3, 1, -5, 0, 2] ! Nous allons maintenant d\u00e9finir une interface pour cette structure de donn\u00e9es. Une interface Un ensemble d'informations qui permet de d\u00e9crire une structure de donn\u00e9es ainsi que les m\u00e9thodes qui agissent sur ces donn\u00e9es Une premi\u00e8re proposition. Interface Instructions Commentaires Cr\u00e9ation d'un polyn\u00f4me de degr\u00e9 \\(n\\) create_pol(n) Retourne une liste. Par d\u00e9faut tous les coefficients sont \u00e9gaux \u00e0 0 Affiche le degr\u00e9 du polynome P degre(P) Retourne un entier. Il faut que P existe Ajout du coefficient \\(a_n\\) au polynome P ajout_coeff(P, valeur, n) Retourne une liste. Il faut que P existe Acc\u00e8s aux \u00e9l\u00e9ments du polyn\u00f4me affiche_coeff(P, rang) Retourne un nombre. {: .tabnsi_long :} Exercice Quelles sont les instrutions qui permettent d'impl\u00e9menter le polyn\u00f4me \\(P(x)=2x^4-5x^2+x-3\\) ? On peut enrichir l'interface en cr\u00e9ant de nouvelles fonctionnalit\u00e9s, m\u00e9thodes: Interface Instructions Commentaires \u00c9valuation de P pour une valeur de \\(x=val\\) eval_pol(P, val) Retourne une valeur \u00e9gale \u00e0 \\(P(val)\\) . Somme de deux polyn\u00f4mes somme(p1, p2) Retourne une liste. Produit de deux polyn\u00f4mes produit(p1, p2) Retourne une liste. Il faut que P existe {: .tabnsi_long :} Exercice Impl\u00e9menter les deux polyn\u00f4mes \\(P_1(x)=5x-3\\) et \\(P_2(x)=8x^3-5x^2+1\\) avec les m\u00e9thodes pr\u00e9c\u00e9dentes. Cr\u00e9er les polyn\u00f4mes \\(P\\) et \\(S\\) \u00e9gaux respectivement \u00e0 la somme et au produit de \\(P_1\\) et \\(P_2\\) . La fa\u00e7on dont sont cod\u00e9es les m\u00e9thodes pr\u00e9sent\u00e9es dans les interfaces, sont a priori invisibles aux yeux de l'utilisateur: on parle d' impl\u00e9mentation d'une m\u00e9thode lorsqu'on d\u00e9couvre comment est programm\u00e9e la m\u00e9thode. Pour une m\u00eame m\u00e9thode, il peut exister alors plusieurs impl\u00e9mentations... En r\u00e9sum\u00e9... L' interface est la partie visible pour qui veut utiliser ce type de donn\u00e9es. Elle pr\u00e9cise comment utiliser la structure de donn\u00e9es sans se pr\u00e9occuper de la fa\u00e7on dont les choses ont \u00e9t\u00e9 programm\u00e9es, c'est-\u00e0-dire son impl\u00e9mentation . Impl\u00e9menter l'interface Nous allons impl\u00e9menter une interface sur les polyn\u00f4mes dans un paradigme fonctionnel . Pour cela suivez le lien ici . Il est aussi possible d'impl\u00e9menter dans un paradigme orient\u00e9 objet mais comprenez que l'interface ne changera pas! Nous pourrions aussi envisager d'impl\u00e9menter les polyn\u00f4mes par un dictionnaire o\u00f9 les cl\u00e9s seraient les coefficients et leur valeur, leur rang. API...birth day! \u00b6 Une autre interface bien utile, une API! C'est quoi une API? Une API (Application Programming Interface), ou interface de programmation, est un ensemble normalis\u00e9 de briques logicielles gr\u00e2ce auxquelles un syst\u00e8me informatique offre des services \u00e0 d\u2019autres syst\u00e8mes. Quand nous consultons la m\u00e9t\u00e9o sur notre smartphone, il utilise l\u2019API du service m\u00e9t\u00e9o en question. La plupart des applications mobiles sont con\u00e7ues autour d\u2019une ou plusieurs API. L\u2019objectif d\u2019une API est de fournir des fonctionnalit\u00e9s, sans r\u00e9v\u00e9ler le fonctionnement interne de l\u2019application qui fournit les donn\u00e9es. C\u2019est en cela qu\u2019on dit qu\u2019une API est en fa\u00e7ade : on ne voit pas l\u2019int\u00e9rieur du b\u00e2timent Un exemple d'API m\u00e9t\u00e9o Le site ici de openweather offre une api pour des informations sur la m\u00e9t\u00e9o de votre ville. Pour pouvoir l'utiliser il faut utiliser un jeton (Token) fourni lors de l'inscription. Bien que le service soit gratuit, il existe de nombreuses options payantes. Exercice Effectuer la requete ci-dessous dans un script python. Quelle est la nature de la variable data ? Modifiez le code pour obtenir la vitesse du vent et sa direction. import requests url = \"http://api.openweathermap.org/data/2.5/weather?q=agen&appid=4370f9449a4ab35020f78dffcc0fe303\" content = requests . get ( url ) data = content . json () t = data [ 'main' ][ 'temp' ] print ( \"La t\u00e9mp\u00e9rature est de {} degr\u00e9s C\" . format ( t - 273.15 )) On peut aussi effectuer des requ\u00eates en Javascript et modifier ainsi le contenu d'une page web. Ci-dessous, une fonction utilisant une API donnant la position de la station spatiale ISS utilisant des promesses... voir ici pour la sp\u00e9cification de cette API. function marequete () { fetch ( \"http://api.open-notify.org/iss-now.json\" ) . then ( res => res . json ()) . then ( function isspos ( jsonobj ){ var lat = jsonobj [ 'iss_position' ][ 'latitude' ]; var lon = jsonobj [ 'iss_position' ][ 'longitude' ]; document . getElementById ( \"latitude\" ). innerText = lat ; document . getElementById ( \"longitude\" ). innerText = lon ; } ) } Concr\u00e8tement, une API est constitu\u00e9e d\u2019une biblioth\u00e8que logicielle, d\u2019un service web et d\u2019une description qui sp\u00e9cifie comment les clients peuvent interagir avec la plateforme logicielle qui fournit les donn\u00e9es, appel\u00e9e aussi fournisseur . Un peu de manipulation \u00b6 De nombreuses API disposent d\u2019un wrapper Python : c\u2019est un module Python qui permet d\u2019interroger la base de donn\u00e9es du fournisseur de fa\u00e7on simplifi\u00e9e, sans avoir \u00e0 \u00e9crire les requ\u00eates Web, ni \u00e0 interpr\u00e9ter les r\u00e9ponses. Celles-ci sont g\u00e9n\u00e9ralement \u00e9crites au format JSON, qui est un format d\u2019\u00e9change de donn\u00e9es, au m\u00eame titre que le XML. \u00c0 partir de ces r\u00e9ponses, le wrapper Python g\u00e9n\u00e8re des listes ou des dictionnaires, facilement manipulables. Exercice On va utiliser l'API Mars Rover Photos disponible \u00e0 cette adresse . G\u00e9n\u00e9rer une cl\u00e9 d'authentification (il existe une cl\u00e9 de d\u00e9mo DEMO_KEY mais qui donne un acc\u00e8s limit\u00e9...) Installer le wrapper Python nasaapi (comme un simple module...) ou python-nasa-api document\u00e9 ici Cherchez comment obtenir l'URL de la premi\u00e8re photo que le rover Curiosity a prise le 50i\u00e8me jour martien, avec sa cam\u00e9ra arri\u00e8re nomm\u00e9e Rear Hazard Avoidance Camera ou simplement RHAZ . Copier /collez cette URL dans un navigateur WEB pour visualiser cette photo. \u00c0 l'aide des donn\u00e9es re\u00e7ues du rover Curioity, donnez: Id de curiosity Sa date de lancement Sa date d'atterissage sur Mars Utiliser le module webbrowser pour afficher directement les photos trouv\u00e9es. # importation du module webbrowser import webbrowser # importation du sous-module MarsRovers du module nasaapi from nasaapi import MarsRovers # initialisation de la connexion avec l\u2019API et cr\u00e9ation de l\u2019objet rovers rovers = MarsRovers ( \u00ab coller ici la cl\u00e9 API NASA \u00bb , \u00ab ici le jour \u00bb , \u00ab NAV - CAM \u00bb ) # par exemple rovers = MarsRovers(\"DEMO_KEY\", sols = 1000 , camera = 'fhaz') # r\u00e9cup\u00e9ration des donn\u00e9es de Curiosity (dictionnaire) cur = rovers . curiosity () print ( cur ) # acc\u00e8s \u00e0 l\u2019URL de la quatri\u00e8me photo # l'URL est contenu dans la variable cur. \u00c0 vous de l'y extraire. url_photo = \u00ab compl\u00e9ter ici \u00bb # envoi de l\u2019URL dans le navigateur webbrowser . open_new_tab ( url_photo )", "title": "Interface et impl\u00e9mentation"}, {"location": "term/interface.html#interface-et-implementation", "text": "", "title": "Interface et impl\u00e9mentation"}, {"location": "term/interface.html#principe", "text": "Une structure de donn\u00e9es ? Une structure de donn\u00e9es est une collection, une organisation de donn\u00e9es en vue de leur utilisation: les listes, les tuples ou les dictionnaires Python sont des exemples de structures. D\u00e8s que la structure est d\u00e9clar\u00e9e, il est n\u00e9cessaire alors de d\u00e9finir les m\u00e9thodes qui agissent sur ces objets : c'est l'interface qui permet entre autres, de cr\u00e9er la structure, de la modifier, d'afficher son contenu voire de la supprimer... Cr\u00e9ation d'une nouvelle interface On se propose de d\u00e9finir ici une nouvelle structure de donn\u00e9es: les polyn\u00f4mes! En math\u00e9matiques, les polyn\u00f4mes sont des objets qui s'\u00e9crivent commme combinaison de mon\u00f4mes, de la forme \\(a_n\\times x^n\\) . Par exemple, \\(P(x)=2x^4-5x^2+x-3\\) est un polyn\u00f4me de degr\u00e9 4. Nous allons d\u00e9finir toute une interface en commen\u00e7ant par r\u00e9fl\u00e9chir par l'impl\u00e9mentation de cette structure: comment allons-nous repr\u00e9senter, on dit impl\u00e9menter, les polyn\u00f4mes en informatique!!? Nous allons choisir de le r\u00e9pr\u00e9senter par une liste Python de telle fa\u00e7on que: le coefficient \\(a_n\\) du polyn\u00f4me \\(P\\) se trouve au rang \\(n\\) de la liste. la longueur de la liste est \u00e9gale au degr\u00e9 du polyn\u00f4me plus 1! Ainsi, le polyn\u00f4me \\(P(x)=2x^4-5x^2+x-3\\) est-il repr\u00e9sent\u00e9 par la liste Python P = [-3, 1, -5, 0, 2] ! Nous allons maintenant d\u00e9finir une interface pour cette structure de donn\u00e9es. Une interface Un ensemble d'informations qui permet de d\u00e9crire une structure de donn\u00e9es ainsi que les m\u00e9thodes qui agissent sur ces donn\u00e9es Une premi\u00e8re proposition. Interface Instructions Commentaires Cr\u00e9ation d'un polyn\u00f4me de degr\u00e9 \\(n\\) create_pol(n) Retourne une liste. Par d\u00e9faut tous les coefficients sont \u00e9gaux \u00e0 0 Affiche le degr\u00e9 du polynome P degre(P) Retourne un entier. Il faut que P existe Ajout du coefficient \\(a_n\\) au polynome P ajout_coeff(P, valeur, n) Retourne une liste. Il faut que P existe Acc\u00e8s aux \u00e9l\u00e9ments du polyn\u00f4me affiche_coeff(P, rang) Retourne un nombre. {: .tabnsi_long :} Exercice Quelles sont les instrutions qui permettent d'impl\u00e9menter le polyn\u00f4me \\(P(x)=2x^4-5x^2+x-3\\) ? On peut enrichir l'interface en cr\u00e9ant de nouvelles fonctionnalit\u00e9s, m\u00e9thodes: Interface Instructions Commentaires \u00c9valuation de P pour une valeur de \\(x=val\\) eval_pol(P, val) Retourne une valeur \u00e9gale \u00e0 \\(P(val)\\) . Somme de deux polyn\u00f4mes somme(p1, p2) Retourne une liste. Produit de deux polyn\u00f4mes produit(p1, p2) Retourne une liste. Il faut que P existe {: .tabnsi_long :} Exercice Impl\u00e9menter les deux polyn\u00f4mes \\(P_1(x)=5x-3\\) et \\(P_2(x)=8x^3-5x^2+1\\) avec les m\u00e9thodes pr\u00e9c\u00e9dentes. Cr\u00e9er les polyn\u00f4mes \\(P\\) et \\(S\\) \u00e9gaux respectivement \u00e0 la somme et au produit de \\(P_1\\) et \\(P_2\\) . La fa\u00e7on dont sont cod\u00e9es les m\u00e9thodes pr\u00e9sent\u00e9es dans les interfaces, sont a priori invisibles aux yeux de l'utilisateur: on parle d' impl\u00e9mentation d'une m\u00e9thode lorsqu'on d\u00e9couvre comment est programm\u00e9e la m\u00e9thode. Pour une m\u00eame m\u00e9thode, il peut exister alors plusieurs impl\u00e9mentations... En r\u00e9sum\u00e9... L' interface est la partie visible pour qui veut utiliser ce type de donn\u00e9es. Elle pr\u00e9cise comment utiliser la structure de donn\u00e9es sans se pr\u00e9occuper de la fa\u00e7on dont les choses ont \u00e9t\u00e9 programm\u00e9es, c'est-\u00e0-dire son impl\u00e9mentation . Impl\u00e9menter l'interface Nous allons impl\u00e9menter une interface sur les polyn\u00f4mes dans un paradigme fonctionnel . Pour cela suivez le lien ici . Il est aussi possible d'impl\u00e9menter dans un paradigme orient\u00e9 objet mais comprenez que l'interface ne changera pas! Nous pourrions aussi envisager d'impl\u00e9menter les polyn\u00f4mes par un dictionnaire o\u00f9 les cl\u00e9s seraient les coefficients et leur valeur, leur rang.", "title": "Principe"}, {"location": "term/interface.html#apibirth-day", "text": "Une autre interface bien utile, une API! C'est quoi une API? Une API (Application Programming Interface), ou interface de programmation, est un ensemble normalis\u00e9 de briques logicielles gr\u00e2ce auxquelles un syst\u00e8me informatique offre des services \u00e0 d\u2019autres syst\u00e8mes. Quand nous consultons la m\u00e9t\u00e9o sur notre smartphone, il utilise l\u2019API du service m\u00e9t\u00e9o en question. La plupart des applications mobiles sont con\u00e7ues autour d\u2019une ou plusieurs API. L\u2019objectif d\u2019une API est de fournir des fonctionnalit\u00e9s, sans r\u00e9v\u00e9ler le fonctionnement interne de l\u2019application qui fournit les donn\u00e9es. C\u2019est en cela qu\u2019on dit qu\u2019une API est en fa\u00e7ade : on ne voit pas l\u2019int\u00e9rieur du b\u00e2timent Un exemple d'API m\u00e9t\u00e9o Le site ici de openweather offre une api pour des informations sur la m\u00e9t\u00e9o de votre ville. Pour pouvoir l'utiliser il faut utiliser un jeton (Token) fourni lors de l'inscription. Bien que le service soit gratuit, il existe de nombreuses options payantes. Exercice Effectuer la requete ci-dessous dans un script python. Quelle est la nature de la variable data ? Modifiez le code pour obtenir la vitesse du vent et sa direction. import requests url = \"http://api.openweathermap.org/data/2.5/weather?q=agen&appid=4370f9449a4ab35020f78dffcc0fe303\" content = requests . get ( url ) data = content . json () t = data [ 'main' ][ 'temp' ] print ( \"La t\u00e9mp\u00e9rature est de {} degr\u00e9s C\" . format ( t - 273.15 )) On peut aussi effectuer des requ\u00eates en Javascript et modifier ainsi le contenu d'une page web. Ci-dessous, une fonction utilisant une API donnant la position de la station spatiale ISS utilisant des promesses... voir ici pour la sp\u00e9cification de cette API. function marequete () { fetch ( \"http://api.open-notify.org/iss-now.json\" ) . then ( res => res . json ()) . then ( function isspos ( jsonobj ){ var lat = jsonobj [ 'iss_position' ][ 'latitude' ]; var lon = jsonobj [ 'iss_position' ][ 'longitude' ]; document . getElementById ( \"latitude\" ). innerText = lat ; document . getElementById ( \"longitude\" ). innerText = lon ; } ) } Concr\u00e8tement, une API est constitu\u00e9e d\u2019une biblioth\u00e8que logicielle, d\u2019un service web et d\u2019une description qui sp\u00e9cifie comment les clients peuvent interagir avec la plateforme logicielle qui fournit les donn\u00e9es, appel\u00e9e aussi fournisseur .", "title": "API...birth day!"}, {"location": "term/interface.html#un-peu-de-manipulation", "text": "De nombreuses API disposent d\u2019un wrapper Python : c\u2019est un module Python qui permet d\u2019interroger la base de donn\u00e9es du fournisseur de fa\u00e7on simplifi\u00e9e, sans avoir \u00e0 \u00e9crire les requ\u00eates Web, ni \u00e0 interpr\u00e9ter les r\u00e9ponses. Celles-ci sont g\u00e9n\u00e9ralement \u00e9crites au format JSON, qui est un format d\u2019\u00e9change de donn\u00e9es, au m\u00eame titre que le XML. \u00c0 partir de ces r\u00e9ponses, le wrapper Python g\u00e9n\u00e8re des listes ou des dictionnaires, facilement manipulables. Exercice On va utiliser l'API Mars Rover Photos disponible \u00e0 cette adresse . G\u00e9n\u00e9rer une cl\u00e9 d'authentification (il existe une cl\u00e9 de d\u00e9mo DEMO_KEY mais qui donne un acc\u00e8s limit\u00e9...) Installer le wrapper Python nasaapi (comme un simple module...) ou python-nasa-api document\u00e9 ici Cherchez comment obtenir l'URL de la premi\u00e8re photo que le rover Curiosity a prise le 50i\u00e8me jour martien, avec sa cam\u00e9ra arri\u00e8re nomm\u00e9e Rear Hazard Avoidance Camera ou simplement RHAZ . Copier /collez cette URL dans un navigateur WEB pour visualiser cette photo. \u00c0 l'aide des donn\u00e9es re\u00e7ues du rover Curioity, donnez: Id de curiosity Sa date de lancement Sa date d'atterissage sur Mars Utiliser le module webbrowser pour afficher directement les photos trouv\u00e9es. # importation du module webbrowser import webbrowser # importation du sous-module MarsRovers du module nasaapi from nasaapi import MarsRovers # initialisation de la connexion avec l\u2019API et cr\u00e9ation de l\u2019objet rovers rovers = MarsRovers ( \u00ab coller ici la cl\u00e9 API NASA \u00bb , \u00ab ici le jour \u00bb , \u00ab NAV - CAM \u00bb ) # par exemple rovers = MarsRovers(\"DEMO_KEY\", sols = 1000 , camera = 'fhaz') # r\u00e9cup\u00e9ration des donn\u00e9es de Curiosity (dictionnaire) cur = rovers . curiosity () print ( cur ) # acc\u00e8s \u00e0 l\u2019URL de la quatri\u00e8me photo # l'URL est contenu dans la variable cur. \u00c0 vous de l'y extraire. url_photo = \u00ab compl\u00e9ter ici \u00bb # envoi de l\u2019URL dans le navigateur webbrowser . open_new_tab ( url_photo )", "title": "Un peu de manipulation"}, {"location": "term/recherche.html", "text": "Recherche d'un motif dans un texte \u00b6 Motivation \u00b6 Il existe un raccourci clavier universel, Ctrl + F , qui permet la recherche d'un mot dans un texte, dans une page web ou tout autre document... Derri\u00e8re cette combinaison de touche se cachent des algorithmes efficaces que nous allons en partie d\u00e9couvrir dans ce cours... Comment \u00e7a marche? Comment rechercher un mot (nous dirons un motif...) dans un texte bien plus grand que le motif recherch\u00e9? Retour en classe de premi\u00e8re NSI \u00b6 L'op\u00e9rateur in permet de tester la pr\u00e9sence d'un \u00e9l\u00e9ment dans un it\u00e9rable. En particulier, on peut l'utiliser pour rechercher un motif dans une cha\u00eene. phrase_de_test = \"Une phrase qui dit n'importe quoi, juste pour tester la pr\u00e9sence de quoi \" test = 'quoi' in phrase_de_test La variable test est de type bool\u00e9en : elle retourne True car le motif quoi est pr\u00e9sent dans le texte phrase_de_test . >>> print ( test ) True N\u00e9anmoins, cet op\u00e9rateur ne teste que la pr\u00e9sence du motif quoi dans la cha\u00eene de caract\u00e8res phrase_de_test et en particulier, il ne pr\u00e9cise pas combien de fois il a \u00e9t\u00e9 trouv\u00e9 et encore moins o\u00f9 il a \u00e9t\u00e9 trouv\u00e9! L'instruction help(\"\") dans une console Python affiche des m\u00e9thodes de la classe string : la m\u00e9thode count et find semblent int\u00e9ressantes... Les m\u00e9thodes find et count La m\u00e9thode count compte le nombre d'occurrences du motif recherch\u00e9 dans le texte de r\u00e9f\u00e9rence. La m\u00e9thode find retourne le plus petit index du texte auquel se trouve le motif et retourne -1 sinon.. phrase_de_test = \"une phrase qui dit n'importe quoi, juste pour tester la pr\u00e9sence de quoi \" cpt = phrase_de_test . count ( 'quoi' ) rang = phrase_de_test . find ( 'quoi' ) La variable cpt vaut alors 2 et la variable rang vaut 29! On consid\u00e8re un motif M et un texte T . L'objectif est la cr\u00e9ation d'un programme qui renvoie tous les index de T o\u00f9 se situent M en cas de d\u00e9tection de M dans T , en utilisant seulement les m\u00e9thodes count,find rappel\u00e9es ci-dessus. Exercice \u00c9crire une fonction recherche_mot qui prend en param\u00e8tres M et T qui retourne la liste des index d\u00e9finis ci-dessus ou une liste vide si M n'est pas dans T . Tester votre fonction sur des exemples tr\u00e8s simples. Info Le site Gutenberg contient de nombreux ouvrages libres de droit. Exercice T\u00e9l\u00e9charger sur le site Gutenberg, le roman Les trois mousquetaires d'Alexandre Dumas sous le format txt avec l'encodage UTF-8 . Ouvrez le fichier en lecture par la m\u00e9thode fichier = open('troismousquetaires.txt','r', encoding = 'UTF-8') . Athos, Porthos et Aramis sont les trois mousquetaires et d'Artagnan le personnage principal: qui des trois mousquetaires a \u00e9t\u00e9 le plus cit\u00e9 dans le roman? Un algorithme de recherche simple: \u00b6 L'algorithme na\u00eff: \u00b6 Pour \u00e9viter d'utiliser les m\u00e9thodes count et find , on va reprendre l'id\u00e9e de comparer lettre par lettre, motif et texte, pour voir si il y a correspondance. Voici la proposition d'un algorithme qu'on appellera na\u00eff : Vous pouvez contr\u00f4ler le d\u00e9roulement de l'animation en la survolant avec la souris. On d\u00e9cale de 1 \u00e0 chaque fois le motif pour voir la correspondance dans le texte... def recherche_naive ( texte , motif ): \"\"\" renvoie la liste des indices (\u00e9ventuellement vide) des occurrences de de la cha\u00eene motif dans la cha\u00eene texte. \"\"\" indices = [] i = 0 while i <= len ( texte ) - len ( motif ): k = 0 while k < len ( motif ) and texte [ i + k ] == motif [ k ]: k += 1 if k == len ( motif ): indices . append ( i ) i += 1 return indices Exo Tester cette fonction sur des exemples simples. Tester cette fonction sur le roman et les trois mousquetaires \u00c0 l'aide du module time , mesurer le temps de recherche de chaque mousquetaire. Que remarquez-vous? Complexit\u00e9 de l'op\u00e9ration: \u00b6 On d\u00e9termine la complexit\u00e9 dans le pire des cas de cet algorithme, en d\u00e9terminant le nombre de comparaisons de lettres. On appelle n (respectivement m ), le nombre de caract\u00e8res du texte (respectivement du motif). Exercice Quel est le pire des cas? D\u00e9terminer en fonction de n et m la complexit\u00e9 de cet algorithme. Simplication de l'algorithme na\u00eff \u00b6 En g\u00e9n\u00e9ral, on se contente de savoir si un motif est dans un texte ou non. Exo Modifier la fonction recherche_naive pour qu'elle retourne le bool\u00e9en True d\u00e8s qu'elle trouve le motif dans le texte et False sinon. Vers un algorithme de recherche efficace: \u00b6 Une premi\u00e8re \u00e9tape: \u00b6 Pour comparer la pr\u00e9sence du motif dans le texte, nous avons compar\u00e9 la premier lettre du motif, puis \u00e9ventuellement la seconde, etc... Nous allons changer de strat\u00e9gie! Exo Re-\u00e9crire l'algorithme de recherche na\u00efve mais en d\u00e9marrant de la fin du motif et non du d\u00e9but. La comparaison se fera alors de droite \u00e0 gauche! L'algorithme de Boyer-Moore, version simplif\u00e9e de Horspol: \u00b6 L'id\u00e9e est de d\u00e9caler le motif vers la droite d'une valeur qui n'est pas toujours 1. On va d'abord coder une fonction dico_lettres qui renvoie un dictionnaire associant \u00e0 chaque lettre de mot (param\u00e8tre d'entr\u00e9e) son dernier rang dans le mot . On exclut la derni\u00e8re lettre, qui poserait un probl\u00e8me lors du d\u00e9calage (on d\u00e9calerait de 0...) def dico_lettres ( mot ): d = {} for i in range ( len ( mot ) - 1 ): d [ mot [ i ]] = i return d def boyer_moore ( texte , motif ): dico = dico_lettres ( motif ) indices = [] i = len ( motif ) - 1 while i < len ( texte ): k = 0 while k < len ( motif ) and motif [ len ( motif ) - 1 - k ] == texte [ i - k ]: k += 1 if k == len ( motif ): indices . append ( i - len ( motif ) + 1 ) i += 1 else : if texte [ i - k ] in dico : i = max ( i - k + len ( motif ) - dico [ texte [ i - k ]] - 1 , i + 1 ) else : i = i - k + len ( motif ) return indices Exo Reprendre les tests effectu\u00e9s sur le roman avec la fonction pr\u00e9c\u00e9dente et comparez les r\u00e9sultats.", "title": "Recherche textuelle"}, {"location": "term/recherche.html#recherche-dun-motif-dans-un-texte", "text": "", "title": "Recherche d'un motif dans un texte"}, {"location": "term/recherche.html#motivation", "text": "Il existe un raccourci clavier universel, Ctrl + F , qui permet la recherche d'un mot dans un texte, dans une page web ou tout autre document... Derri\u00e8re cette combinaison de touche se cachent des algorithmes efficaces que nous allons en partie d\u00e9couvrir dans ce cours... Comment \u00e7a marche? Comment rechercher un mot (nous dirons un motif...) dans un texte bien plus grand que le motif recherch\u00e9?", "title": "Motivation"}, {"location": "term/recherche.html#retour-en-classe-de-premiere-nsi", "text": "L'op\u00e9rateur in permet de tester la pr\u00e9sence d'un \u00e9l\u00e9ment dans un it\u00e9rable. En particulier, on peut l'utiliser pour rechercher un motif dans une cha\u00eene. phrase_de_test = \"Une phrase qui dit n'importe quoi, juste pour tester la pr\u00e9sence de quoi \" test = 'quoi' in phrase_de_test La variable test est de type bool\u00e9en : elle retourne True car le motif quoi est pr\u00e9sent dans le texte phrase_de_test . >>> print ( test ) True N\u00e9anmoins, cet op\u00e9rateur ne teste que la pr\u00e9sence du motif quoi dans la cha\u00eene de caract\u00e8res phrase_de_test et en particulier, il ne pr\u00e9cise pas combien de fois il a \u00e9t\u00e9 trouv\u00e9 et encore moins o\u00f9 il a \u00e9t\u00e9 trouv\u00e9! L'instruction help(\"\") dans une console Python affiche des m\u00e9thodes de la classe string : la m\u00e9thode count et find semblent int\u00e9ressantes... Les m\u00e9thodes find et count La m\u00e9thode count compte le nombre d'occurrences du motif recherch\u00e9 dans le texte de r\u00e9f\u00e9rence. La m\u00e9thode find retourne le plus petit index du texte auquel se trouve le motif et retourne -1 sinon.. phrase_de_test = \"une phrase qui dit n'importe quoi, juste pour tester la pr\u00e9sence de quoi \" cpt = phrase_de_test . count ( 'quoi' ) rang = phrase_de_test . find ( 'quoi' ) La variable cpt vaut alors 2 et la variable rang vaut 29! On consid\u00e8re un motif M et un texte T . L'objectif est la cr\u00e9ation d'un programme qui renvoie tous les index de T o\u00f9 se situent M en cas de d\u00e9tection de M dans T , en utilisant seulement les m\u00e9thodes count,find rappel\u00e9es ci-dessus. Exercice \u00c9crire une fonction recherche_mot qui prend en param\u00e8tres M et T qui retourne la liste des index d\u00e9finis ci-dessus ou une liste vide si M n'est pas dans T . Tester votre fonction sur des exemples tr\u00e8s simples. Info Le site Gutenberg contient de nombreux ouvrages libres de droit. Exercice T\u00e9l\u00e9charger sur le site Gutenberg, le roman Les trois mousquetaires d'Alexandre Dumas sous le format txt avec l'encodage UTF-8 . Ouvrez le fichier en lecture par la m\u00e9thode fichier = open('troismousquetaires.txt','r', encoding = 'UTF-8') . Athos, Porthos et Aramis sont les trois mousquetaires et d'Artagnan le personnage principal: qui des trois mousquetaires a \u00e9t\u00e9 le plus cit\u00e9 dans le roman?", "title": "Retour en classe de premi\u00e8re NSI"}, {"location": "term/recherche.html#un-algorithme-de-recherche-simple", "text": "", "title": "Un algorithme de recherche simple:"}, {"location": "term/recherche.html#lalgorithme-naif", "text": "Pour \u00e9viter d'utiliser les m\u00e9thodes count et find , on va reprendre l'id\u00e9e de comparer lettre par lettre, motif et texte, pour voir si il y a correspondance. Voici la proposition d'un algorithme qu'on appellera na\u00eff : Vous pouvez contr\u00f4ler le d\u00e9roulement de l'animation en la survolant avec la souris. On d\u00e9cale de 1 \u00e0 chaque fois le motif pour voir la correspondance dans le texte... def recherche_naive ( texte , motif ): \"\"\" renvoie la liste des indices (\u00e9ventuellement vide) des occurrences de de la cha\u00eene motif dans la cha\u00eene texte. \"\"\" indices = [] i = 0 while i <= len ( texte ) - len ( motif ): k = 0 while k < len ( motif ) and texte [ i + k ] == motif [ k ]: k += 1 if k == len ( motif ): indices . append ( i ) i += 1 return indices Exo Tester cette fonction sur des exemples simples. Tester cette fonction sur le roman et les trois mousquetaires \u00c0 l'aide du module time , mesurer le temps de recherche de chaque mousquetaire. Que remarquez-vous?", "title": "L'algorithme na\u00eff:"}, {"location": "term/recherche.html#complexite-de-loperation", "text": "On d\u00e9termine la complexit\u00e9 dans le pire des cas de cet algorithme, en d\u00e9terminant le nombre de comparaisons de lettres. On appelle n (respectivement m ), le nombre de caract\u00e8res du texte (respectivement du motif). Exercice Quel est le pire des cas? D\u00e9terminer en fonction de n et m la complexit\u00e9 de cet algorithme.", "title": "Complexit\u00e9 de l'op\u00e9ration:"}, {"location": "term/recherche.html#simplication-de-lalgorithme-naif", "text": "En g\u00e9n\u00e9ral, on se contente de savoir si un motif est dans un texte ou non. Exo Modifier la fonction recherche_naive pour qu'elle retourne le bool\u00e9en True d\u00e8s qu'elle trouve le motif dans le texte et False sinon.", "title": "Simplication de l'algorithme na\u00eff"}, {"location": "term/recherche.html#vers-un-algorithme-de-recherche-efficace", "text": "", "title": "Vers un algorithme de recherche efficace:"}, {"location": "term/recherche.html#une-premiere-etape", "text": "Pour comparer la pr\u00e9sence du motif dans le texte, nous avons compar\u00e9 la premier lettre du motif, puis \u00e9ventuellement la seconde, etc... Nous allons changer de strat\u00e9gie! Exo Re-\u00e9crire l'algorithme de recherche na\u00efve mais en d\u00e9marrant de la fin du motif et non du d\u00e9but. La comparaison se fera alors de droite \u00e0 gauche!", "title": "Une premi\u00e8re \u00e9tape:"}, {"location": "term/recherche.html#lalgorithme-de-boyer-moore-version-simplifee-de-horspol", "text": "L'id\u00e9e est de d\u00e9caler le motif vers la droite d'une valeur qui n'est pas toujours 1. On va d'abord coder une fonction dico_lettres qui renvoie un dictionnaire associant \u00e0 chaque lettre de mot (param\u00e8tre d'entr\u00e9e) son dernier rang dans le mot . On exclut la derni\u00e8re lettre, qui poserait un probl\u00e8me lors du d\u00e9calage (on d\u00e9calerait de 0...) def dico_lettres ( mot ): d = {} for i in range ( len ( mot ) - 1 ): d [ mot [ i ]] = i return d def boyer_moore ( texte , motif ): dico = dico_lettres ( motif ) indices = [] i = len ( motif ) - 1 while i < len ( texte ): k = 0 while k < len ( motif ) and motif [ len ( motif ) - 1 - k ] == texte [ i - k ]: k += 1 if k == len ( motif ): indices . append ( i - len ( motif ) + 1 ) i += 1 else : if texte [ i - k ] in dico : i = max ( i - k + len ( motif ) - dico [ texte [ i - k ]] - 1 , i + 1 ) else : i = i - k + len ( motif ) return indices Exo Reprendre les tests effectu\u00e9s sur le roman avec la fonction pr\u00e9c\u00e9dente et comparez les r\u00e9sultats.", "title": "L'algorithme de Boyer-Moore, version simplif\u00e9e de Horspol:"}, {"location": "term/recursivite.html", "text": "Fonctions r\u00e9cursives \u00b6 Un exemple: comment calculer la somme des n premiers entiers cons\u00e9cutifs? \u00b6 Il s'agit de calculer la somme (dite de Gauss...) \\[ S = 1 + 2 + 3 + 4 + ... + n-1 + n \\] Exercice Copier et coller le code Python ci-dessous Testez pour plusieurs valeurs simples de \\(n\\) n = int ( input ( \"Donner un entier positif\" )) S = 0 for i in range ( n + 1 ): S = S + i print ( \"La somme des {} premiers entiers est {} \" . format ( n , S )) Le code ci-dessus est imp\u00e9ratif au sens o\u00f9 nous donnons des ordres que l'ordinateur ex\u00e9cute ligne par ligne. Exercice Transformer le code ci-dessus en une fonction somme_entier qui prend en param\u00e8tre le seul entier \\(n\\) et qui retourne la somme recherch\u00e9e. Ajouter des assertions \u00e0 la fonction. Effectuer des tests unitaires (voir le cours...) Posons la notation \\(S_n\\) pour indiquer la somme \\(1 + 2 + 3 + 4 + ... + n-1 + n\\) . Remarquons alors ceci: \\[S_n=1 + 2 + 3 + 4 + ... + n-1 + n =S_{n -1} + n\\] Autrement dit, le calcul de \\(S_n\\) est r\u00e9current et la traduction python de cette relation donne: somme_rect ( n ) = somme_rect ( n - 1 ) + n Mais attention! La relation pr\u00e9c\u00e9dente n'est valable que pour \\(n\\geq 1\\) et \u00e0 la condition qu'elle soit aussi initialis\u00e9e : si on d\u00e9clare que somme_rec(0) = 0 , on peut alors calculer somme_rec(1),somme_rec(2),... Au final, nous obtenons la version r\u00e9cursive de la fonction pr\u00e9c\u00e9dente: def somme_rec ( n ): if n == 0 : return 0 else : return somme_rec ( n - 1 ) + n Visualiser la pile d'ex\u00e9cution d'un appel r\u00e9cursif \u00b6 Exercice Allez sur le site python tutor et recopier le code de la fonction r\u00e9cursive dans la zone d'\u00e9dition. Ex\u00e9cutez somme_rec(5) et visualisez les diff\u00e9rents appels. M\u00eame consigne avec somme_rec(50) . Quel pourrait \u00eatre le probl\u00e8me des fonctions r\u00e9cursives? Il existe de nombreuses situations algorithmiques qui justifient l'appel d'une fonction r\u00e9cursive. Cependant le nombre d'appel dans la pile est souvent limit\u00e9e pour des raisons \u00e9videntes de s\u00e9curit\u00e9 puisque la zone m\u00e9moire qui stocke tous les appels peut tr\u00e8s vite augment\u00e9e... Dans Thonny, on peut conna\u00eetre le nombre maximum d'appel: import sys print ( sys . getrecursionlimit ()) \u00c0 retenir Lors de l\u2019ex\u00e9cution d\u2019un algorithme r\u00e9cursif, les appels successifs de la fonction sont stock\u00e9s dans une pile, c\u2019est la pile d\u2019ex\u00e9cution . Plus pr\u00e9cis\u00e9ment, la pile d\u2019ex\u00e9cution est un emplacement m\u00e9moire destin\u00e9 \u00e0 stocker les param\u00e8tres, les variables locales ainsi que les adresses m\u00e9moires de retour des fonctions en cours d\u2019ex\u00e9cution. Vocabulaire \u00b6 \u00c0 savoir Une fonction r\u00e9cursive est une fonction qui s'appelle elle-m\u00eame dans son ex\u00e9cution. Elle pr\u00e9sente toujours: un cas d'arr\u00eat correspondant au cas de base, l'\u00e9quivalent de l'initialisation en math\u00e9matiques... un appel r\u00e9cursif d\u00e9cr\u00e9ment\u00e9 : ainsi apr\u00e8s plusieurs appels, on se ram\u00e8ne au cas de base! Exercices \u00b6 Exercice La factorielle d'un entier n, not\u00e9e \\(n!\\) est \u00e9gale \u00e0 : \\(n!=1\\times 2 \\times 3 \\times...\\times (n-1) \\times n\\) si \\(n>0\\) et \u00e9gal \u00e0 1 si \\(n=0\\) . \u00c9crire la fonction facto_simple(n) qui prend en param\u00e8tre un entier \\(n\\) et qui renvoie la factorielle de \\(n\\) . \u00c9crire la fonction r\u00e9cursive facto_recu(n) qui prend en param\u00e8tre un entier \\(n\\) et qui renvoie la factorielle de \\(n\\) . On posera des assertions puis des tests dans ces fonctions pour v\u00e9rifier leur comportement. Exercice On rappelle que \\(x^n=x\\times x \\times x....\\times x\\) , \\(n\\) fois o\u00f9 \\(x\\) est un r\u00e9el quelconque et \\(n\\) un entier. \u00c9crire la fonction puissance_recu(n,x) qui prend en param\u00e8tres l'entier \\(n\\) et le r\u00e9el \\(x\\) . On peut am\u00e9liorer cette derni\u00e8re fonction en consid\u00e9rant la d\u00e9finition ci-dessous: \\[\\textrm{puissance}(x , n) = \\left\\{ \\begin{array}{c c} x & \\textrm{si } n = 1 \\\\ \\textrm{puissance}(x^2 , n/2) & \\textrm{si } n \\textrm{ est pair}\\\\ x \\times \\textrm{puissance}(x^2 , (n - 1)/2) & \\textrm{si } n \\textrm{ est impair}\\\\ \\end{array} \\right.\\] \u00c9crire la fonction puissance_mieux(n, x) avec cette d\u00e9finition et comparer le temps d'ex\u00e9cution de ces deux fonctions. On utilisera le module timeit pour cela... Exercice \u00c9crire une fonction nomm\u00e9e reverse(phrase) qui prend en param\u00e8tre la cha\u00eene de caract\u00e8re phrase et qui la renvoie \u00e0 l'envers... \u00c9crire la version r\u00e9cursive de cette fonction. Exercice Que dessine la fonction r\u00e9cursive suivante dans turtle (essayez de deviner au lieu de recopier le code....)? from turtle import * def carre ( c ): for k in range ( 4 ): forward ( c ) right ( 90 ) def base ( c ): carre ( c ) forward ( c / 2 ) right ( 45 ) def trace ( c ): if c < 5 : return None else : base ( c ) return trace ( c / ( 2 ** 0.5 )) trace ( 200 )", "title": "R\u00e9cursivit\u00e9"}, {"location": "term/recursivite.html#fonctions-recursives", "text": "", "title": "Fonctions r\u00e9cursives"}, {"location": "term/recursivite.html#un-exemple-comment-calculer-la-somme-des-n-premiers-entiers-consecutifs", "text": "Il s'agit de calculer la somme (dite de Gauss...) \\[ S = 1 + 2 + 3 + 4 + ... + n-1 + n \\] Exercice Copier et coller le code Python ci-dessous Testez pour plusieurs valeurs simples de \\(n\\) n = int ( input ( \"Donner un entier positif\" )) S = 0 for i in range ( n + 1 ): S = S + i print ( \"La somme des {} premiers entiers est {} \" . format ( n , S )) Le code ci-dessus est imp\u00e9ratif au sens o\u00f9 nous donnons des ordres que l'ordinateur ex\u00e9cute ligne par ligne. Exercice Transformer le code ci-dessus en une fonction somme_entier qui prend en param\u00e8tre le seul entier \\(n\\) et qui retourne la somme recherch\u00e9e. Ajouter des assertions \u00e0 la fonction. Effectuer des tests unitaires (voir le cours...) Posons la notation \\(S_n\\) pour indiquer la somme \\(1 + 2 + 3 + 4 + ... + n-1 + n\\) . Remarquons alors ceci: \\[S_n=1 + 2 + 3 + 4 + ... + n-1 + n =S_{n -1} + n\\] Autrement dit, le calcul de \\(S_n\\) est r\u00e9current et la traduction python de cette relation donne: somme_rect ( n ) = somme_rect ( n - 1 ) + n Mais attention! La relation pr\u00e9c\u00e9dente n'est valable que pour \\(n\\geq 1\\) et \u00e0 la condition qu'elle soit aussi initialis\u00e9e : si on d\u00e9clare que somme_rec(0) = 0 , on peut alors calculer somme_rec(1),somme_rec(2),... Au final, nous obtenons la version r\u00e9cursive de la fonction pr\u00e9c\u00e9dente: def somme_rec ( n ): if n == 0 : return 0 else : return somme_rec ( n - 1 ) + n", "title": "Un exemple: comment calculer la somme des n premiers entiers cons\u00e9cutifs?"}, {"location": "term/recursivite.html#visualiser-la-pile-dexecution-dun-appel-recursif", "text": "Exercice Allez sur le site python tutor et recopier le code de la fonction r\u00e9cursive dans la zone d'\u00e9dition. Ex\u00e9cutez somme_rec(5) et visualisez les diff\u00e9rents appels. M\u00eame consigne avec somme_rec(50) . Quel pourrait \u00eatre le probl\u00e8me des fonctions r\u00e9cursives? Il existe de nombreuses situations algorithmiques qui justifient l'appel d'une fonction r\u00e9cursive. Cependant le nombre d'appel dans la pile est souvent limit\u00e9e pour des raisons \u00e9videntes de s\u00e9curit\u00e9 puisque la zone m\u00e9moire qui stocke tous les appels peut tr\u00e8s vite augment\u00e9e... Dans Thonny, on peut conna\u00eetre le nombre maximum d'appel: import sys print ( sys . getrecursionlimit ()) \u00c0 retenir Lors de l\u2019ex\u00e9cution d\u2019un algorithme r\u00e9cursif, les appels successifs de la fonction sont stock\u00e9s dans une pile, c\u2019est la pile d\u2019ex\u00e9cution . Plus pr\u00e9cis\u00e9ment, la pile d\u2019ex\u00e9cution est un emplacement m\u00e9moire destin\u00e9 \u00e0 stocker les param\u00e8tres, les variables locales ainsi que les adresses m\u00e9moires de retour des fonctions en cours d\u2019ex\u00e9cution.", "title": "Visualiser la pile d'ex\u00e9cution d'un appel r\u00e9cursif"}, {"location": "term/recursivite.html#vocabulaire", "text": "\u00c0 savoir Une fonction r\u00e9cursive est une fonction qui s'appelle elle-m\u00eame dans son ex\u00e9cution. Elle pr\u00e9sente toujours: un cas d'arr\u00eat correspondant au cas de base, l'\u00e9quivalent de l'initialisation en math\u00e9matiques... un appel r\u00e9cursif d\u00e9cr\u00e9ment\u00e9 : ainsi apr\u00e8s plusieurs appels, on se ram\u00e8ne au cas de base!", "title": "Vocabulaire"}, {"location": "term/recursivite.html#exercices", "text": "Exercice La factorielle d'un entier n, not\u00e9e \\(n!\\) est \u00e9gale \u00e0 : \\(n!=1\\times 2 \\times 3 \\times...\\times (n-1) \\times n\\) si \\(n>0\\) et \u00e9gal \u00e0 1 si \\(n=0\\) . \u00c9crire la fonction facto_simple(n) qui prend en param\u00e8tre un entier \\(n\\) et qui renvoie la factorielle de \\(n\\) . \u00c9crire la fonction r\u00e9cursive facto_recu(n) qui prend en param\u00e8tre un entier \\(n\\) et qui renvoie la factorielle de \\(n\\) . On posera des assertions puis des tests dans ces fonctions pour v\u00e9rifier leur comportement. Exercice On rappelle que \\(x^n=x\\times x \\times x....\\times x\\) , \\(n\\) fois o\u00f9 \\(x\\) est un r\u00e9el quelconque et \\(n\\) un entier. \u00c9crire la fonction puissance_recu(n,x) qui prend en param\u00e8tres l'entier \\(n\\) et le r\u00e9el \\(x\\) . On peut am\u00e9liorer cette derni\u00e8re fonction en consid\u00e9rant la d\u00e9finition ci-dessous: \\[\\textrm{puissance}(x , n) = \\left\\{ \\begin{array}{c c} x & \\textrm{si } n = 1 \\\\ \\textrm{puissance}(x^2 , n/2) & \\textrm{si } n \\textrm{ est pair}\\\\ x \\times \\textrm{puissance}(x^2 , (n - 1)/2) & \\textrm{si } n \\textrm{ est impair}\\\\ \\end{array} \\right.\\] \u00c9crire la fonction puissance_mieux(n, x) avec cette d\u00e9finition et comparer le temps d'ex\u00e9cution de ces deux fonctions. On utilisera le module timeit pour cela... Exercice \u00c9crire une fonction nomm\u00e9e reverse(phrase) qui prend en param\u00e8tre la cha\u00eene de caract\u00e8re phrase et qui la renvoie \u00e0 l'envers... \u00c9crire la version r\u00e9cursive de cette fonction. Exercice Que dessine la fonction r\u00e9cursive suivante dans turtle (essayez de deviner au lieu de recopier le code....)? from turtle import * def carre ( c ): for k in range ( 4 ): forward ( c ) right ( 90 ) def base ( c ): carre ( c ) forward ( c / 2 ) right ( 45 ) def trace ( c ): if c < 5 : return None else : base ( c ) return trace ( c / ( 2 ** 0.5 )) trace ( 200 )", "title": "Exercices"}, {"location": "term/reseau_term.html", "text": "Rappel sur les r\u00e9seaux \u00b6 Les vid\u00e9os WhatsApp La taille maximale autoris\u00e9e pour les pi\u00e8ces jointes (photos, vid\u00e9os ou messages vocaux) que vous recevez ou envoyez via WhatsApp est de 16 Mo sur tous les appareils. Sur la plupart des t\u00e9l\u00e9phones, cette taille comprend entre 90 secondes et 3 minutes de vid\u00e9o. La dur\u00e9e maximale de la vid\u00e9o varie en fonction de la qualit\u00e9 de l'appareil photo de votre t\u00e9l\u00e9phone. C'est devenu une pratique quotidienne: envoyer un texto, un e-mail, un message vocal, une vid\u00e9o... Comment \u00e7a marche? Un texto c'est quelques kilooctets alors qu'un message vocal d\u00e9passe largement le m\u00e9gaoctet et les vid\u00e9os c'est pire. Comment sont envoy\u00e9es les donn\u00e9es sur un r\u00e9seau? Comment \u00eatre s\u00fbr de les envoyer \u00e0 la bonne personne? Comment s'assurer que toutes les donn\u00e9es ont bien \u00e9t\u00e9 transmises? Autant de questions qui trouvent leur r\u00e9ponses dans le programme de premi\u00e8re mais avant de parler de routage (programme de terminale...), quelques rappels s'imposent! Un r\u00e9seau c'est d'abord physique \u00b6 Dans la notion de r\u00e9seau informatique, on doit dissocier le r\u00e9seau physique du r\u00e9seau logiciel . \u00c0 retenir! Internet est un r\u00e9seau mat\u00e9riel reliant tous les ordinateurs, smartphones, objets de l'internet(IoT),... entre eux. Cette interconnexion se r\u00e9alise par c\u00e2bles(RJ45, fibre optique,...) ou par ondes (wifi, bluetooth, GSM, ...). M\u00eame les continents sont r\u00e9li\u00e9s entre eux par d'\u00e9normes c\u00e2bles sous-marins.... Un exemple de r\u00e9seau physique \u00b6 Le r\u00e9seau Renater Connecteur de savoirs, RENATER, R\u00e9seau National de t\u00e9l\u00e9communications pour la Technologie l\u2019Enseignement et la Recherche, est l\u2019acteur de r\u00e9f\u00e9rence des infrastructures du num\u00e9rique de la communaut\u00e9 enseignement recherche. Constitu\u00e9 en 1993, RENATER est un groupement d\u2019int\u00e9r\u00eat public (GIP) qui assure la ma\u00eetrise d\u2019ouvrage du r\u00e9seau national de communications \u00e9lectroniques pour la technologie, l\u2019enseignement et la recherche. Les membres de RENATER sont le minist\u00e8re de l\u2019\u00c9ducation nationale et de la jeunesse, le minist\u00e8re de l\u2019Enseignement sup\u00e9rieur et de la Recherche, France Universit\u00e9s ainsi que des organismes de recherche, le CNRS, le CEA, Inria, le CNES, l\u2019Inrae, l\u2019Inserm, l\u2019Onera, le Cirad, l\u2019IRD et le BRGM. \u00c0 faire: Tapez windows + R puis cmd dans la fen\u00eatre qui s'ouvre. Tapez tracert www.ac-bordeaux.fr pour conna\u00eetre la route qui conduit de votre ordinateur \u00e0 celui qui h\u00e9berge le site du rectorat. Vous verrez appara\u00eetre le r\u00e9seau Renater. Choississez un autre site pour constater que les ordinateurs du lyc\u00e9e (Education Nationale...) sont tous reli\u00e9s (via le serveur) au r\u00e9seau RENATER. Attention, si vous effectuez la m\u00eame manipulation de chez vous, ce r\u00e9seau d\u00e9di\u00e9 n'appara\u00eetra \u00e9videmment pas! Les objets d'un r\u00e9seau \u00b6 Le Hub (concentrateur): Permet de relier plusieurs machines entre elles. Compl\u00e9tement d\u00e9suet car il ne g\u00e8re pas les transmissions et les collisions. Le Switch(commutateur): Permet de relier plusieurs machines entre elles avec canal d\u00e9di\u00e9 pour chaque destinataire choisi... La passerelle et le routeur: Votre box internet joue bien des r\u00f4les: en particulier celui de routeur et de passerelle, reliant votre r\u00e9seau priv\u00e9 au r\u00e9seau internet via les routeurs de votre FAI. Mais dans des r\u00e9seaux d'entreprises, ce n'est pas la m\u00eame histoire! Ci-apr\u00e8s, une photo des routeurs et switch d'un r\u00e9seau du lyc\u00e9e avec \u00e0 c\u00f4t\u00e9 le serveur: 4. Les connectiques On ne saurait \u00e9voquer les r\u00e9seaux physiques sans parler des c\u00e2bles ou prises RJ45 omnipr\u00e9sents: il existe d'autres types de connectiques notamment pour la fibre ou le t\u00e9l\u00e9phone... \u00c0 retenir Les switch sont des hub intelligents qui g\u00e9rent les informations qu'ils recoivent: ils ne transmettent qu'\u00e0 la machine concern\u00e9e par le message contrairement aux hub qui diffusent largement. Les hub ne sont plus utilis\u00e9s de nos jours dans les r\u00e9seaux modernes. Un r\u00e9seau c'est ensuite logiciel et protocolaire \u00b6 Pour que deux ordinateurs puissent communiquer entre eux, il faut un ensemble de r\u00e8gles pr\u00e9-d\u00e9finies: comment d\u00e9buter le communication? comment envoyer au bon destinataire ? comment s'assurer que le message a \u00e9t\u00e9 bien envoy\u00e9? ... L'ensemble de ces r\u00e8gles est appel\u00e9 protocole . \u00c0 savoir: Un protocole d\u00e9finit de mani\u00e8re formelle et interop\u00e9rable l'\u00e9change des informations entre ordinateurs. Revenons \u00e0 notre questionnement initial: je prends une photo et je l'envoie \u00e0 mon ami. Que se passe t-il r\u00e9ellement? Le sch\u00e9ma suivant illustre les diff\u00e9rentes \u00e9tapes de la communication: Col Couche Son r\u00f4le La couche application Elle g\u00e9n\u00e8re des donn\u00e9es : ici une image et certainement des m\u00e9tadonn\u00e9es(qui envoie? \u00e0 quelle heure?,...) et les livre \u00e0 la couche suivante. La couche transport Elle d\u00e9coupe les donn\u00e9es en petits paquets(1500octets environ...), les taggent par le port de l'application \u00e0 l'origine de la communication puis les identifie par des informations chiffr\u00e9es permettant dans le cas de TCP de reconstituer les donn\u00e9es en bout de cha\u00eene d'une part et de savoir si il manque des paquets d'autre part(voire illustration suivante) La couche r\u00e9seau Elle re\u00e7oit les paquets de la couche transport et appose les adresses IP de la source et de la destination sans se pr\u00e9ocupper de leur contenu La couche liaison Elle re\u00e7oit les donn\u00e9es de la couche r\u00e9seau et appose les adresses MAC de la source et de la destination {: .tabnsi_long :} Col Le mod\u00e8le est con\u00e7u en couche: chaque couche a son propre r\u00f4le et fournit des donn\u00e9es \u00e0 la couche suivante. Je vous popose ici une version simplifi\u00e9e mais dans la r\u00e9alit\u00e9 c'est beaucoup plus \u00e9labor\u00e9... Le mod\u00e8le OSI(7 couches) et sa version simplifi\u00e9e(4 couches) Un protocole de la couche de liaison : ETHERNET Invent\u00e9 au d\u00e9but des ann\u00e9es 70 par Xerox puis sp\u00e9cifi\u00e9 dans les ann\u00e9es 80, il propose plusieurs variantes. C'est la premi\u00e8re technologie LAN grand public pour faire communiquer des ordinateurs rattach\u00e9s \u00e0 un m\u00eame \u00ab \u00e9ther \u00bb, c'est \u00e0 dire, un milieu passif capable de transf\u00e9rer des donn\u00e9es, comme un c\u00e2ble coaxial De la th\u00e9orie \u00e0 la pratique: observez la frame captur\u00e9e par Wireshark: On retrouve: le mod\u00e8le en couche la couche Ethernet avec les adresses MAC (maquill\u00e9es ici) la couche IP qui fournit les adresses IP la couche Transport qui donne le port source de l'application (64423) vers le port destination (80) avec des informations la couche Application (http) C'est mon ordinateur( automatiquement) qui fait une requ\u00eate http sur un serveur d' avast (anti-virus...) \u00c0 savoir Une adresse IP est une adresse logicielle attribu\u00e9e en g\u00e9n\u00e9ral automatiquement par un service DHCP. Une adresse MAC est une adresse physique , celle de la carte r\u00e9seau d'un ordinateur, d'un routeur. La correspondance entre les deux adresses se fait par le protocole ARP. Dans ce qui suit on se propose d'\u00e9tudier plus pr\u00e9cis\u00e9ment les deux protocoles populaires: TCP et IP. La couche Transport \u00b6 La couche Transport repose sur les protocoles TCP voire UDP: elle assure la communications de bout en bout entre les programmes. Les segments sont taggu\u00e9s avec de nombreuses informations dont le port de l'application qui a demand\u00e9 ses services( par exemple,le protocole https de la couche application utilise le port 443...). Le protocole TCP est dit en mode connect\u00e9 et fiable : avant toute transmission de segment, le protocle commence par une poign\u00e9e de main (acknowledgement) entre les deux acteurs de la communication( source(host1) et destination(host2)) les segments envoy\u00e9s sont num\u00e9rot\u00e9s de telle sorte que le destinataire sait si tous les segments ont \u00e9t\u00e9 envoy\u00e9s et redemandent la transmission le cas \u00e9ch\u00e9ant. Donc \u00e0 chaque envoi, il y a trois \u00e9tapes illustr\u00e9es par la figure ci-dessous. Le protocole UDP ne pr\u00e9sente pas ses avantages: il envoie les segments sans se soucier de leur destin... Par exemple, dans le cas de la transmission de la voix sur IP, la perte occasionnelle d'un paquet est tol\u00e9rable dans la mesure o\u00f9 il existe des m\u00e9canismes de substitution des donn\u00e9es manquantes, par contre la rapidit\u00e9 de transmission est un crit\u00e8re primordial pour la qualit\u00e9 d'\u00e9coute. \u00c0 retenir: Le protocole TCP est beaucoup plus fiable mais moins rapide que le protocole UDP Des outils d'analyses de r\u00e9seau comme Wireshark permet de visualiser dans le d\u00e9tails les \u00e9changes r\u00e9alis\u00e9s : !](img/wireshark.png){width=100% align= center} Les croix rouges mettent en avant la poign\u00e9e de main entre la source(mon ordi) et la destination (le serveur qui h\u00e9berge le site www.lequipe.fr ) dans le protocole TCP . Remarquez en vert, la requ\u00eates DNS et sa r\u00e9ponse... La couche R\u00e9seau \u00b6 Cette couche repose sur le protocole IP qui assure la communication de bout en bout entre deux machines qui ne sont pas connect\u00e9s directement, c'est-\u00e0-dire situ\u00e9es dans des r\u00e9seaux diff\u00e9rents. Elle achemine les paquets (ou datagrammes) \u00e0 travers le r\u00e9seau Internet sans garantie (la garantie \u00e9tant asur\u00e9e par TCP...) mais avec robustesse(d\u00e9faillance d'un routeur). Le protocole repose sur un adressage logique des machines dans le r\u00e9seau ind\u00e9pendamment du r\u00e9seau physique( Ethernet par exemple...): c'est l'adresse IP . \u00c0 savoir: Il y a \\(2^{32}\\) adresses IP possibles, \u00e9puis\u00e9es d\u00e8s 2011! On se dirige petit \u00e0 petit vers les adresses IPv6(128bits) Il y a historiquement cinq classes d'adresses: certaines sont priv\u00e9es, d'autres publiques. Elles sont caract\u00e9ris\u00e9es par leur NetId et leur HostId : plus le NetId est petit plus le r\u00e9seau est grand! Classe NetId HostId Nombre de clients possibles A 8 24 \\(2^{24}-2\\) B 16 16 \\(2^{16}-2\\) C 24 8 \\(2^{8}-2\\) {: .tabnsi :} Cette notion est un peu d\u00e9suette car manque de souplessse mais m\u00e9rite d'\u00eatre connue... Il existe aussi les classe D et E peu utilis\u00e9es en ce qui nous concerne... Pourquoi -2? Deux adresses sont g\u00e9n\u00e9ralement r\u00e9serv\u00e9es: celle du r\u00e9seau dont le NetId est \u00e0 0 et celle du broadcast dont le NetId est \u00e0 255 Une adresse de broadcast sert \u00e0 diffuser \u00e0 l'ensemble des ordinateurs qui constituent le r\u00e9seau. Mais comment reconna\u00eetre NetId et HostId ? C'est le r\u00f4le du masque de sous-r\u00e9seau Le masque de sous-r\u00e9seau est une adresse IP comme par exemple 255.255.255.0 qui en binaire donne l'horrible \u00e9criture : 11111111.11111111.11111111.00000000 ! Un ET logique entre le masque et une adresse IP permet de conna\u00eetre le NetId donc le HostId de la machine: On utilise ici l'adresse d\u00e9cimale point\u00e9e (CIDR) indiquant le nombre de bits \u00e0 1 dans l'adresse du masque de sous r\u00e9seau. Exemple Si l'adresse d'une machine est 192.168.1.121/19 cela signifie que l'adresse du masque est, en binaire 11111111.11111111.11100000.00000000 ( 19 premiers bits \u00e0 1 et le reste \u00e0 0) soit en d\u00e9cimale, 255.255.224.0 . Certaines adresses sont vou\u00e9es \u00e0 des utilisations particuli\u00e8res: Exemple L'adresse 127.0.0.1 (ou simplement ::1 ) est la boucle locale ou simplement localhost . On l'utilise par exemple si sur la m\u00eame machine, vous installez un serveur Web et un client. En guise de conclusion, une vid\u00e9o de notre cher Charles Poulmaire sur les r\u00e9seaux informatiques: ici Elle permet de bien comprendre le principe d' encapsulation de chaque couche et introduit parfaitement le cours sur le routage des paquets sur un r\u00e9seau.", "title": "Rappel sur les r\u00e9seaux informatiques"}, {"location": "term/reseau_term.html#rappel-sur-les-reseaux", "text": "Les vid\u00e9os WhatsApp La taille maximale autoris\u00e9e pour les pi\u00e8ces jointes (photos, vid\u00e9os ou messages vocaux) que vous recevez ou envoyez via WhatsApp est de 16 Mo sur tous les appareils. Sur la plupart des t\u00e9l\u00e9phones, cette taille comprend entre 90 secondes et 3 minutes de vid\u00e9o. La dur\u00e9e maximale de la vid\u00e9o varie en fonction de la qualit\u00e9 de l'appareil photo de votre t\u00e9l\u00e9phone. C'est devenu une pratique quotidienne: envoyer un texto, un e-mail, un message vocal, une vid\u00e9o... Comment \u00e7a marche? Un texto c'est quelques kilooctets alors qu'un message vocal d\u00e9passe largement le m\u00e9gaoctet et les vid\u00e9os c'est pire. Comment sont envoy\u00e9es les donn\u00e9es sur un r\u00e9seau? Comment \u00eatre s\u00fbr de les envoyer \u00e0 la bonne personne? Comment s'assurer que toutes les donn\u00e9es ont bien \u00e9t\u00e9 transmises? Autant de questions qui trouvent leur r\u00e9ponses dans le programme de premi\u00e8re mais avant de parler de routage (programme de terminale...), quelques rappels s'imposent!", "title": "Rappel sur les r\u00e9seaux"}, {"location": "term/reseau_term.html#un-reseau-cest-dabord-physique", "text": "Dans la notion de r\u00e9seau informatique, on doit dissocier le r\u00e9seau physique du r\u00e9seau logiciel . \u00c0 retenir! Internet est un r\u00e9seau mat\u00e9riel reliant tous les ordinateurs, smartphones, objets de l'internet(IoT),... entre eux. Cette interconnexion se r\u00e9alise par c\u00e2bles(RJ45, fibre optique,...) ou par ondes (wifi, bluetooth, GSM, ...). M\u00eame les continents sont r\u00e9li\u00e9s entre eux par d'\u00e9normes c\u00e2bles sous-marins....", "title": "Un r\u00e9seau c'est d'abord physique"}, {"location": "term/reseau_term.html#un-exemple-de-reseau-physique", "text": "Le r\u00e9seau Renater Connecteur de savoirs, RENATER, R\u00e9seau National de t\u00e9l\u00e9communications pour la Technologie l\u2019Enseignement et la Recherche, est l\u2019acteur de r\u00e9f\u00e9rence des infrastructures du num\u00e9rique de la communaut\u00e9 enseignement recherche. Constitu\u00e9 en 1993, RENATER est un groupement d\u2019int\u00e9r\u00eat public (GIP) qui assure la ma\u00eetrise d\u2019ouvrage du r\u00e9seau national de communications \u00e9lectroniques pour la technologie, l\u2019enseignement et la recherche. Les membres de RENATER sont le minist\u00e8re de l\u2019\u00c9ducation nationale et de la jeunesse, le minist\u00e8re de l\u2019Enseignement sup\u00e9rieur et de la Recherche, France Universit\u00e9s ainsi que des organismes de recherche, le CNRS, le CEA, Inria, le CNES, l\u2019Inrae, l\u2019Inserm, l\u2019Onera, le Cirad, l\u2019IRD et le BRGM. \u00c0 faire: Tapez windows + R puis cmd dans la fen\u00eatre qui s'ouvre. Tapez tracert www.ac-bordeaux.fr pour conna\u00eetre la route qui conduit de votre ordinateur \u00e0 celui qui h\u00e9berge le site du rectorat. Vous verrez appara\u00eetre le r\u00e9seau Renater. Choississez un autre site pour constater que les ordinateurs du lyc\u00e9e (Education Nationale...) sont tous reli\u00e9s (via le serveur) au r\u00e9seau RENATER. Attention, si vous effectuez la m\u00eame manipulation de chez vous, ce r\u00e9seau d\u00e9di\u00e9 n'appara\u00eetra \u00e9videmment pas!", "title": "Un exemple de r\u00e9seau physique"}, {"location": "term/reseau_term.html#les-objets-dun-reseau", "text": "Le Hub (concentrateur): Permet de relier plusieurs machines entre elles. Compl\u00e9tement d\u00e9suet car il ne g\u00e8re pas les transmissions et les collisions. Le Switch(commutateur): Permet de relier plusieurs machines entre elles avec canal d\u00e9di\u00e9 pour chaque destinataire choisi... La passerelle et le routeur: Votre box internet joue bien des r\u00f4les: en particulier celui de routeur et de passerelle, reliant votre r\u00e9seau priv\u00e9 au r\u00e9seau internet via les routeurs de votre FAI. Mais dans des r\u00e9seaux d'entreprises, ce n'est pas la m\u00eame histoire! Ci-apr\u00e8s, une photo des routeurs et switch d'un r\u00e9seau du lyc\u00e9e avec \u00e0 c\u00f4t\u00e9 le serveur: 4. Les connectiques On ne saurait \u00e9voquer les r\u00e9seaux physiques sans parler des c\u00e2bles ou prises RJ45 omnipr\u00e9sents: il existe d'autres types de connectiques notamment pour la fibre ou le t\u00e9l\u00e9phone... \u00c0 retenir Les switch sont des hub intelligents qui g\u00e9rent les informations qu'ils recoivent: ils ne transmettent qu'\u00e0 la machine concern\u00e9e par le message contrairement aux hub qui diffusent largement. Les hub ne sont plus utilis\u00e9s de nos jours dans les r\u00e9seaux modernes.", "title": "Les objets d'un r\u00e9seau"}, {"location": "term/reseau_term.html#un-reseau-cest-ensuite-logiciel-et-protocolaire", "text": "Pour que deux ordinateurs puissent communiquer entre eux, il faut un ensemble de r\u00e8gles pr\u00e9-d\u00e9finies: comment d\u00e9buter le communication? comment envoyer au bon destinataire ? comment s'assurer que le message a \u00e9t\u00e9 bien envoy\u00e9? ... L'ensemble de ces r\u00e8gles est appel\u00e9 protocole . \u00c0 savoir: Un protocole d\u00e9finit de mani\u00e8re formelle et interop\u00e9rable l'\u00e9change des informations entre ordinateurs. Revenons \u00e0 notre questionnement initial: je prends une photo et je l'envoie \u00e0 mon ami. Que se passe t-il r\u00e9ellement? Le sch\u00e9ma suivant illustre les diff\u00e9rentes \u00e9tapes de la communication: Col Couche Son r\u00f4le La couche application Elle g\u00e9n\u00e8re des donn\u00e9es : ici une image et certainement des m\u00e9tadonn\u00e9es(qui envoie? \u00e0 quelle heure?,...) et les livre \u00e0 la couche suivante. La couche transport Elle d\u00e9coupe les donn\u00e9es en petits paquets(1500octets environ...), les taggent par le port de l'application \u00e0 l'origine de la communication puis les identifie par des informations chiffr\u00e9es permettant dans le cas de TCP de reconstituer les donn\u00e9es en bout de cha\u00eene d'une part et de savoir si il manque des paquets d'autre part(voire illustration suivante) La couche r\u00e9seau Elle re\u00e7oit les paquets de la couche transport et appose les adresses IP de la source et de la destination sans se pr\u00e9ocupper de leur contenu La couche liaison Elle re\u00e7oit les donn\u00e9es de la couche r\u00e9seau et appose les adresses MAC de la source et de la destination {: .tabnsi_long :} Col Le mod\u00e8le est con\u00e7u en couche: chaque couche a son propre r\u00f4le et fournit des donn\u00e9es \u00e0 la couche suivante. Je vous popose ici une version simplifi\u00e9e mais dans la r\u00e9alit\u00e9 c'est beaucoup plus \u00e9labor\u00e9... Le mod\u00e8le OSI(7 couches) et sa version simplifi\u00e9e(4 couches) Un protocole de la couche de liaison : ETHERNET Invent\u00e9 au d\u00e9but des ann\u00e9es 70 par Xerox puis sp\u00e9cifi\u00e9 dans les ann\u00e9es 80, il propose plusieurs variantes. C'est la premi\u00e8re technologie LAN grand public pour faire communiquer des ordinateurs rattach\u00e9s \u00e0 un m\u00eame \u00ab \u00e9ther \u00bb, c'est \u00e0 dire, un milieu passif capable de transf\u00e9rer des donn\u00e9es, comme un c\u00e2ble coaxial De la th\u00e9orie \u00e0 la pratique: observez la frame captur\u00e9e par Wireshark: On retrouve: le mod\u00e8le en couche la couche Ethernet avec les adresses MAC (maquill\u00e9es ici) la couche IP qui fournit les adresses IP la couche Transport qui donne le port source de l'application (64423) vers le port destination (80) avec des informations la couche Application (http) C'est mon ordinateur( automatiquement) qui fait une requ\u00eate http sur un serveur d' avast (anti-virus...) \u00c0 savoir Une adresse IP est une adresse logicielle attribu\u00e9e en g\u00e9n\u00e9ral automatiquement par un service DHCP. Une adresse MAC est une adresse physique , celle de la carte r\u00e9seau d'un ordinateur, d'un routeur. La correspondance entre les deux adresses se fait par le protocole ARP. Dans ce qui suit on se propose d'\u00e9tudier plus pr\u00e9cis\u00e9ment les deux protocoles populaires: TCP et IP.", "title": "Un r\u00e9seau c'est ensuite logiciel et protocolaire"}, {"location": "term/reseau_term.html#la-couche-transport", "text": "La couche Transport repose sur les protocoles TCP voire UDP: elle assure la communications de bout en bout entre les programmes. Les segments sont taggu\u00e9s avec de nombreuses informations dont le port de l'application qui a demand\u00e9 ses services( par exemple,le protocole https de la couche application utilise le port 443...). Le protocole TCP est dit en mode connect\u00e9 et fiable : avant toute transmission de segment, le protocle commence par une poign\u00e9e de main (acknowledgement) entre les deux acteurs de la communication( source(host1) et destination(host2)) les segments envoy\u00e9s sont num\u00e9rot\u00e9s de telle sorte que le destinataire sait si tous les segments ont \u00e9t\u00e9 envoy\u00e9s et redemandent la transmission le cas \u00e9ch\u00e9ant. Donc \u00e0 chaque envoi, il y a trois \u00e9tapes illustr\u00e9es par la figure ci-dessous. Le protocole UDP ne pr\u00e9sente pas ses avantages: il envoie les segments sans se soucier de leur destin... Par exemple, dans le cas de la transmission de la voix sur IP, la perte occasionnelle d'un paquet est tol\u00e9rable dans la mesure o\u00f9 il existe des m\u00e9canismes de substitution des donn\u00e9es manquantes, par contre la rapidit\u00e9 de transmission est un crit\u00e8re primordial pour la qualit\u00e9 d'\u00e9coute. \u00c0 retenir: Le protocole TCP est beaucoup plus fiable mais moins rapide que le protocole UDP Des outils d'analyses de r\u00e9seau comme Wireshark permet de visualiser dans le d\u00e9tails les \u00e9changes r\u00e9alis\u00e9s : !](img/wireshark.png){width=100% align= center} Les croix rouges mettent en avant la poign\u00e9e de main entre la source(mon ordi) et la destination (le serveur qui h\u00e9berge le site www.lequipe.fr ) dans le protocole TCP . Remarquez en vert, la requ\u00eates DNS et sa r\u00e9ponse...", "title": "La couche Transport"}, {"location": "term/reseau_term.html#la-couche-reseau", "text": "Cette couche repose sur le protocole IP qui assure la communication de bout en bout entre deux machines qui ne sont pas connect\u00e9s directement, c'est-\u00e0-dire situ\u00e9es dans des r\u00e9seaux diff\u00e9rents. Elle achemine les paquets (ou datagrammes) \u00e0 travers le r\u00e9seau Internet sans garantie (la garantie \u00e9tant asur\u00e9e par TCP...) mais avec robustesse(d\u00e9faillance d'un routeur). Le protocole repose sur un adressage logique des machines dans le r\u00e9seau ind\u00e9pendamment du r\u00e9seau physique( Ethernet par exemple...): c'est l'adresse IP . \u00c0 savoir: Il y a \\(2^{32}\\) adresses IP possibles, \u00e9puis\u00e9es d\u00e8s 2011! On se dirige petit \u00e0 petit vers les adresses IPv6(128bits) Il y a historiquement cinq classes d'adresses: certaines sont priv\u00e9es, d'autres publiques. Elles sont caract\u00e9ris\u00e9es par leur NetId et leur HostId : plus le NetId est petit plus le r\u00e9seau est grand! Classe NetId HostId Nombre de clients possibles A 8 24 \\(2^{24}-2\\) B 16 16 \\(2^{16}-2\\) C 24 8 \\(2^{8}-2\\) {: .tabnsi :} Cette notion est un peu d\u00e9suette car manque de souplessse mais m\u00e9rite d'\u00eatre connue... Il existe aussi les classe D et E peu utilis\u00e9es en ce qui nous concerne... Pourquoi -2? Deux adresses sont g\u00e9n\u00e9ralement r\u00e9serv\u00e9es: celle du r\u00e9seau dont le NetId est \u00e0 0 et celle du broadcast dont le NetId est \u00e0 255 Une adresse de broadcast sert \u00e0 diffuser \u00e0 l'ensemble des ordinateurs qui constituent le r\u00e9seau. Mais comment reconna\u00eetre NetId et HostId ? C'est le r\u00f4le du masque de sous-r\u00e9seau Le masque de sous-r\u00e9seau est une adresse IP comme par exemple 255.255.255.0 qui en binaire donne l'horrible \u00e9criture : 11111111.11111111.11111111.00000000 ! Un ET logique entre le masque et une adresse IP permet de conna\u00eetre le NetId donc le HostId de la machine: On utilise ici l'adresse d\u00e9cimale point\u00e9e (CIDR) indiquant le nombre de bits \u00e0 1 dans l'adresse du masque de sous r\u00e9seau. Exemple Si l'adresse d'une machine est 192.168.1.121/19 cela signifie que l'adresse du masque est, en binaire 11111111.11111111.11100000.00000000 ( 19 premiers bits \u00e0 1 et le reste \u00e0 0) soit en d\u00e9cimale, 255.255.224.0 . Certaines adresses sont vou\u00e9es \u00e0 des utilisations particuli\u00e8res: Exemple L'adresse 127.0.0.1 (ou simplement ::1 ) est la boucle locale ou simplement localhost . On l'utilise par exemple si sur la m\u00eame machine, vous installez un serveur Web et un client. En guise de conclusion, une vid\u00e9o de notre cher Charles Poulmaire sur les r\u00e9seaux informatiques: ici Elle permet de bien comprendre le principe d' encapsulation de chaque couche et introduit parfaitement le cours sur le routage des paquets sur un r\u00e9seau.", "title": "La couche R\u00e9seau"}, {"location": "term/routage.html", "text": "Ce cours est largement inspir\u00e9 de celui de mon coll\u00e8gue Gilles Lassus que je remercie infiniment. Introduction \u00b6 En classe de premi\u00e8re, on a pu observer le r\u00f4le des protocoles TCP/IP qui g\u00e9n\u00e9rent des paquets num\u00e9rot\u00e9s et identifiables dans un r\u00e9seau. La question centrale \u00e0 laquelle \u00e0 d\u00e9j\u00e0 r\u00e9pondu Charles Poulmaire ( ici ) est: Question Comment transf\u00e9rer des donn\u00e9es d'un ordinateur source vers un ordinateur destination qui ne sont pas dans le m\u00eame r\u00e9seau( au sens logiciel)?. Rappelons que c'est le masque de sous-r\u00e9seau qui permet de savoir si deux h\u00f4tes dont on conna\u00eet les adresses IP sont dans le m\u00eame r\u00e9seau logiciel... Protocoles de routage \u00b6 Notions essentielles : Lorsqu'une machine A, d'adresse IP_A veut discuter avec une machine B, d'adresse IP_B : La machine A calcule (gr\u00e2ce au masque de sous-r\u00e9seau) si B est dans le m\u00eame sous-r\u00e9seau qu'elle, ou pas. Si oui, elle peut donc conna\u00eetre l'adresse MAC de la carte r\u00e9seau de la machine B (soit elle la poss\u00e8de d\u00e9j\u00e0 dans sa table ARP, soit elle la demande en envoyant un message de broadcast \u00e0 tout le sous-r\u00e9seau : \u00abqui poss\u00e8de cette adresse IP_B ?\u00bb). Elle envoie donc dans le sous-r\u00e9seau une trame ayant pour ent\u00eate l'adresse MAC de B : le switch lit cette trame, sait sur quel port est branch\u00e9 la machine B et lui envoie sp\u00e9cifiquement donc le message. Si B n'est pas dans le m\u00eame sous-r\u00e9seau que A, A mettra en ent\u00eate de sa trame l'adresse MAC de la carte r\u00e9seau du routeur, qui joue le r\u00f4le de passerelle. Le routeur va ouvrir la trame et va observer l'IP_B, \u00e0 qui il doit remettre ce message. C'est maintenant que vont intervenir les protocoles de routage : est-ce que B est dans le m\u00eame sous-r\u00e9seau que le routeur ? est-ce que B est dans un autre sous-r\u00e9seau connu du routeur ? est-ce que B est totalement inconnu du routeur ? Ces questions trouveront des r\u00e9ponses gr\u00e2ce \u00e0 la table de routage du routeur. Tables de routage \u00b6 Les tables de routage sont des informations stock\u00e9es dans le routeur permettant d'aiguiller intelligemment les donn\u00e9es qui lui sont transmises. Dans le r\u00e9seau ci-dessus, si l'ordinateur d'adresse 192.168.0.5 veut interroger le serveur 10.7.3.8 : l'adresse 10.7.3.8 n'\u00e9tant pas dans le sous-r\u00e9seau F (d'adresse 192.168.0.0 / 24 ), la requ\u00eate est confi\u00e9e au routeur via son adresse passerelle dans le r\u00e9seau F (ici 192.168.0.254 ). le routeur observe si l'IP recherch\u00e9e appartient \u00e0 un autre des sous-r\u00e9seaux auquel il est connect\u00e9. Ici, l'IP recherch\u00e9e 10.7.3.8 n'appartient ni au sous-r\u00e9seau A ou E. le routeur va donc regarder dans sa table de routage l'adresse passerelle d'un autre routeur vers qui elle doit rediriger les donn\u00e9es. Si le sous-r\u00e9seau C fait partie de sa table de routage, le routeur R1 saura alors que le meilleur chemin est (par exemple) de confier les donn\u00e9es au routeur R3. si le sous-r\u00e9seau C ne fait pas partie de la table de routage, le routeur R1 va alors le rediriger vers une route \u00abpar d\u00e9faut\u00bb (que l'on peut assimiler au panneau \u00abtoutes directions\u00bb sur les panneaux de signalisation). Par exemple, la table de routage du routeur R1 pourrait \u00eatre : Destination Passerelle 192.168.0.0 /24 192.168.0.254 172.17.1.0 /24 172.17.1.254 10.0.5.0 /24 10.0.5.152 10.5.2.0 /24 172.17.1.254 10.7.3.0 /24 10.0.5.135 Comment sont construites les tables de routage ? Soit \u00e0 la main par l'administrateur r\u00e9seau, quand le r\u00e9seau est petit : on parle alors de table statique . Soit de mani\u00e8re dynamique : les r\u00e9seaux s'envoient eux-m\u00eames des informations permettant de mettre \u00e0 jour leurs tables de routages respectives. Des algorithmes de d\u00e9termination de meilleur chemin sont alors utilis\u00e9s : nous allons en d\u00e9couvrir deux, le protocole RIP et le protocole OSPF. Le routage dynamique \u00b6 Dans le routage statique, les tables de routage sont fixes. Dans le routage dynamique , elles sont r\u00e9guli\u00e8rement mises \u00e0 jour en fonction de l'\u00e9tat du r\u00e9seau. On pr\u00e9sente ici deux protocoles aux avantages diff\u00e9rents. Le protocole RIP \u00b6 Le Routing Information Protocol est bas\u00e9 sur l'\u00e9change (toutes les 30 secondes) des tables de routage de chaque routeur. Au d\u00e9but, chaque routeur ne conna\u00eet que les r\u00e9seaux auquel il est directement connect\u00e9, associ\u00e9 \u00e0 la distance 1. Ensuite, chaque routeur re\u00e7oit p\u00e9riodiquement la table des r\u00e9seaux auquel il est connect\u00e9, suivant les r\u00e8gles ci-dessous : les r\u00e8gles du protocole RIP s'il d\u00e9couvre une route vers un nouveau r\u00e9seau inconnu, il l'ajoute \u00e0 sa table en augmentant de 1 la distance annonc\u00e9e par le routeur qui lui a transmis sa table. s'il d\u00e9couvre une route vers un r\u00e9seau connu mais plus courte (en rajoutant 1) que celle qu'il poss\u00e8de dans sa table, il actualise sa table. s'il d\u00e9couvre une route vers un r\u00e9seau connu mais plus longue que celle qu'il poss\u00e8de dans sa table, il ignore cette route. s'il re\u00e7oit une route vers un r\u00e9seau connu en provenance d'un routeur d\u00e9j\u00e0 existant dans sa table, s'il met \u00e0 jour sa table car la topologie du r\u00e9seau a \u00e9t\u00e9 modifi\u00e9e. si le r\u00e9seau n'\u00e9volue pas (panne ou ajout de nouveau mat\u00e9riel), les tables de routage convergent vers une valeur stable. Elles n'\u00e9voluent plus. si un routeur ne re\u00e7oit pas pendant 3 minutes d'information de la part d'un routeur qui lui avait auparavant communiqu\u00e9 sa table de routage, ce routeur est consid\u00e9r\u00e9 comme en panne, et toutes les routes passant par lui sont affect\u00e9es de la distance infinie : 16. Remarques et inconv\u00e9nients: Le protocole RIP n'admet qu'une distance maximale \u00e9gale \u00e0 15 (ceci explique que 16 soit consid\u00e9r\u00e9 comme la distance infinie), ce qui le limite aux r\u00e9seaux de petite taille. Chaque routeur n'a jamais connaissance de la topologie du r\u00e9seau tout entier : il ne le conna\u00eet que par ce que les autres routeurs lui ont racont\u00e9. On dit que ce protocole de routage est du routing by rumor . La m\u00e9trique utilis\u00e9e (le nombre de sauts) ne tient pas compte de la qualit\u00e9 de la liaison, contrairement au protocole OSPF. Le protocole OSPF \u00b6 OSPF : Open Shortest Path First Un inconv\u00e9nient majeur du protocole pr\u00e9c\u00e9dent est la non-prise en compte de la bande passante reliant les routeurs. principe fondamental du protocole OSPF Le chemin le plus rapide n'est pas forc\u00e9ment le plus court. En gris, le chemin RIP. En bleu, l'OSPF. Dans le protocole OSPF, les tables de routage vont prendre en consid\u00e9ration la vitesse de communication entre les routeurs. Dans une premi\u00e8re phase d'initialisation, chaque routeur va acqu\u00e9rir (par succession de messages envoy\u00e9s et re\u00e7us) la connaissance totale du r\u00e9seau (diff\u00e9rence fondamentale avec RIP) et de la qualit\u00e9 technique de la liaison entre chaque routeur. Les diff\u00e9rents types de liaison et leur co\u00fbt \u00b6 On peut, approximativement, classer les types de liaison suivant ce tableau de d\u00e9bits th\u00e9oriques : Technologie BP descendante BP montante Modem 56 kbit/s 48 kbit/s Bluetooth 3 Mbit/s 3 Mbit/s Ethernet 10 Mbit/s 10 Mbit/s Wi-Fi 10 Mbit/s ~ 10 Gbits/s 10 Mbit/s ~ 10 Gbits/s ADSL 13 Mbit/s 1 Mbit/s 4G 100 Mbit/s 50 Mbit/s Satellite 50 Mbit/s 1 Mbit/s Fast Ethernet 100 Mbit/s 100 Mbit/s FFTH (fibre) 10 Gbit/s 10 Gbit/s 5G 20 Gbit/s 10 Gbit/s L'id\u00e9e du protocole OSPF est de pond\u00e9rer chaque trajet entre routeurs (comptant simplement pour \u00ab1\u00bb dans le protocole RIP) par une valeur de co\u00fbt inversement proportionnelle au d\u00e9bit de transfert. Par exemple, si le d\u00e9bit \\(d\\) est exprim\u00e9 en bits/s, on peut calculer le co\u00fbt de chaque liaison par la formule : \\[ \\text{co\u00fbt} = \\frac{10^8}{d} \\] Cette formule de calcul peut \u00eatre diff\u00e9rente suivant les exercices, et sera syst\u00e9matiquement redonn\u00e9e. N\u00e9anmoins la valeur \\(d\\) sera toujours au d\u00e9nominateur, pour assurer la proportionnalit\u00e9 inverse du d\u00e9bit. Avec cette convention, un route entre deux routeurs reli\u00e9s en Fast Ethernet (100 Mbits/s) aura a un poids de 1, une liaison satellite de 20 Mbits/s aura un poids de 5, etc. Exemple \u00b6 Reprenons le r\u00e9seau suivant : et simplifions-le en ne gardant que les liens entre routeurs, en indiquant leur d\u00e9bit : Notre r\u00e9seau est devenu un graphe . Nous allons pond\u00e9rer ses ar\u00eates avec la fonction co\u00fbt introduite pr\u00e9c\u00e9demment. L'unit\u00e9 \u00e9tant le Mbit/s, l'ar\u00eate entre R1 et R3 aura un poids de \\(\\frac{100}{20}=5\\) . Le graphe pond\u00e9r\u00e9 est donc : Le chemin le plus rapide pour aller de l'ordinateur au serveur est donc R1-R2-R4, et non plus R1-R3 comme l'aurait indiqu\u00e9 le protocole RIP. Trouver le plus court chemin dans un graphe pond\u00e9r\u00e9 \u00b6 L'exemple pr\u00e9c\u00e9dent \u00e9tait tr\u00e8s simple et de solution intuitive. Dans le cas d'un graphe pond\u00e9r\u00e9 complexe, existe-t-il un algorithme de d\u00e9termination du plus court chemin d'un point \u00e0 un autre ? La r\u00e9ponse est oui , depuis la d\u00e9couverte en 1959 par Edsger Dijkstra de l'algorithme qui porte son nom, l'algorithme de Dijkstra . Pour le comprendre, vous pouvez regarder la vid\u00e9o suivante : Cet algorithme, ici ex\u00e9cut\u00e9 de mani\u00e8re manuelle, est bien s\u00fbr programmable. Et c'est donc gr\u00e2ce \u00e0 lui que chaque routeur calcule la route la plus rapide pour acheminer les donn\u00e9es qu'il re\u00e7oit. Exercice d'application de l'algorithme de Dijkstra Donner le plus court chemin pour aller de E \u00e0 F dans le graphe ci-dessous : correction E A B C D F Choix 0 -- -- -- -- -- E(0) . 30vE -- 40vE 10vE -- D(10) . 20vD -- 40vE . 80vD A(20) . . 60vA 30vA . 80vD C(30) . . 50vC . . 80vD B(50) . . . . . 70vB F(70) Le meilleur trajet est donc E-D-A-C-B-F. Attention ce trajet correspond \u00e0 la colonne choix (dans l'ordre) mais c'est un hasard. Exercice \u00b6 (extrait du sujet 0) On consid\u00e8re le r\u00e9seau suivant : On rappelle que le co\u00fbt d\u2019une liaison est donn\u00e9 par la formule suivante : \\[ \\text{co\u00fbt} = \\frac{10^8}{d} \\] Question 1 V\u00e9rifier que le co\u00fbt de la liaison entre les routeurs A et B est 0,01. La liaison entre le routeur B et D a un co\u00fbt de 5. Quel est le d\u00e9bit de cette liaison ? Question 2 Le routeur A doit transmettre un message au routeur G, en empruntant le chemin dont la somme des co\u00fbts sera la plus petite possible. D\u00e9terminer le chemin parcouru. On indiquera le raisonnement utilis\u00e9. Correction Q1 1. \\(\\text{co\u00fbt} = \\dfrac{10^8}{10 \\times 10^9}= \\dfrac{10^8}{10^{10}}= 10^{-2}=0,01\\) 2. \\(5=\\dfrac{10^8}{d}\\) donc \\(d=\\dfrac{10^8}{5}=20 \\times 10^6\\) = 20 Mb/s Q2 Le graphe pond\u00e9r\u00e9 par les co\u00fbts est : On peut y deviner le chemin de co\u00fbt minimal entre A et G, qui est A-D-E-G (co\u00fbt 1,011). Pour le justifier, on peut (non obligatoire) faire un algorithme de Dijkstra :", "title": "Routage"}, {"location": "term/routage.html#introduction", "text": "En classe de premi\u00e8re, on a pu observer le r\u00f4le des protocoles TCP/IP qui g\u00e9n\u00e9rent des paquets num\u00e9rot\u00e9s et identifiables dans un r\u00e9seau. La question centrale \u00e0 laquelle \u00e0 d\u00e9j\u00e0 r\u00e9pondu Charles Poulmaire ( ici ) est: Question Comment transf\u00e9rer des donn\u00e9es d'un ordinateur source vers un ordinateur destination qui ne sont pas dans le m\u00eame r\u00e9seau( au sens logiciel)?. Rappelons que c'est le masque de sous-r\u00e9seau qui permet de savoir si deux h\u00f4tes dont on conna\u00eet les adresses IP sont dans le m\u00eame r\u00e9seau logiciel...", "title": "Introduction"}, {"location": "term/routage.html#protocoles-de-routage", "text": "Notions essentielles : Lorsqu'une machine A, d'adresse IP_A veut discuter avec une machine B, d'adresse IP_B : La machine A calcule (gr\u00e2ce au masque de sous-r\u00e9seau) si B est dans le m\u00eame sous-r\u00e9seau qu'elle, ou pas. Si oui, elle peut donc conna\u00eetre l'adresse MAC de la carte r\u00e9seau de la machine B (soit elle la poss\u00e8de d\u00e9j\u00e0 dans sa table ARP, soit elle la demande en envoyant un message de broadcast \u00e0 tout le sous-r\u00e9seau : \u00abqui poss\u00e8de cette adresse IP_B ?\u00bb). Elle envoie donc dans le sous-r\u00e9seau une trame ayant pour ent\u00eate l'adresse MAC de B : le switch lit cette trame, sait sur quel port est branch\u00e9 la machine B et lui envoie sp\u00e9cifiquement donc le message. Si B n'est pas dans le m\u00eame sous-r\u00e9seau que A, A mettra en ent\u00eate de sa trame l'adresse MAC de la carte r\u00e9seau du routeur, qui joue le r\u00f4le de passerelle. Le routeur va ouvrir la trame et va observer l'IP_B, \u00e0 qui il doit remettre ce message. C'est maintenant que vont intervenir les protocoles de routage : est-ce que B est dans le m\u00eame sous-r\u00e9seau que le routeur ? est-ce que B est dans un autre sous-r\u00e9seau connu du routeur ? est-ce que B est totalement inconnu du routeur ? Ces questions trouveront des r\u00e9ponses gr\u00e2ce \u00e0 la table de routage du routeur.", "title": "Protocoles de routage"}, {"location": "term/routage.html#tables-de-routage", "text": "Les tables de routage sont des informations stock\u00e9es dans le routeur permettant d'aiguiller intelligemment les donn\u00e9es qui lui sont transmises. Dans le r\u00e9seau ci-dessus, si l'ordinateur d'adresse 192.168.0.5 veut interroger le serveur 10.7.3.8 : l'adresse 10.7.3.8 n'\u00e9tant pas dans le sous-r\u00e9seau F (d'adresse 192.168.0.0 / 24 ), la requ\u00eate est confi\u00e9e au routeur via son adresse passerelle dans le r\u00e9seau F (ici 192.168.0.254 ). le routeur observe si l'IP recherch\u00e9e appartient \u00e0 un autre des sous-r\u00e9seaux auquel il est connect\u00e9. Ici, l'IP recherch\u00e9e 10.7.3.8 n'appartient ni au sous-r\u00e9seau A ou E. le routeur va donc regarder dans sa table de routage l'adresse passerelle d'un autre routeur vers qui elle doit rediriger les donn\u00e9es. Si le sous-r\u00e9seau C fait partie de sa table de routage, le routeur R1 saura alors que le meilleur chemin est (par exemple) de confier les donn\u00e9es au routeur R3. si le sous-r\u00e9seau C ne fait pas partie de la table de routage, le routeur R1 va alors le rediriger vers une route \u00abpar d\u00e9faut\u00bb (que l'on peut assimiler au panneau \u00abtoutes directions\u00bb sur les panneaux de signalisation). Par exemple, la table de routage du routeur R1 pourrait \u00eatre : Destination Passerelle 192.168.0.0 /24 192.168.0.254 172.17.1.0 /24 172.17.1.254 10.0.5.0 /24 10.0.5.152 10.5.2.0 /24 172.17.1.254 10.7.3.0 /24 10.0.5.135 Comment sont construites les tables de routage ? Soit \u00e0 la main par l'administrateur r\u00e9seau, quand le r\u00e9seau est petit : on parle alors de table statique . Soit de mani\u00e8re dynamique : les r\u00e9seaux s'envoient eux-m\u00eames des informations permettant de mettre \u00e0 jour leurs tables de routages respectives. Des algorithmes de d\u00e9termination de meilleur chemin sont alors utilis\u00e9s : nous allons en d\u00e9couvrir deux, le protocole RIP et le protocole OSPF.", "title": "Tables de routage"}, {"location": "term/routage.html#le-routage-dynamique", "text": "Dans le routage statique, les tables de routage sont fixes. Dans le routage dynamique , elles sont r\u00e9guli\u00e8rement mises \u00e0 jour en fonction de l'\u00e9tat du r\u00e9seau. On pr\u00e9sente ici deux protocoles aux avantages diff\u00e9rents.", "title": "Le routage dynamique"}, {"location": "term/routage.html#le-protocole-rip", "text": "Le Routing Information Protocol est bas\u00e9 sur l'\u00e9change (toutes les 30 secondes) des tables de routage de chaque routeur. Au d\u00e9but, chaque routeur ne conna\u00eet que les r\u00e9seaux auquel il est directement connect\u00e9, associ\u00e9 \u00e0 la distance 1. Ensuite, chaque routeur re\u00e7oit p\u00e9riodiquement la table des r\u00e9seaux auquel il est connect\u00e9, suivant les r\u00e8gles ci-dessous : les r\u00e8gles du protocole RIP s'il d\u00e9couvre une route vers un nouveau r\u00e9seau inconnu, il l'ajoute \u00e0 sa table en augmentant de 1 la distance annonc\u00e9e par le routeur qui lui a transmis sa table. s'il d\u00e9couvre une route vers un r\u00e9seau connu mais plus courte (en rajoutant 1) que celle qu'il poss\u00e8de dans sa table, il actualise sa table. s'il d\u00e9couvre une route vers un r\u00e9seau connu mais plus longue que celle qu'il poss\u00e8de dans sa table, il ignore cette route. s'il re\u00e7oit une route vers un r\u00e9seau connu en provenance d'un routeur d\u00e9j\u00e0 existant dans sa table, s'il met \u00e0 jour sa table car la topologie du r\u00e9seau a \u00e9t\u00e9 modifi\u00e9e. si le r\u00e9seau n'\u00e9volue pas (panne ou ajout de nouveau mat\u00e9riel), les tables de routage convergent vers une valeur stable. Elles n'\u00e9voluent plus. si un routeur ne re\u00e7oit pas pendant 3 minutes d'information de la part d'un routeur qui lui avait auparavant communiqu\u00e9 sa table de routage, ce routeur est consid\u00e9r\u00e9 comme en panne, et toutes les routes passant par lui sont affect\u00e9es de la distance infinie : 16. Remarques et inconv\u00e9nients: Le protocole RIP n'admet qu'une distance maximale \u00e9gale \u00e0 15 (ceci explique que 16 soit consid\u00e9r\u00e9 comme la distance infinie), ce qui le limite aux r\u00e9seaux de petite taille. Chaque routeur n'a jamais connaissance de la topologie du r\u00e9seau tout entier : il ne le conna\u00eet que par ce que les autres routeurs lui ont racont\u00e9. On dit que ce protocole de routage est du routing by rumor . La m\u00e9trique utilis\u00e9e (le nombre de sauts) ne tient pas compte de la qualit\u00e9 de la liaison, contrairement au protocole OSPF.", "title": "Le protocole RIP"}, {"location": "term/routage.html#le-protocole-ospf", "text": "OSPF : Open Shortest Path First Un inconv\u00e9nient majeur du protocole pr\u00e9c\u00e9dent est la non-prise en compte de la bande passante reliant les routeurs. principe fondamental du protocole OSPF Le chemin le plus rapide n'est pas forc\u00e9ment le plus court. En gris, le chemin RIP. En bleu, l'OSPF. Dans le protocole OSPF, les tables de routage vont prendre en consid\u00e9ration la vitesse de communication entre les routeurs. Dans une premi\u00e8re phase d'initialisation, chaque routeur va acqu\u00e9rir (par succession de messages envoy\u00e9s et re\u00e7us) la connaissance totale du r\u00e9seau (diff\u00e9rence fondamentale avec RIP) et de la qualit\u00e9 technique de la liaison entre chaque routeur.", "title": "Le protocole OSPF"}, {"location": "term/routage.html#les-differents-types-de-liaison-et-leur-cout", "text": "On peut, approximativement, classer les types de liaison suivant ce tableau de d\u00e9bits th\u00e9oriques : Technologie BP descendante BP montante Modem 56 kbit/s 48 kbit/s Bluetooth 3 Mbit/s 3 Mbit/s Ethernet 10 Mbit/s 10 Mbit/s Wi-Fi 10 Mbit/s ~ 10 Gbits/s 10 Mbit/s ~ 10 Gbits/s ADSL 13 Mbit/s 1 Mbit/s 4G 100 Mbit/s 50 Mbit/s Satellite 50 Mbit/s 1 Mbit/s Fast Ethernet 100 Mbit/s 100 Mbit/s FFTH (fibre) 10 Gbit/s 10 Gbit/s 5G 20 Gbit/s 10 Gbit/s L'id\u00e9e du protocole OSPF est de pond\u00e9rer chaque trajet entre routeurs (comptant simplement pour \u00ab1\u00bb dans le protocole RIP) par une valeur de co\u00fbt inversement proportionnelle au d\u00e9bit de transfert. Par exemple, si le d\u00e9bit \\(d\\) est exprim\u00e9 en bits/s, on peut calculer le co\u00fbt de chaque liaison par la formule : \\[ \\text{co\u00fbt} = \\frac{10^8}{d} \\] Cette formule de calcul peut \u00eatre diff\u00e9rente suivant les exercices, et sera syst\u00e9matiquement redonn\u00e9e. N\u00e9anmoins la valeur \\(d\\) sera toujours au d\u00e9nominateur, pour assurer la proportionnalit\u00e9 inverse du d\u00e9bit. Avec cette convention, un route entre deux routeurs reli\u00e9s en Fast Ethernet (100 Mbits/s) aura a un poids de 1, une liaison satellite de 20 Mbits/s aura un poids de 5, etc.", "title": "Les diff\u00e9rents types de liaison et leur co\u00fbt"}, {"location": "term/routage.html#exemple", "text": "Reprenons le r\u00e9seau suivant : et simplifions-le en ne gardant que les liens entre routeurs, en indiquant leur d\u00e9bit : Notre r\u00e9seau est devenu un graphe . Nous allons pond\u00e9rer ses ar\u00eates avec la fonction co\u00fbt introduite pr\u00e9c\u00e9demment. L'unit\u00e9 \u00e9tant le Mbit/s, l'ar\u00eate entre R1 et R3 aura un poids de \\(\\frac{100}{20}=5\\) . Le graphe pond\u00e9r\u00e9 est donc : Le chemin le plus rapide pour aller de l'ordinateur au serveur est donc R1-R2-R4, et non plus R1-R3 comme l'aurait indiqu\u00e9 le protocole RIP.", "title": "Exemple"}, {"location": "term/routage.html#trouver-le-plus-court-chemin-dans-un-graphe-pondere", "text": "L'exemple pr\u00e9c\u00e9dent \u00e9tait tr\u00e8s simple et de solution intuitive. Dans le cas d'un graphe pond\u00e9r\u00e9 complexe, existe-t-il un algorithme de d\u00e9termination du plus court chemin d'un point \u00e0 un autre ? La r\u00e9ponse est oui , depuis la d\u00e9couverte en 1959 par Edsger Dijkstra de l'algorithme qui porte son nom, l'algorithme de Dijkstra . Pour le comprendre, vous pouvez regarder la vid\u00e9o suivante : Cet algorithme, ici ex\u00e9cut\u00e9 de mani\u00e8re manuelle, est bien s\u00fbr programmable. Et c'est donc gr\u00e2ce \u00e0 lui que chaque routeur calcule la route la plus rapide pour acheminer les donn\u00e9es qu'il re\u00e7oit. Exercice d'application de l'algorithme de Dijkstra Donner le plus court chemin pour aller de E \u00e0 F dans le graphe ci-dessous : correction E A B C D F Choix 0 -- -- -- -- -- E(0) . 30vE -- 40vE 10vE -- D(10) . 20vD -- 40vE . 80vD A(20) . . 60vA 30vA . 80vD C(30) . . 50vC . . 80vD B(50) . . . . . 70vB F(70) Le meilleur trajet est donc E-D-A-C-B-F. Attention ce trajet correspond \u00e0 la colonne choix (dans l'ordre) mais c'est un hasard.", "title": "Trouver le plus court chemin dans un graphe pond\u00e9r\u00e9"}, {"location": "term/routage.html#exercice", "text": "(extrait du sujet 0) On consid\u00e8re le r\u00e9seau suivant : On rappelle que le co\u00fbt d\u2019une liaison est donn\u00e9 par la formule suivante : \\[ \\text{co\u00fbt} = \\frac{10^8}{d} \\] Question 1 V\u00e9rifier que le co\u00fbt de la liaison entre les routeurs A et B est 0,01. La liaison entre le routeur B et D a un co\u00fbt de 5. Quel est le d\u00e9bit de cette liaison ? Question 2 Le routeur A doit transmettre un message au routeur G, en empruntant le chemin dont la somme des co\u00fbts sera la plus petite possible. D\u00e9terminer le chemin parcouru. On indiquera le raisonnement utilis\u00e9. Correction Q1 1. \\(\\text{co\u00fbt} = \\dfrac{10^8}{10 \\times 10^9}= \\dfrac{10^8}{10^{10}}= 10^{-2}=0,01\\) 2. \\(5=\\dfrac{10^8}{d}\\) donc \\(d=\\dfrac{10^8}{5}=20 \\times 10^6\\) = 20 Mb/s Q2 Le graphe pond\u00e9r\u00e9 par les co\u00fbts est : On peut y deviner le chemin de co\u00fbt minimal entre A et G, qui est A-D-E-G (co\u00fbt 1,011). Pour le justifier, on peut (non obligatoire) faire un algorithme de Dijkstra :", "title": "Exercice"}, {"location": "term/stalin.html", "text": "Structures de donn\u00e9es lin\u00e9aires \u00b6 Introduction \u00b6 Le programme Python poss\u00e8de un ensemble de types de base et de types structur\u00e9s rencontr\u00e9s en classe de premi\u00e8re: entier ( int ), flottants ( float ), cha\u00eene de caract\u00e8res, tuple, liste ou encore dictionnaires... Nous allons dans ce chapitre d\u00e9finir de nouveaux types abstraits , \u00e0 partir de son interface , qui rassemble l'ensemble des op\u00e9rations qui permettent de d\u00e9finir, de lire ou de modifier ces nouveaux objets. On fera bien la distinction entre interface et impl\u00e9mentation : la premi\u00e8re d\u00e9finit une op\u00e9ration, la seconde la code! Pour une m\u00eame interface, il peut exister plusieurs impl\u00e9mentations comme nous allons le d\u00e9couvrir dans ce chapitre! Les listes \u00b6 Pr\u00e9sentation ! \u00b6 Le type abstrait Liste Une liste est une s\u00e9quence ordonn\u00e9e d'\u00e9l\u00e9ments. Le tableau donne une interface minimale de ce type: Primitives de l'interface Commentaires creer_liste() cr\u00e9e une liste vide est_vide(L) retourne un bool\u00e9en indiquant si la liste est vide inserer(L, elt) ins\u00e9rer l'\u00e9l\u00e9ment elt dans la liste L affiche_tete(L) affiche le premier \u00e9l\u00e9ment de la liste L {: .tabnsi :} Remarquez qu'on ne pr\u00e9cise pas dans la derni\u00e8re instruction o\u00f9 est ins\u00e9r\u00e9 l'\u00e9l\u00e9ment: \u00e0 la fin? au d\u00e9but? On peut enrichir cette interface par de nouvelles primitives comme supprimer(L,e) , afficher_premier_elt(L) ou simplement une op\u00e9rations qui retourne le nombre d'\u00e9l\u00e9ments de cette liste... Comment impl\u00e9menter une liste? \u00b6 Deux choix principaux pour l'impl\u00e9mentation d'une liste: soit par un tableau ( array ) o\u00f9 les \u00e9l\u00e9ments sont cons\u00e9cutifs en m\u00e9moire: dans le langage C, la taille des tableaux est d\u00e9finie pr\u00e9alablement pour allouer la place en m\u00e9moire et faire en sorte que les \u00e9l\u00e9ments soient \u00e0 des adresses voisines. soit par une liste cha\u00een\u00e9e: une liste est alors compos\u00e9e d'une t\u00eate et d'une queue! Les \u00e9l\u00e9ments d'une m\u00eame liste peuvent \u00eatre stock\u00e9s n'importe o\u00f9 dans la m\u00e9moire... Une diff\u00e9rence importante entre ces deux choix : dans un tableau, l\u2019 acc\u00e8s \u00e0 un \u00e9l\u00e9ment par son indice est rapide mais l\u2019 insertion est co\u00fbteuse et c\u2019est le contraire pour les listes cha\u00een\u00e9es ! La cellule (tete, queue) permet de cr\u00e9er ces derni\u00e8res listes! Une premi\u00e8re tentative... \u00b6 Allez soyons fous! Faisons le choix d'impl\u00e9menter une liste cha\u00een\u00e9e par des listes (pr\u00e9cis\u00e9ment par des listes python...)!\ud83e\udd14 Reprenons le tableau enrichi de l'interface sur les listes: Interface Impl\u00e9mentation Primitives de l'interface Commentaires creer_liste_vide() cr\u00e9e une liste vide est_vide(L) retourne un bool\u00e9en indiquant si la liste est vide inserer(L, e) ins\u00e9rer l'\u00e9l\u00e9ment e \u00e0 la t\u00eate de la liste L affiche_tete(L) affiche la t\u00eate de la liste L affiche_queue(L) affiche la queue de la liste L affiche_liste(L) affiche tous les \u00e9l\u00e9ments de la liste def creer_liste_vide (): return [] def est_vide ( L ): return L == [] def inserer ( L , e ): return [ e , L ] def affiche_tete ( L ): if not est_vide ( L ): return L [ 0 ] def affiche_queue ( L ): if not est_vide ( L ): return L [ 1 ] def affiche_liste ( L ): aff = [] while not est_vide ( L ): aff . append ( L [ 0 ]) L = L [ 1 ] return aff On peut alors cr\u00e9er des listes avec les interfaces pr\u00e9c\u00e9dentes: Le code suivant... ... produit la liste cha\u00een\u00e9e suivante! l1 = creer_liste_vide () for i in range ( 4 ): l1 = inserer ( l1 , i ) [3, [2, [1, [0, []]]]] Remarquez que la construction d'une liste cha\u00een\u00e9e est r\u00e9cursive ! Comprenez que Python a sa propre interface pour les listes, celle que vous connaissez habituellement. Une deuxi\u00e8me tentative! \u00b6 Puisque nous cr\u00e9eons de nouveaux objets d\u00e9finis par leur propri\u00e9t\u00e9 et leur m\u00e9thode, la programmation orient\u00e9e objet semble prendre toute sa place ici. L'objet n\u00e9cessaire \u00e0 la construcion de telles listes est d\u00e9finie par la classe Cellule propos\u00e9e ci-dessous: \"\"\" fichier cel.py Impl\u00e9mentation de la classe \u201cCellule\u201d Elle sera utilis\u00e9e pour les listes, les piles et les files. \"\"\" class Cellule () : def __init__ ( self , valeur = None , suivant = None ) : \"\"\" Param\u00e8tres ---------- valeur : type quelconque Description : Une valeur stock\u00e9e dans la cellule suivant : Un autre objet de type \u201cCellule\u201d Description : La cellule qui \u201csuit\u201d cette cellule selon l\u2019ordre d\u00e9fini par la structure. ---------- Cr\u00e9e une cellule avec une valeur et l\u2019adresse de la cellule qui la suit. \"\"\" self . valeur = valeur self . suivant = suivant Les attributs sont optionnels par d\u00e9faut. Voici maintenant une impl\u00e9mentation possible de listes cha\u00een\u00e9es avec ce constructeur: Code \u00e0 recopier from cel import Cellule class Liste () : def __init__ ( self ) : \"\"\" Cr\u00e9e une liste vide. L\u2019attribut \u201chead\u201d est un objet Cellule qui d\u00e9finit la cellule en t\u00eate de la liste (premier \u00e9l\u00e9ment de la liste) \"\"\" self . head = None def estVide ( self ) : \"\"\" Renvoie True si la liste est vide et False sinon. \"\"\" return self . head == None def inserer ( self , element ) : \"\"\" Param\u00e8tres ---------- element : N\u2019importe quel type Description : L\u2019\u00e9l\u00e9ment \u00e0 ajouter en t\u00eate de la liste ------- Ajoute un \u00e9l\u00e9ment en t\u00eate de liste. \"\"\" nouvelle_cellule = Cellule ( element , self . head ) self . head = nouvelle_cellule def affiche_tete ( self ) : \"\"\" Renvoie la valeur de l\u2019\u00e9l\u00e9ment en t\u00eate de liste. \"\"\" if not ( self . estVide ()) : return self . head . valeur def affiche_queue ( self ) : \"\"\" Renvoie la liste priv\u00e9e de son premier \u00e9l\u00e9ment (queue de la liste) \"\"\" subList = None if not ( self . estVide ()) : subList = Liste () subList . head = self . head . suivant return subList def affiche_liste ( self ): l = \"|\" c = self . head while c != None : l = l + str ( c . valeur ) + \"|\" c = c . suivant return l On peut alors cr\u00e9er de nouvelles listes avec cette nouvelle impl\u00e9mentation. Exercice Cr\u00e9er la liste ordonn\u00e9e 3,2,1,0 avec la classe pr\u00e9c\u00e9dente. Cr\u00e9er une liste de 20 nombres al\u00e9atoires compris entre 0 et 100. Afficher sa t\u00eate puis sa queue. On veut enrichir la structure par de nouvelles m\u00e9thodes. Exercice D\u00e9finir la m\u00e9thode __len__(self) qui retourne la longueur de la liste. D\u00e9finir la m\u00e9thode __getitem__(self, position) qui permet d'acc\u00e9der \u00e0 l'\u00e9l\u00e9ment situ\u00e9 \u00e0 la position position de la liste si celui-ci existe! D\u00e9finir la m\u00e9thode __ajouter_fin__(self, elt) qui permet d'ajouter un \u00e9l\u00e9ment \u00e0 la liste... On peut envisager une multitude d'impl\u00e9mentation selon le choix du d\u00e9veloppeur m\u00eame si les primitives de l'interface liste ne changent pas vraiment... Nous retrouverons cette id\u00e9e dans la partie exercice... Exercice Impl\u00e9menter la fonction qui permet d'ins\u00e9rer dans la liste cha\u00een\u00e9e ci-dessus, un \u00e9l\u00e9ment \u00e0 une position quelconque... Les piles \u00b6 Pr\u00e9sentation \u00b6 La pile, comme la liste, permet de stocker des donn\u00e9es et y acc\u00e9der. La diff\u00e9rence se situe au niveau de l'ajout et de la suppression d'un \u00e9l\u00e9ment! On parle de mode LIFO (Last In, First Out, donc, dernier arriv\u00e9, premier sorti), c\u2019est- \u00e0-dire que le dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la structure sera le prochain \u00e9l\u00e9ment auquel on acc\u00e8dera. Les premiers \u00e9l\u00e9ments ayant \u00e9t\u00e9 ajout\u00e9s devront \u00ab attendre \u00bb que tous les \u00e9l\u00e9ments qui ont \u00e9t\u00e9 ajout\u00e9s apr\u00e8s eux soient sortis de la pile. Contrairement aux listes, on ne peut donc pas acc\u00e9der \u00e0 n\u2019importe quelle valeur de la structure (pas d\u2019index). Pour g\u00e9rer cette contrainte, on d\u00e9finit alors le sommet de la pile qui caract\u00e9rise l\u2019emplacement pour ajouter ou retirer des \u00e9l\u00e9ments. On peut s\u2019imaginer une pile d\u2019assiettes pour mieux se repr\u00e9senter mentalement cette structure. On ajoute des nouvelles assiettes au sommet de la pile, et quand on veut en retirer une, on est oblig\u00e9 de prendre celle situ\u00e9e au sommet. Interface d'une pile \u00b6 On peut d\u00e9finir au moins 6 primitives de cette structure de donn\u00e9es: Primitives de l'interface Commentaires creer_pile_vide() cr\u00e9e une pile vide est_vide(P) retourne un bool\u00e9en indiquant si la pile P est vide taille_pile(P) retourne la taille de la pile P empiler(P, e) ajoute l'\u00e9l\u00e9ment e au sommet de la pile depiler(P) retire l'\u00e9l\u00e9m\u00e9nt situ\u00e9 au sommet de la pile P affiche_sommet(P) affiche le sommet de la pile P sans le retirer {: .tabnsi :} Attention aux effets de bords! Les m\u00e9thodes d'affichage en particulier ne doivent pas modifier l'\u00e9tat de la pile. En effet, pour afficher tous les \u00e9l\u00e9ments de la liste, l'id\u00e9e naturelle serait de la d\u00e9piler enti\u00e8rement et d'afficher chaque \u00e9l\u00e9ment. Mais \u00e0 la fin, la pile serait vide! On appelle cela un effet de bord ! Les fonctions javascript en particulier cr\u00e9ent de nombreux effet de bords de par leur nature mais c'est voulu! ce que dit Wikip\u00e9dia... En informatique, une fonction est dite \u00e0 effet de bord (traduction mot \u00e0 mot de l'anglais side effect, dont le sens est plus proche d'effet secondaire) si elle modifie un \u00e9tat en dehors de son environnement local, c'est-\u00e0-dire a une interaction observable avec le monde ext\u00e9rieur autre que retourner une valeur. La struture Pile est utilis\u00e9e pour: conserver l'historique de navigation stocker des actions et les annuler ( Ctrl + Z et Ctrl + Y ) programmer une calculatrice en notation polonaise invers\u00e9e ... Impl\u00e9menter une pile \u00b6 On peut \u00e0 peu pr\u00e8s tout imaginer pour impl\u00e9menter la structure de pile... je vous en propose deux ici! Deux impl\u00e9mentations possibles paradigme fonctionnel paradigme orient\u00e9 objet def creer_pile_vide () : \"\"\" Cr\u00e9e une pile vide en s\u2019appuyant sur les listes Python \"\"\" return [] def taille_pile ( pile ): \"\"\" Param\u00e8tres ---------- pile : Une pile, telle que cr\u00e9\u00e9e dans ce module (utilisant une list Python) Description : La pile dont on veut conna\u00eetre le nombre d\u2019\u00e9l\u00e9ments ------- Renvoie le nombre d\u2019\u00e9l\u00e9ments contenus dans la pile. \"\"\" return len ( pile ) def est_vide ( pile ) : \"\"\" Param\u00e8tres ---------- pile : Une pile, telle que cr\u00e9\u00e9e dans ce module (utilisant une list Python) Description : La pile dont on souhaite d\u00e9terminer si elle est vide. ------- Renvoie ``True`` si la pile est vide, et ``False`` sinon \"\"\" return taille_pile ( pile ) == 0 def empiler ( pile , element ) : \"\"\" Param\u00e8tres ---------- pile : Une pile, telle que cr\u00e9\u00e9e dans ce module (utilisant une list Python) Description : La pile sur laquelle on souhaite empiler un \u00e9l\u00e9ment element : N\u2019importe quel type de donn\u00e9es. Description : L\u2019\u00e9l\u00e9ment \u00e0 empiler dans la pile. ------- Empile un \u00e9l\u00e9ment dans la pile pass\u00e9e en param\u00e8tres. \"\"\" pile . append ( element ) def depiler ( pile ) : \"\"\" Param\u00e8tres ---------- pile : Une pile, telle que cr\u00e9\u00e9e dans ce module (utilisant une list Python) Description : La pile sur laquelle on souhaite d\u00e9piler un \u00e9l\u00e9ment ------- D\u00e9pile (supprime de la pile) l\u2019\u00e9l\u00e9ment au sommet de la pile et le renvoie. \"\"\" if est_vide ( pile ) : return None else : return pile . pop () def affiche_sommet ( pile ) : \"\"\" Param\u00e8tres ---------- pile : Une pile, telle que cr\u00e9\u00e9e dans ce module (utilisant une list Python) Description : La pile dont on veut conna\u00eetre le sommet. ------- Renvoie le sommet de la pile (mais ne le d\u00e9pile pas). \"\"\" if est_vide ( pile ) : return None else : return pile [ len ( pile ) - 1 ] from cel import Cellule class Pile : def __init__ ( self ) : \"\"\" Cr\u00e9e une pile vide. L\u2019attribut \u201ctop\u201d est un objet Cellule qui d\u00e9finit la cellule constituant le \u201csommet\u201d de la pile. \"\"\" self . top = None def estVide ( self ) : \"\"\" Renvoie True si la pile est vide et False sinon. \"\"\" return self . top == None def sommet ( self ) : \"\"\" Renvoie la valeur de l\u2019\u00e9l\u00e9ment au sommet de la pile. \"\"\" if not ( self . estVide ()) : return self . top . valeur else : return None def empiler ( self , element ) : \"\"\" Param\u00e8tres ---------- element : est de n\u2019importe quel type Description : L\u2019\u00e9l\u00e9ment \u00e0 empiler sur la pile. ------- Ajoute un \u00e9l\u00e9ment au sommet de la pile. \"\"\" nouvelleCellule = Cellule ( element , self . top ) self . top = nouvelleCellule def depiler ( self ) : \"\"\" D\u00e9pile et renvoie l\u2019\u00e9l\u00e9ment situ\u00e9 au sommet de la pile. \"\"\" if not ( self . estVide ()) : valeur = self . top . valeur self . top = self . top . suivant return valeur else : return None def __len__ ( self ) : \"\"\" Renvoie le nombre d\u2019\u00e9l\u00e9ments de la pile. \"\"\" taille = 0 celluleCourante = self . top while ( celluleCourante != None ) : celluleCourante = celluleCourante . suivant taille += 1 return taille Les files \u00b6 Pr\u00e9sentation \u00b6 La file, comme la pile ou la liste, permet de stocker des donn\u00e9es et d\u2019y acc\u00e9der. La diff\u00e9rence se situe au niveau de l\u2019ajout et du retrait d\u2019\u00e9l\u00e9ments. On parle de mode FIFO (First in, First out, donc, premier arriv\u00e9, premier sorti), c\u2019est-\u00e0- dire que le premier \u00e9l\u00e9ment ayant \u00e9t\u00e9 ajout\u00e9 \u00e0 la structure sera le prochain \u00e9l\u00e9ment auquel on acc\u00e8dera. Les derniers \u00e9l\u00e9ments ajout\u00e9s devront \u00ab attendre \u00bb que tous les \u00e9l\u00e9ments ayant \u00e9t\u00e9 ajout\u00e9s avant eux soient sortis de la file. Contrairement aux listes, on ne peut donc pas acc\u00e9der \u00e0 n\u2019importe quelle valeur de la structure (pas d\u2019index). Pour g\u00e9rer cette contrainte, la pile est caract\u00e9ris\u00e9e par deux \u00ab emplacements \u00bb : la t\u00eate de file, sortie de la file (d\u00e9but de la structure), o\u00f9 les \u00e9l\u00e9ments sont retir\u00e9s ; le bout de file, entr\u00e9e de la file (fin de la structure), o\u00f9 les \u00e9l\u00e9ments sont ajout\u00e9s. On peut s\u2019imaginer une file d\u2019attente, dans un cin\u00e9ma par exemple. Les premi\u00e8res personnes \u00e0 pouvoir acheter leur place sont les premi\u00e8res arriv\u00e9es, et les nouveaux arrivants se placent au bout de la file. Interface d'une file \u00b6 Une file est une collection de donn\u00e9es. On appelle t\u00eate de file le premier \u00e9l\u00e9ment de la structure et queue de la file le dernier \u00e9l\u00e9ment. Quand un \u00e9l\u00e9ment est ajout\u00e9 \u00e0 la file, on l\u2019ajoute en queue de file et il devient la nouvelle queue de la file. Quand un \u00e9l\u00e9ment est retir\u00e9 de la file, on le s\u00e9lectionne \u00e0 la t\u00eate de la file et la nouvelle t\u00eate est l\u2019\u00e9l\u00e9ment qui suivait l\u2019ancienne t\u00eate. Lorsqu\u2019on ajoute un \u00e9l\u00e9ment \u00e0 une file vide, celui-ci est donc \u00e0 la fois la t\u00eate et le bout de la file. On peut d\u00e9finir au moins 6 primitives de cette struture de donn\u00e9es: Primitives de l'interface Commentaires creer_file_vide() cr\u00e9e une file vide est_vide(F) retourne un bool\u00e9en indiquant si la file F est vide taille_file(F) retourne la taille de la file F enfiler(F, e) ajoute l'\u00e9l\u00e9ment e \u00e0 la queue de F defiler(F) retire l'\u00e9l\u00e9m\u00e9nt situ\u00e9 \u00e0 la t\u00eate de la file F affiche_tete(F) affiche la t\u00eate de la file F sans la retirer {: .tabnsi :} La struture File est utilis\u00e9e pour: une imprimante dans sa gestion des documents \u00e0 imprimer mod\u00e9liser un jeu de bataille mod\u00e9liser une file d'attente dan sun cas plus g\u00e9n\u00e9ral... Impl\u00e9menter une file \u00b6 La diff\u00e9rence entre une pile et une file se trouve dans l'acc\u00e8s aux \u00e9l\u00e9ments. Du coup, il est facile de modifier les impl\u00e9mentations des piles pour trouver celles des files... La classe File... class Cellule (): def __init__ ( self , element , succ ): self . element = element self . succ = succ def get_element ( self ): return self . element def get_succ ( self ): return self . succ def set_succ ( self , cell ): self . succ = cell def __repr__ ( self ): return str ( self . element ) + '|' class File (): def __init__ ( self ): self . tete = None self . dernier = None def est_vide ( self ): return self . tete == None def enfiler ( self , element ): if not self . est_vide (): self . dernier . set_succ ( Cellule ( element , None )) self . dernier = self . dernier . get_succ () else : self . dernier = Cellule ( element , None ) self . tete = self . dernier def premier ( self ): assert not self . est_vide () return self . tete . get_element () def defiler ( self ): assert not self . est_vide () self . tete = self . tete . get_succ () def __repr__ ( self ): c = self . tete s = '' while not c is None : s = s + c . __repr__ () c = c . get_succ () return 'entree|' + s [:] + 'sortie' \u00c0 faire En vous inspirant de l'impl\u00e9mentation des piles, proposez une impl\u00e9mentation des files en fonctionnelle avec des listes python.", "title": "Structure de donn\u00e9es lin\u00e9aires"}, {"location": "term/stalin.html#structures-de-donnees-lineaires", "text": "", "title": "Structures de donn\u00e9es lin\u00e9aires"}, {"location": "term/stalin.html#introduction", "text": "Le programme Python poss\u00e8de un ensemble de types de base et de types structur\u00e9s rencontr\u00e9s en classe de premi\u00e8re: entier ( int ), flottants ( float ), cha\u00eene de caract\u00e8res, tuple, liste ou encore dictionnaires... Nous allons dans ce chapitre d\u00e9finir de nouveaux types abstraits , \u00e0 partir de son interface , qui rassemble l'ensemble des op\u00e9rations qui permettent de d\u00e9finir, de lire ou de modifier ces nouveaux objets. On fera bien la distinction entre interface et impl\u00e9mentation : la premi\u00e8re d\u00e9finit une op\u00e9ration, la seconde la code! Pour une m\u00eame interface, il peut exister plusieurs impl\u00e9mentations comme nous allons le d\u00e9couvrir dans ce chapitre!", "title": "Introduction"}, {"location": "term/stalin.html#les-listes", "text": "", "title": "Les listes"}, {"location": "term/stalin.html#presentation", "text": "Le type abstrait Liste Une liste est une s\u00e9quence ordonn\u00e9e d'\u00e9l\u00e9ments. Le tableau donne une interface minimale de ce type: Primitives de l'interface Commentaires creer_liste() cr\u00e9e une liste vide est_vide(L) retourne un bool\u00e9en indiquant si la liste est vide inserer(L, elt) ins\u00e9rer l'\u00e9l\u00e9ment elt dans la liste L affiche_tete(L) affiche le premier \u00e9l\u00e9ment de la liste L {: .tabnsi :} Remarquez qu'on ne pr\u00e9cise pas dans la derni\u00e8re instruction o\u00f9 est ins\u00e9r\u00e9 l'\u00e9l\u00e9ment: \u00e0 la fin? au d\u00e9but? On peut enrichir cette interface par de nouvelles primitives comme supprimer(L,e) , afficher_premier_elt(L) ou simplement une op\u00e9rations qui retourne le nombre d'\u00e9l\u00e9ments de cette liste...", "title": "Pr\u00e9sentation !"}, {"location": "term/stalin.html#comment-implementer-une-liste", "text": "Deux choix principaux pour l'impl\u00e9mentation d'une liste: soit par un tableau ( array ) o\u00f9 les \u00e9l\u00e9ments sont cons\u00e9cutifs en m\u00e9moire: dans le langage C, la taille des tableaux est d\u00e9finie pr\u00e9alablement pour allouer la place en m\u00e9moire et faire en sorte que les \u00e9l\u00e9ments soient \u00e0 des adresses voisines. soit par une liste cha\u00een\u00e9e: une liste est alors compos\u00e9e d'une t\u00eate et d'une queue! Les \u00e9l\u00e9ments d'une m\u00eame liste peuvent \u00eatre stock\u00e9s n'importe o\u00f9 dans la m\u00e9moire... Une diff\u00e9rence importante entre ces deux choix : dans un tableau, l\u2019 acc\u00e8s \u00e0 un \u00e9l\u00e9ment par son indice est rapide mais l\u2019 insertion est co\u00fbteuse et c\u2019est le contraire pour les listes cha\u00een\u00e9es ! La cellule (tete, queue) permet de cr\u00e9er ces derni\u00e8res listes!", "title": "Comment impl\u00e9menter une liste?"}, {"location": "term/stalin.html#une-premiere-tentative", "text": "Allez soyons fous! Faisons le choix d'impl\u00e9menter une liste cha\u00een\u00e9e par des listes (pr\u00e9cis\u00e9ment par des listes python...)!\ud83e\udd14 Reprenons le tableau enrichi de l'interface sur les listes: Interface Impl\u00e9mentation Primitives de l'interface Commentaires creer_liste_vide() cr\u00e9e une liste vide est_vide(L) retourne un bool\u00e9en indiquant si la liste est vide inserer(L, e) ins\u00e9rer l'\u00e9l\u00e9ment e \u00e0 la t\u00eate de la liste L affiche_tete(L) affiche la t\u00eate de la liste L affiche_queue(L) affiche la queue de la liste L affiche_liste(L) affiche tous les \u00e9l\u00e9ments de la liste def creer_liste_vide (): return [] def est_vide ( L ): return L == [] def inserer ( L , e ): return [ e , L ] def affiche_tete ( L ): if not est_vide ( L ): return L [ 0 ] def affiche_queue ( L ): if not est_vide ( L ): return L [ 1 ] def affiche_liste ( L ): aff = [] while not est_vide ( L ): aff . append ( L [ 0 ]) L = L [ 1 ] return aff On peut alors cr\u00e9er des listes avec les interfaces pr\u00e9c\u00e9dentes: Le code suivant... ... produit la liste cha\u00een\u00e9e suivante! l1 = creer_liste_vide () for i in range ( 4 ): l1 = inserer ( l1 , i ) [3, [2, [1, [0, []]]]] Remarquez que la construction d'une liste cha\u00een\u00e9e est r\u00e9cursive ! Comprenez que Python a sa propre interface pour les listes, celle que vous connaissez habituellement.", "title": "Une premi\u00e8re tentative..."}, {"location": "term/stalin.html#une-deuxieme-tentative", "text": "Puisque nous cr\u00e9eons de nouveaux objets d\u00e9finis par leur propri\u00e9t\u00e9 et leur m\u00e9thode, la programmation orient\u00e9e objet semble prendre toute sa place ici. L'objet n\u00e9cessaire \u00e0 la construcion de telles listes est d\u00e9finie par la classe Cellule propos\u00e9e ci-dessous: \"\"\" fichier cel.py Impl\u00e9mentation de la classe \u201cCellule\u201d Elle sera utilis\u00e9e pour les listes, les piles et les files. \"\"\" class Cellule () : def __init__ ( self , valeur = None , suivant = None ) : \"\"\" Param\u00e8tres ---------- valeur : type quelconque Description : Une valeur stock\u00e9e dans la cellule suivant : Un autre objet de type \u201cCellule\u201d Description : La cellule qui \u201csuit\u201d cette cellule selon l\u2019ordre d\u00e9fini par la structure. ---------- Cr\u00e9e une cellule avec une valeur et l\u2019adresse de la cellule qui la suit. \"\"\" self . valeur = valeur self . suivant = suivant Les attributs sont optionnels par d\u00e9faut. Voici maintenant une impl\u00e9mentation possible de listes cha\u00een\u00e9es avec ce constructeur: Code \u00e0 recopier from cel import Cellule class Liste () : def __init__ ( self ) : \"\"\" Cr\u00e9e une liste vide. L\u2019attribut \u201chead\u201d est un objet Cellule qui d\u00e9finit la cellule en t\u00eate de la liste (premier \u00e9l\u00e9ment de la liste) \"\"\" self . head = None def estVide ( self ) : \"\"\" Renvoie True si la liste est vide et False sinon. \"\"\" return self . head == None def inserer ( self , element ) : \"\"\" Param\u00e8tres ---------- element : N\u2019importe quel type Description : L\u2019\u00e9l\u00e9ment \u00e0 ajouter en t\u00eate de la liste ------- Ajoute un \u00e9l\u00e9ment en t\u00eate de liste. \"\"\" nouvelle_cellule = Cellule ( element , self . head ) self . head = nouvelle_cellule def affiche_tete ( self ) : \"\"\" Renvoie la valeur de l\u2019\u00e9l\u00e9ment en t\u00eate de liste. \"\"\" if not ( self . estVide ()) : return self . head . valeur def affiche_queue ( self ) : \"\"\" Renvoie la liste priv\u00e9e de son premier \u00e9l\u00e9ment (queue de la liste) \"\"\" subList = None if not ( self . estVide ()) : subList = Liste () subList . head = self . head . suivant return subList def affiche_liste ( self ): l = \"|\" c = self . head while c != None : l = l + str ( c . valeur ) + \"|\" c = c . suivant return l On peut alors cr\u00e9er de nouvelles listes avec cette nouvelle impl\u00e9mentation. Exercice Cr\u00e9er la liste ordonn\u00e9e 3,2,1,0 avec la classe pr\u00e9c\u00e9dente. Cr\u00e9er une liste de 20 nombres al\u00e9atoires compris entre 0 et 100. Afficher sa t\u00eate puis sa queue. On veut enrichir la structure par de nouvelles m\u00e9thodes. Exercice D\u00e9finir la m\u00e9thode __len__(self) qui retourne la longueur de la liste. D\u00e9finir la m\u00e9thode __getitem__(self, position) qui permet d'acc\u00e9der \u00e0 l'\u00e9l\u00e9ment situ\u00e9 \u00e0 la position position de la liste si celui-ci existe! D\u00e9finir la m\u00e9thode __ajouter_fin__(self, elt) qui permet d'ajouter un \u00e9l\u00e9ment \u00e0 la liste... On peut envisager une multitude d'impl\u00e9mentation selon le choix du d\u00e9veloppeur m\u00eame si les primitives de l'interface liste ne changent pas vraiment... Nous retrouverons cette id\u00e9e dans la partie exercice... Exercice Impl\u00e9menter la fonction qui permet d'ins\u00e9rer dans la liste cha\u00een\u00e9e ci-dessus, un \u00e9l\u00e9ment \u00e0 une position quelconque...", "title": "Une deuxi\u00e8me tentative!"}, {"location": "term/stalin.html#les-piles", "text": "", "title": "Les piles"}, {"location": "term/stalin.html#presentation_1", "text": "La pile, comme la liste, permet de stocker des donn\u00e9es et y acc\u00e9der. La diff\u00e9rence se situe au niveau de l'ajout et de la suppression d'un \u00e9l\u00e9ment! On parle de mode LIFO (Last In, First Out, donc, dernier arriv\u00e9, premier sorti), c\u2019est- \u00e0-dire que le dernier \u00e9l\u00e9ment ajout\u00e9 \u00e0 la structure sera le prochain \u00e9l\u00e9ment auquel on acc\u00e8dera. Les premiers \u00e9l\u00e9ments ayant \u00e9t\u00e9 ajout\u00e9s devront \u00ab attendre \u00bb que tous les \u00e9l\u00e9ments qui ont \u00e9t\u00e9 ajout\u00e9s apr\u00e8s eux soient sortis de la pile. Contrairement aux listes, on ne peut donc pas acc\u00e9der \u00e0 n\u2019importe quelle valeur de la structure (pas d\u2019index). Pour g\u00e9rer cette contrainte, on d\u00e9finit alors le sommet de la pile qui caract\u00e9rise l\u2019emplacement pour ajouter ou retirer des \u00e9l\u00e9ments. On peut s\u2019imaginer une pile d\u2019assiettes pour mieux se repr\u00e9senter mentalement cette structure. On ajoute des nouvelles assiettes au sommet de la pile, et quand on veut en retirer une, on est oblig\u00e9 de prendre celle situ\u00e9e au sommet.", "title": "Pr\u00e9sentation"}, {"location": "term/stalin.html#interface-dune-pile", "text": "On peut d\u00e9finir au moins 6 primitives de cette structure de donn\u00e9es: Primitives de l'interface Commentaires creer_pile_vide() cr\u00e9e une pile vide est_vide(P) retourne un bool\u00e9en indiquant si la pile P est vide taille_pile(P) retourne la taille de la pile P empiler(P, e) ajoute l'\u00e9l\u00e9ment e au sommet de la pile depiler(P) retire l'\u00e9l\u00e9m\u00e9nt situ\u00e9 au sommet de la pile P affiche_sommet(P) affiche le sommet de la pile P sans le retirer {: .tabnsi :} Attention aux effets de bords! Les m\u00e9thodes d'affichage en particulier ne doivent pas modifier l'\u00e9tat de la pile. En effet, pour afficher tous les \u00e9l\u00e9ments de la liste, l'id\u00e9e naturelle serait de la d\u00e9piler enti\u00e8rement et d'afficher chaque \u00e9l\u00e9ment. Mais \u00e0 la fin, la pile serait vide! On appelle cela un effet de bord ! Les fonctions javascript en particulier cr\u00e9ent de nombreux effet de bords de par leur nature mais c'est voulu! ce que dit Wikip\u00e9dia... En informatique, une fonction est dite \u00e0 effet de bord (traduction mot \u00e0 mot de l'anglais side effect, dont le sens est plus proche d'effet secondaire) si elle modifie un \u00e9tat en dehors de son environnement local, c'est-\u00e0-dire a une interaction observable avec le monde ext\u00e9rieur autre que retourner une valeur. La struture Pile est utilis\u00e9e pour: conserver l'historique de navigation stocker des actions et les annuler ( Ctrl + Z et Ctrl + Y ) programmer une calculatrice en notation polonaise invers\u00e9e ...", "title": "Interface d'une pile"}, {"location": "term/stalin.html#implementer-une-pile", "text": "On peut \u00e0 peu pr\u00e8s tout imaginer pour impl\u00e9menter la structure de pile... je vous en propose deux ici! Deux impl\u00e9mentations possibles paradigme fonctionnel paradigme orient\u00e9 objet def creer_pile_vide () : \"\"\" Cr\u00e9e une pile vide en s\u2019appuyant sur les listes Python \"\"\" return [] def taille_pile ( pile ): \"\"\" Param\u00e8tres ---------- pile : Une pile, telle que cr\u00e9\u00e9e dans ce module (utilisant une list Python) Description : La pile dont on veut conna\u00eetre le nombre d\u2019\u00e9l\u00e9ments ------- Renvoie le nombre d\u2019\u00e9l\u00e9ments contenus dans la pile. \"\"\" return len ( pile ) def est_vide ( pile ) : \"\"\" Param\u00e8tres ---------- pile : Une pile, telle que cr\u00e9\u00e9e dans ce module (utilisant une list Python) Description : La pile dont on souhaite d\u00e9terminer si elle est vide. ------- Renvoie ``True`` si la pile est vide, et ``False`` sinon \"\"\" return taille_pile ( pile ) == 0 def empiler ( pile , element ) : \"\"\" Param\u00e8tres ---------- pile : Une pile, telle que cr\u00e9\u00e9e dans ce module (utilisant une list Python) Description : La pile sur laquelle on souhaite empiler un \u00e9l\u00e9ment element : N\u2019importe quel type de donn\u00e9es. Description : L\u2019\u00e9l\u00e9ment \u00e0 empiler dans la pile. ------- Empile un \u00e9l\u00e9ment dans la pile pass\u00e9e en param\u00e8tres. \"\"\" pile . append ( element ) def depiler ( pile ) : \"\"\" Param\u00e8tres ---------- pile : Une pile, telle que cr\u00e9\u00e9e dans ce module (utilisant une list Python) Description : La pile sur laquelle on souhaite d\u00e9piler un \u00e9l\u00e9ment ------- D\u00e9pile (supprime de la pile) l\u2019\u00e9l\u00e9ment au sommet de la pile et le renvoie. \"\"\" if est_vide ( pile ) : return None else : return pile . pop () def affiche_sommet ( pile ) : \"\"\" Param\u00e8tres ---------- pile : Une pile, telle que cr\u00e9\u00e9e dans ce module (utilisant une list Python) Description : La pile dont on veut conna\u00eetre le sommet. ------- Renvoie le sommet de la pile (mais ne le d\u00e9pile pas). \"\"\" if est_vide ( pile ) : return None else : return pile [ len ( pile ) - 1 ] from cel import Cellule class Pile : def __init__ ( self ) : \"\"\" Cr\u00e9e une pile vide. L\u2019attribut \u201ctop\u201d est un objet Cellule qui d\u00e9finit la cellule constituant le \u201csommet\u201d de la pile. \"\"\" self . top = None def estVide ( self ) : \"\"\" Renvoie True si la pile est vide et False sinon. \"\"\" return self . top == None def sommet ( self ) : \"\"\" Renvoie la valeur de l\u2019\u00e9l\u00e9ment au sommet de la pile. \"\"\" if not ( self . estVide ()) : return self . top . valeur else : return None def empiler ( self , element ) : \"\"\" Param\u00e8tres ---------- element : est de n\u2019importe quel type Description : L\u2019\u00e9l\u00e9ment \u00e0 empiler sur la pile. ------- Ajoute un \u00e9l\u00e9ment au sommet de la pile. \"\"\" nouvelleCellule = Cellule ( element , self . top ) self . top = nouvelleCellule def depiler ( self ) : \"\"\" D\u00e9pile et renvoie l\u2019\u00e9l\u00e9ment situ\u00e9 au sommet de la pile. \"\"\" if not ( self . estVide ()) : valeur = self . top . valeur self . top = self . top . suivant return valeur else : return None def __len__ ( self ) : \"\"\" Renvoie le nombre d\u2019\u00e9l\u00e9ments de la pile. \"\"\" taille = 0 celluleCourante = self . top while ( celluleCourante != None ) : celluleCourante = celluleCourante . suivant taille += 1 return taille", "title": "Impl\u00e9menter une pile"}, {"location": "term/stalin.html#les-files", "text": "", "title": "Les files"}, {"location": "term/stalin.html#presentation_2", "text": "La file, comme la pile ou la liste, permet de stocker des donn\u00e9es et d\u2019y acc\u00e9der. La diff\u00e9rence se situe au niveau de l\u2019ajout et du retrait d\u2019\u00e9l\u00e9ments. On parle de mode FIFO (First in, First out, donc, premier arriv\u00e9, premier sorti), c\u2019est-\u00e0- dire que le premier \u00e9l\u00e9ment ayant \u00e9t\u00e9 ajout\u00e9 \u00e0 la structure sera le prochain \u00e9l\u00e9ment auquel on acc\u00e8dera. Les derniers \u00e9l\u00e9ments ajout\u00e9s devront \u00ab attendre \u00bb que tous les \u00e9l\u00e9ments ayant \u00e9t\u00e9 ajout\u00e9s avant eux soient sortis de la file. Contrairement aux listes, on ne peut donc pas acc\u00e9der \u00e0 n\u2019importe quelle valeur de la structure (pas d\u2019index). Pour g\u00e9rer cette contrainte, la pile est caract\u00e9ris\u00e9e par deux \u00ab emplacements \u00bb : la t\u00eate de file, sortie de la file (d\u00e9but de la structure), o\u00f9 les \u00e9l\u00e9ments sont retir\u00e9s ; le bout de file, entr\u00e9e de la file (fin de la structure), o\u00f9 les \u00e9l\u00e9ments sont ajout\u00e9s. On peut s\u2019imaginer une file d\u2019attente, dans un cin\u00e9ma par exemple. Les premi\u00e8res personnes \u00e0 pouvoir acheter leur place sont les premi\u00e8res arriv\u00e9es, et les nouveaux arrivants se placent au bout de la file.", "title": "Pr\u00e9sentation"}, {"location": "term/stalin.html#interface-dune-file", "text": "Une file est une collection de donn\u00e9es. On appelle t\u00eate de file le premier \u00e9l\u00e9ment de la structure et queue de la file le dernier \u00e9l\u00e9ment. Quand un \u00e9l\u00e9ment est ajout\u00e9 \u00e0 la file, on l\u2019ajoute en queue de file et il devient la nouvelle queue de la file. Quand un \u00e9l\u00e9ment est retir\u00e9 de la file, on le s\u00e9lectionne \u00e0 la t\u00eate de la file et la nouvelle t\u00eate est l\u2019\u00e9l\u00e9ment qui suivait l\u2019ancienne t\u00eate. Lorsqu\u2019on ajoute un \u00e9l\u00e9ment \u00e0 une file vide, celui-ci est donc \u00e0 la fois la t\u00eate et le bout de la file. On peut d\u00e9finir au moins 6 primitives de cette struture de donn\u00e9es: Primitives de l'interface Commentaires creer_file_vide() cr\u00e9e une file vide est_vide(F) retourne un bool\u00e9en indiquant si la file F est vide taille_file(F) retourne la taille de la file F enfiler(F, e) ajoute l'\u00e9l\u00e9ment e \u00e0 la queue de F defiler(F) retire l'\u00e9l\u00e9m\u00e9nt situ\u00e9 \u00e0 la t\u00eate de la file F affiche_tete(F) affiche la t\u00eate de la file F sans la retirer {: .tabnsi :} La struture File est utilis\u00e9e pour: une imprimante dans sa gestion des documents \u00e0 imprimer mod\u00e9liser un jeu de bataille mod\u00e9liser une file d'attente dan sun cas plus g\u00e9n\u00e9ral...", "title": "Interface d'une file"}, {"location": "term/stalin.html#implementer-une-file", "text": "La diff\u00e9rence entre une pile et une file se trouve dans l'acc\u00e8s aux \u00e9l\u00e9ments. Du coup, il est facile de modifier les impl\u00e9mentations des piles pour trouver celles des files... La classe File... class Cellule (): def __init__ ( self , element , succ ): self . element = element self . succ = succ def get_element ( self ): return self . element def get_succ ( self ): return self . succ def set_succ ( self , cell ): self . succ = cell def __repr__ ( self ): return str ( self . element ) + '|' class File (): def __init__ ( self ): self . tete = None self . dernier = None def est_vide ( self ): return self . tete == None def enfiler ( self , element ): if not self . est_vide (): self . dernier . set_succ ( Cellule ( element , None )) self . dernier = self . dernier . get_succ () else : self . dernier = Cellule ( element , None ) self . tete = self . dernier def premier ( self ): assert not self . est_vide () return self . tete . get_element () def defiler ( self ): assert not self . est_vide () self . tete = self . tete . get_succ () def __repr__ ( self ): c = self . tete s = '' while not c is None : s = s + c . __repr__ () c = c . get_succ () return 'entree|' + s [:] + 'sortie' \u00c0 faire En vous inspirant de l'impl\u00e9mentation des piles, proposez une impl\u00e9mentation des files en fonctionnelle avec des listes python.", "title": "Impl\u00e9menter une file"}, {"location": "term/termnsi.html", "text": "Terminale NSI \u00b6 Programme de la classe \u00b6 Le programme de la sp\u00e9cialit\u00e9 NSI en classe de terminale ici Les documents d'accompagnement l\u00e0", "title": "Accueil"}, {"location": "term/termnsi.html#terminale-nsi", "text": "", "title": "Terminale NSI"}, {"location": "term/termnsi.html#programme-de-la-classe", "text": "Le programme de la sp\u00e9cialit\u00e9 NSI en classe de terminale ici Les documents d'accompagnement l\u00e0", "title": "Programme de la classe"}, {"location": "tp/jeu_mastermind.html", "text": "Mon projet sur le mastermind Introduction Le mastermind est un jeu de soci\u00e9t\u00e9 fort connu notamment des plus anciens...(et oui ! il fallait s'occuper...) Le principe est simple: un joueur1 choisit une combinaison de quatre couleurs qu'il garde secret et son camarade, le joueur2, a 10 coups pour la retrouver. \u00c0 chaque proposition, le joueur1 indique au joueur 2 le nombre de: boules pr\u00e9sentes dans sa combinaison (par la pr\u00e9sence de petits pions blancs) boules plac\u00e9es au bont endroit sans indiquer lesquelles!(par la pr\u00e9sence de petits pions noirs) On se propose de fabriquer une \u00e9mulation du jeu afin de pouvoir jouer avec un ordinateur. Programmation du jeu Poser des conditions: \u00b6 On va faire en sorte pour simplifier que le joueur1 doit proposer une combinaison de couleurs diff\u00e9rentes: le joueur2 pourra n\u00e9amoins proposer n'importe quelle proposition... En revanche, il ne pourra proposer que 10 coups! Jouer en console: \u00b6", "title": "Jeu mastermind"}, {"location": "tp/jeu_mastermind.html#poser-des-conditions", "text": "On va faire en sorte pour simplifier que le joueur1 doit proposer une combinaison de couleurs diff\u00e9rentes: le joueur2 pourra n\u00e9amoins proposer n'importe quelle proposition... En revanche, il ne pourra proposer que 10 coups!", "title": "Poser des conditions:"}, {"location": "tp/jeu_mastermind.html#jouer-en-console", "text": "", "title": "Jouer en console:"}]}