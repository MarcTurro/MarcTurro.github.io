{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Site de l'enseignement de la sp\u00e9cialit\u00e9 NSI au lyc\u00e9e Jean Baptiste de baudre 47000 AGEN \u00b6","title":"Accueil"},{"location":"index.html#site-de-lenseignement-de-la-specialite-nsi-au-lycee-jean-baptiste-de-baudre-47000-agen","text":"","title":"Site de l'enseignement de la sp\u00e9cialit\u00e9 NSI au lyc\u00e9e Jean Baptiste de baudre 47000 AGEN"},{"location":"exempleCode.html","text":"Premi\u00e8re NSI \u00b6 Programme de la classe \u00b6 Project layout \u00b6 Normalement \u00e7a marche! Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Est-ce aussi simple que cela? Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Code pour faire des annotations, (1) consectetur adipiscing elit. 1. :man_raising_hand: I'm an annotation! I can contain `code`, __formatted text__, images, ... basically anything that can be expressed in Markdown. Tab 1 Tab 2 C'est trop cool, (1) consectetur adipiscing elit. :man_raising_hand: I'm an annotation! J'ai compris! (1){.annotate } 1. :woman_raising_hand: I'm an annotation as well! bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] terminale NSI \u00b6 Note Information the user should notice even if skimming. Tip Optional information to help a user be more successful. Important Essential information required for user success. Caution Negative potential consequences of an action. Warning Dangerous certain consequences of an action. Programme de la classe \u00b6 import tensorflow as tf The range () function is used to generate a sequence of numbers. Project layout \u00b6","title":"Premi\u00e8re NSI"},{"location":"exempleCode.html#premiere-nsi","text":"","title":"Premi\u00e8re NSI"},{"location":"exempleCode.html#programme-de-la-classe","text":"","title":"Programme de la classe"},{"location":"exempleCode.html#project-layout","text":"Normalement \u00e7a marche! Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Est-ce aussi simple que cela? Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Code pour faire des annotations, (1) consectetur adipiscing elit. 1. :man_raising_hand: I'm an annotation! I can contain `code`, __formatted text__, images, ... basically anything that can be expressed in Markdown. Tab 1 Tab 2 C'est trop cool, (1) consectetur adipiscing elit. :man_raising_hand: I'm an annotation! J'ai compris! (1){.annotate } 1. :woman_raising_hand: I'm an annotation as well! bubble_sort.py def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Project layout"},{"location":"exempleCode.html#terminale-nsi","text":"Note Information the user should notice even if skimming. Tip Optional information to help a user be more successful. Important Essential information required for user success. Caution Negative potential consequences of an action. Warning Dangerous certain consequences of an action.","title":"terminale NSI"},{"location":"exempleCode.html#programme-de-la-classe_1","text":"import tensorflow as tf The range () function is used to generate a sequence of numbers.","title":"Programme de la classe"},{"location":"exempleCode.html#project-layout_1","text":"","title":"Project layout"},{"location":"premnsi.html","text":"Premi\u00e8re NSI \u00b6 Programme de la classe \u00b6 Algorithme Programmer en Python Le web dynamique R\u00e9seau","title":"Premi\u00e8re NSI"},{"location":"premnsi.html#premiere-nsi","text":"","title":"Premi\u00e8re NSI"},{"location":"premnsi.html#programme-de-la-classe","text":"Algorithme Programmer en Python Le web dynamique R\u00e9seau","title":"Programme de la classe"},{"location":"res_prem.html","text":"Ressources de la classe de premi\u00e8re \u00b6","title":"Res prem"},{"location":"res_prem.html#ressources-de-la-classe-de-premiere","text":"","title":"Ressources de la classe de premi\u00e8re"},{"location":"res_term.html","text":"Ressources de la classe de Terminale \u00b6","title":"Res term"},{"location":"res_term.html#ressources-de-la-classe-de-terminale","text":"","title":"Ressources de la classe de Terminale"},{"location":"termnsi.html","text":"terminale NSI \u00b6 Note Information the user should notice even if skimming. Tip Optional information to help a user be more successful. Important Essential information required for user success. Caution Negative potential consequences of an action. Warning Dangerous certain consequences of an action. Programme de la classe \u00b6 import tensorflow as tf The range () function is used to generate a sequence of numbers. Project layout \u00b6","title":"Terminale NSI"},{"location":"termnsi.html#terminale-nsi","text":"Note Information the user should notice even if skimming. Tip Optional information to help a user be more successful. Important Essential information required for user success. Caution Negative potential consequences of an action. Warning Dangerous certain consequences of an action.","title":"terminale NSI"},{"location":"termnsi.html#programme-de-la-classe","text":"import tensorflow as tf The range () function is used to generate a sequence of numbers.","title":"Programme de la classe"},{"location":"termnsi.html#project-layout","text":"","title":"Project layout"},{"location":"prem/images_numeriques.html","text":"Travail sur les images num\u00e9riques \u00b6 Gen\u00e8se \u00b6 Les images num\u00e9riques sont comme toutes donn\u00e9es informatiques, des objets d\u00e9finis selon une certaines normes: l'extension de ce fichier pr\u00e9cise notamment comment est structur\u00e9 ce fichier. Le cas des images au format .png est r\u00e9v\u00e9lateur: standard d\u00e9velopp\u00e9 par le W3C( comme Html, Css ou Javascript...), il est particuli\u00e8rement adapt\u00e9 pour publier des images sur des sites internet. Il trouve ses origines dans la volont\u00e9 de concurrencer le fichier compress\u00e9 .gif , dont le propri\u00e9taire r\u00e9clamait les droits d'utilisations. Une image Portable Network Graphics (PNG) est un format ouvert, on peut donc explorer son contenu! \u00c0 faire R\u00e9cup\u00e9rer l'image firefox.png . Ouvrez l'image avec les routines Python habituelles, en mode lecture binaire et visualisez l'ent\u00eate du fichier( programme donn\u00e9 juste apr\u00e8s). D\u00e9terminer le nombre d'octets constituants ce fichier. Le comparer \u00e0 la valeur obtenue par un clic droit sur l'image puis propri\u00e9t\u00e9s. Trouvez d'autres fichiers .png et v\u00e9rifier qu'ils ont tous la m\u00eame signature(ils commencent tous par la m\u00eame s\u00e9rie d'octets qui est leur signature...).Affichez la liste des octets dans votre console.Donnez cette signature. #Rappel sur les ouvertures en lecture ou ecritures de fichiers fichier_src = open ( \"........\" , \"rb\" ) #Completer avec le chemin vers l'image #l'ouverture en mode rb ouvre le fichier en binaire (octet...) listeOctet = [ elt for elt in fichier_src . read ()] print ( len ( listeOctet )) print ( listeOctet ) fichier_src . close () En g\u00e9n\u00e9ral, les images num\u00e9riques sont des images matricielles , par opposition aux images vectorielles d\u00e9finies par des courbes math\u00e9matiques. Les fichiers .svg d\u00e9velopp\u00e9s par le W3C, sont des images vectorielles tr\u00e8s adapt\u00e9es \u00e0 la construction de logo, comme celui de Firefox, d\u00e9composable en \u00e9l\u00e9ments g\u00e9om\u00e9triques. \u00c0 faire Observez le logo Firefox d\u00e9fini sous .svg \u00e0 cette adresse et trouvez sa description .svg (clic droit-> code source de la page). Zoomez(touche Crtl + molette ). Ouvrez le fichier firefox.png dans le navigateur Firefox(clic droit-> ouvrir avec...). Zoomez et comparez avec la manipulation pr\u00e9c\u00e9dente. Quelle diff\u00e9rence entre une image matricielle et vectorielle? Image matricielle \u00b6 Image matricielle Une photo, une image est donc d\u00e9finie g\u00e9n\u00e9ralement par un tableau de valeurs, appel\u00e9e matrice , d\u00e9finissant ainsi chaque pixel de cette image. On retrouvera en g\u00e9n\u00e9ral: des images en niveaux de gris en mode L : lorsque les couleurs sont cod\u00e9es sur 8 bits, c'est-\u00e0-dire 1 octet, il y a donc 256 niveaux de quantifications possibles allant du 0(noir) au blanc(255). des images couleurs cod\u00e9es en RGB pour Red Green Blue: chaque couleur est cod\u00e9e sur 8 bits soit un octet. un canal alpha permettant de contr\u00f4ler la transparence d'une image, notamment lorsque l'on souhaite superposer l'une sur l'autre. Dans une image matricielle contenant des pixels, le premier pixel est celui en haut \u00e0 gauche et le dernier, celui en bas \u00e0 droite. Puis on parcourt une image ligne par ligne, de gauche \u00e0 droite. Ceci est important pour comprendre comment on peut lire ou \u00e9crire sur une image! On entend par: \u00c0 retenir lire un pixel, donner la valeur de sa couleur qui se pr\u00e9sente sous diff\u00e9rentes formes (entier, triplet ou quadruplet d'entiers) selon le mode de repr\u00e9sentation (L, RBG ou RGBA) \u00e9crire un pixel, d\u00e9finir sa couleur par la donn\u00e9e d'un entier, d'un triplet ou un quadruplet selon le mode de repr\u00e9sentation... \u00c0 faire Dans une image couleur o\u00f9 chaque couleur est cod\u00e9e sur un octet, combien de couleurs diff\u00e9rentes peut-on obtenir? Enfin du Python! \u00b6 Cette section propose de manipuler des images num\u00e9riques \u00e0 l'aide d'un biblioth\u00e8que Python appel\u00e9e PIL . \u00c0 faire Installer la biblioth\u00e8que PILLOW dans Thonny(lors de l'import il faudra l'appeler sous sous ancien nom PIL...). Il s'agit de traduire en Python l'id\u00e9e de: Les routines ! ouvrir un fichier image puppy.png en un fichier objet img sur lequel on travaille; d\u00e9terminer les propri\u00e9t\u00e9s de cette image( mode,size,format ); cr\u00e9er une nouvelle image; lire et \u00e9crire sur une image (attention on lit dans l'une on \u00e9crit dans l'autre!) montrer ou enregistrer l'image obtenue. Pour illustrer les commandes python r\u00e9pondant \u00e0 ces besoins, nous allons utiliser la photo puppy.png (\u00e0 r\u00e9cup\u00e9rer \u00e0 l'endroit habituel...). Attention tous les programmes doivent avoir en en-t\u00eate, l'import des biblioth\u00e8ques: from PIL import Image Ouvrir une image et lire des informations \u00b6 from PIL import Image #Ouverture de l'image existante #Le chemin relatif doit \u00eatre donn\u00e9 im = Image . open ( \"..\\Images\\puppy.png\" ) #On peut conna\u00eetre les donn\u00e9es print ( im . mode , im . size , im . format ) im . close () L'objet im n'est pas une image mais un objet tampon sur lequel nous travaillerons avant de le fermer. \u00c0 faire Quelles sont les caract\u00e9ristiques de l'image puppy.png (mode, taille, format)? Cr\u00e9ation d'une nouvelle image \u00b6 from PIL import Image #Ouverture d'une nouvelle image IM = Image . new ( 'L' , ( 750 , 200 )) IM . save ( \"NouvImage1.png\" ) IM . close () \u00c0 faire Donner le mode et la taille de l'image cr\u00e9\u00e9e pr\u00e9c\u00e9demment Lire la valeur d'intensit\u00e9 d'un pixel \u00b6 from PIL import Image #Ouverture de l'image existante #Le chemin relatif doit \u00eatre donn\u00e9 im = Image . open ( \"..\\Images\\puppy.png\" ) pix = im . getpixel (( 20 , 30 )) print ( pix ) im . close () Attention , la m\u00e9thode getpixel prend en param\u00e8tre un couple correspondant aux coordonn\u00e9es (colonne, ligne) du pixel dans l'image: dans l'exemple, 20 i\u00e8me colonne et 30i\u00e8me ligne(il faut bien s\u00fbr s'assurer que ce pixel existe...) \u00c0 faire En s'utilisant le code pr\u00e9c\u00e9dent, donner l'intensit\u00e9 des pixels \\((105,42)\\) de l'image puppy.png . quelles sont les coordonn\u00e9es du dernier pixel de l'image(en bas \u00e0 droite).Donnez son intensit\u00e9 \u00c9crire l'intensit\u00e9 d'un pixel \u00b6 from PIL import Image #Ouverture d'une nouvelle image IM = Image . new ( 'L' , ( 750 , 200 )) IM . putpixel (( 425 , 100 ), 150 ) IM . save ( \"NouvImage2.png\" ) IM . close () La m\u00e9thode putpixel s'applique \u00e0 l'objet IM et prend en param\u00e8tres l'endroit o\u00f9 l'on veut \u00e9crire (c,l) (425 et 100 dans notre exemple) et la valeur d'intensit\u00e9 p (150 dans l'exemple). Attention dans le cas d'une image couleur l'intensit\u00e9 est un triplet (r,g,b) voire (r,g,b,a) . Parcourir une image pixel par pixel \u00b6 Pour parcourir une image pixel par pixel, on va utiliser une double boucle: l'une pour parcourir les lignes , l'autre pour parcourir les colonnes. Le code suivant: ouvre une image en lecture cr\u00e9e une nouvelle image de caract\u00e9ristiques identiques parcoure et lit la valeur d'intensit\u00e9 de chaque pixel de l'image initiale parcoure et \u00e9cris au m\u00eame endroit sur l'image finale la valeur captur\u00e9e \u00e0 laquelle on ajoute 100 (on travaille modulo 26 pour rester dans la plage \\([0;255]\\) ). on enregistre l'image ainsi cr\u00e9\u00e9e. from PIL import Image #Ouverture de l'image #Le chemin relatif doit \u00eatre donn\u00e9 imInit = Image . open ( \"..\\Images\\puppy.png\" ) #Ouverture d'une nouvelle image #M\u00eame mode et taille que l'image d\u00e9j\u00e0 ouverte ImFin = Image . new ( imInit . mode , imInit . size ) #La double boucle permet de parcourir l'image de haut en bas de gauche \u00e0 droite for l in range ( imInit . size [ 1 ]): #l comme ligne for c in range ( imInit . size [ 0 ]): #c comme colone pix = imInit . getpixel (( c , l )) # getpixel capture la valeur de couleur du pixel (x,y) #on fait un get sur im: c'est une lecture! ImFin . putpixel (( c , l ), ( pix + 100 ) % 256 ) #putpixel colore le pixel (x,y) de l'image IM avec la valeur de (pix + 100)%256 #on fait donc une \u00e9criture sur Im. ImFin . show () ImFin . save ( \"ImageTranslate100.png\" ) imInit . close () ImFin . close () \u00c0 faire Construire de la m\u00eame fa\u00e7on les images translat\u00e9es de 10 pixels et de 255 pixels. Pensez \u00e0 changer le nom de sauvegarde sinon vous \u00e9craserez les fichiers pr\u00e9c\u00e9demment construits. Le coin des exercices \u00b6 En n'utilisant que les routines pr\u00e9c\u00e9dentes (il y a des m\u00e9thodes de la biblioth\u00e8que Pil qui permettent de r\u00e9aliser directement les transformations demand\u00e9es...), r\u00e9alisez les exercices suivants. \u00c0 faire Cr\u00e9er une image en niveaux de gris de dimension 500 sur 100 pixels o\u00f9 chaque pixel a une intensit\u00e9 \u00e9gale \u00e0 un nombre al\u00e9atoire entre 0 et 255. On sauvegardera sous le nom hasard.png cette image. Cr\u00e9er une image en couleur de dimension 500 sur 100 pixels o\u00f9 chaque pixel a une intensit\u00e9 de rouge, de vert et de bleu est \u00e9gale \u00e0 un nombre al\u00e9atoire entre 0 et 255. On sauvegardera cette image sous le nom hasardcouleur.png . \u00c0 faire Cr\u00e9er l'image puppynegative.png obtenu \u00e0 partir de l'image puppy.png en transformant le pixel p en le pixel 255 - p . \u00c0 faire Cr\u00e9er une image de dimension 600(width) sur 400(height) pixels qui est le drapeau fran\u00e7ais.On sauvegardera cette image sous le nom drapeau.png . \u00c0 faire Cr\u00e9er une image en niveaux de gris de dimension 500 sur 100 pixels o\u00f9 chaque pixel de ligne de rang pair est blanc et les autres noir. On sauvegardera cette image sous le nom ligneblanche.png . \u00c0 faire L'image Firefox.png est une image couleur qui est donc la superposition de trois images: l'une contient les composantes de rouge, l'autre de vert et la derni\u00e8re de bleu. Construire ces trois images que vous sauvegarderez sous le nom filtreRougeFirefox.png ,.... \u00c0 faire Construire l'image obtenue par une sym\u00e9trie verticale. On sauvegardera l'image sous le nom puppyV.png . Construire l'image obtenue par une sym\u00e9trie horizontale.On sauvegardera l'image sous le nom puppyH.png . \u00c0 faire Effet de seuillage : L'id\u00e9e est d'effectuer un seuillage sur l'image en construisant une nouvelle image selon le principe suivant: tous les pixels dont l'intensit\u00e9 est inf\u00e9rieure ou \u00e9gal \u00e0 127 sont transform\u00e9s en pixel d'intensit\u00e9 0 et ceux d'intensit\u00e9 strictement sup\u00e9rieur \u00e0 127 transform\u00e9s en pixel d'intensit\u00e9 1..On sauvegardera l'image sous le nom puppySeuil127.png . \u00c0 faire M\u00eame exercice que pr\u00e9c\u00e9demment mais le choix du seuil \\(s\\) est fait par l'utilisateur..On sauvegardera l'image sous le nom puppySeuilS.png . \u00c0 faire M\u00eame exercice que pr\u00e9c\u00e9demment mais n seuil seront cr\u00e9\u00e9s.On sauvegardera l'image sous le nom puppyQuantificationN.png . \u00c0 faire \u00c0 l'aide la biblioth\u00e8que matplotlib que vous connaissez d\u00e9j\u00e0, construire l'histogramme des intensit\u00e9s de niveaux de gris de l'image puppy.png : en abscisse, on trouve une intensit\u00e9 \\(i\\) de 0 \u00e0 255 et en ordonn\u00e9e le nombre de pixels d'intensit\u00e9 \\(i\\) dans l'image.","title":"Travail sur les images num\u00e9riques"},{"location":"prem/images_numeriques.html#travail-sur-les-images-numeriques","text":"","title":"Travail sur les images num\u00e9riques"},{"location":"prem/images_numeriques.html#genese","text":"Les images num\u00e9riques sont comme toutes donn\u00e9es informatiques, des objets d\u00e9finis selon une certaines normes: l'extension de ce fichier pr\u00e9cise notamment comment est structur\u00e9 ce fichier. Le cas des images au format .png est r\u00e9v\u00e9lateur: standard d\u00e9velopp\u00e9 par le W3C( comme Html, Css ou Javascript...), il est particuli\u00e8rement adapt\u00e9 pour publier des images sur des sites internet. Il trouve ses origines dans la volont\u00e9 de concurrencer le fichier compress\u00e9 .gif , dont le propri\u00e9taire r\u00e9clamait les droits d'utilisations. Une image Portable Network Graphics (PNG) est un format ouvert, on peut donc explorer son contenu! \u00c0 faire R\u00e9cup\u00e9rer l'image firefox.png . Ouvrez l'image avec les routines Python habituelles, en mode lecture binaire et visualisez l'ent\u00eate du fichier( programme donn\u00e9 juste apr\u00e8s). D\u00e9terminer le nombre d'octets constituants ce fichier. Le comparer \u00e0 la valeur obtenue par un clic droit sur l'image puis propri\u00e9t\u00e9s. Trouvez d'autres fichiers .png et v\u00e9rifier qu'ils ont tous la m\u00eame signature(ils commencent tous par la m\u00eame s\u00e9rie d'octets qui est leur signature...).Affichez la liste des octets dans votre console.Donnez cette signature. #Rappel sur les ouvertures en lecture ou ecritures de fichiers fichier_src = open ( \"........\" , \"rb\" ) #Completer avec le chemin vers l'image #l'ouverture en mode rb ouvre le fichier en binaire (octet...) listeOctet = [ elt for elt in fichier_src . read ()] print ( len ( listeOctet )) print ( listeOctet ) fichier_src . close () En g\u00e9n\u00e9ral, les images num\u00e9riques sont des images matricielles , par opposition aux images vectorielles d\u00e9finies par des courbes math\u00e9matiques. Les fichiers .svg d\u00e9velopp\u00e9s par le W3C, sont des images vectorielles tr\u00e8s adapt\u00e9es \u00e0 la construction de logo, comme celui de Firefox, d\u00e9composable en \u00e9l\u00e9ments g\u00e9om\u00e9triques. \u00c0 faire Observez le logo Firefox d\u00e9fini sous .svg \u00e0 cette adresse et trouvez sa description .svg (clic droit-> code source de la page). Zoomez(touche Crtl + molette ). Ouvrez le fichier firefox.png dans le navigateur Firefox(clic droit-> ouvrir avec...). Zoomez et comparez avec la manipulation pr\u00e9c\u00e9dente. Quelle diff\u00e9rence entre une image matricielle et vectorielle?","title":"Gen\u00e8se"},{"location":"prem/images_numeriques.html#image-matricielle","text":"Image matricielle Une photo, une image est donc d\u00e9finie g\u00e9n\u00e9ralement par un tableau de valeurs, appel\u00e9e matrice , d\u00e9finissant ainsi chaque pixel de cette image. On retrouvera en g\u00e9n\u00e9ral: des images en niveaux de gris en mode L : lorsque les couleurs sont cod\u00e9es sur 8 bits, c'est-\u00e0-dire 1 octet, il y a donc 256 niveaux de quantifications possibles allant du 0(noir) au blanc(255). des images couleurs cod\u00e9es en RGB pour Red Green Blue: chaque couleur est cod\u00e9e sur 8 bits soit un octet. un canal alpha permettant de contr\u00f4ler la transparence d'une image, notamment lorsque l'on souhaite superposer l'une sur l'autre. Dans une image matricielle contenant des pixels, le premier pixel est celui en haut \u00e0 gauche et le dernier, celui en bas \u00e0 droite. Puis on parcourt une image ligne par ligne, de gauche \u00e0 droite. Ceci est important pour comprendre comment on peut lire ou \u00e9crire sur une image! On entend par: \u00c0 retenir lire un pixel, donner la valeur de sa couleur qui se pr\u00e9sente sous diff\u00e9rentes formes (entier, triplet ou quadruplet d'entiers) selon le mode de repr\u00e9sentation (L, RBG ou RGBA) \u00e9crire un pixel, d\u00e9finir sa couleur par la donn\u00e9e d'un entier, d'un triplet ou un quadruplet selon le mode de repr\u00e9sentation... \u00c0 faire Dans une image couleur o\u00f9 chaque couleur est cod\u00e9e sur un octet, combien de couleurs diff\u00e9rentes peut-on obtenir?","title":"Image matricielle"},{"location":"prem/images_numeriques.html#enfin-du-python","text":"Cette section propose de manipuler des images num\u00e9riques \u00e0 l'aide d'un biblioth\u00e8que Python appel\u00e9e PIL . \u00c0 faire Installer la biblioth\u00e8que PILLOW dans Thonny(lors de l'import il faudra l'appeler sous sous ancien nom PIL...). Il s'agit de traduire en Python l'id\u00e9e de: Les routines ! ouvrir un fichier image puppy.png en un fichier objet img sur lequel on travaille; d\u00e9terminer les propri\u00e9t\u00e9s de cette image( mode,size,format ); cr\u00e9er une nouvelle image; lire et \u00e9crire sur une image (attention on lit dans l'une on \u00e9crit dans l'autre!) montrer ou enregistrer l'image obtenue. Pour illustrer les commandes python r\u00e9pondant \u00e0 ces besoins, nous allons utiliser la photo puppy.png (\u00e0 r\u00e9cup\u00e9rer \u00e0 l'endroit habituel...). Attention tous les programmes doivent avoir en en-t\u00eate, l'import des biblioth\u00e8ques: from PIL import Image","title":"Enfin du Python!"},{"location":"prem/images_numeriques.html#ouvrir-une-image-et-lire-des-informations","text":"from PIL import Image #Ouverture de l'image existante #Le chemin relatif doit \u00eatre donn\u00e9 im = Image . open ( \"..\\Images\\puppy.png\" ) #On peut conna\u00eetre les donn\u00e9es print ( im . mode , im . size , im . format ) im . close () L'objet im n'est pas une image mais un objet tampon sur lequel nous travaillerons avant de le fermer. \u00c0 faire Quelles sont les caract\u00e9ristiques de l'image puppy.png (mode, taille, format)?","title":"Ouvrir une image et lire des informations"},{"location":"prem/images_numeriques.html#creation-dune-nouvelle-image","text":"from PIL import Image #Ouverture d'une nouvelle image IM = Image . new ( 'L' , ( 750 , 200 )) IM . save ( \"NouvImage1.png\" ) IM . close () \u00c0 faire Donner le mode et la taille de l'image cr\u00e9\u00e9e pr\u00e9c\u00e9demment","title":"Cr\u00e9ation d'une nouvelle image"},{"location":"prem/images_numeriques.html#lire-la-valeur-dintensite-dun-pixel","text":"from PIL import Image #Ouverture de l'image existante #Le chemin relatif doit \u00eatre donn\u00e9 im = Image . open ( \"..\\Images\\puppy.png\" ) pix = im . getpixel (( 20 , 30 )) print ( pix ) im . close () Attention , la m\u00e9thode getpixel prend en param\u00e8tre un couple correspondant aux coordonn\u00e9es (colonne, ligne) du pixel dans l'image: dans l'exemple, 20 i\u00e8me colonne et 30i\u00e8me ligne(il faut bien s\u00fbr s'assurer que ce pixel existe...) \u00c0 faire En s'utilisant le code pr\u00e9c\u00e9dent, donner l'intensit\u00e9 des pixels \\((105,42)\\) de l'image puppy.png . quelles sont les coordonn\u00e9es du dernier pixel de l'image(en bas \u00e0 droite).Donnez son intensit\u00e9","title":"Lire la valeur d'intensit\u00e9 d'un pixel"},{"location":"prem/images_numeriques.html#ecrire-lintensite-dun-pixel","text":"from PIL import Image #Ouverture d'une nouvelle image IM = Image . new ( 'L' , ( 750 , 200 )) IM . putpixel (( 425 , 100 ), 150 ) IM . save ( \"NouvImage2.png\" ) IM . close () La m\u00e9thode putpixel s'applique \u00e0 l'objet IM et prend en param\u00e8tres l'endroit o\u00f9 l'on veut \u00e9crire (c,l) (425 et 100 dans notre exemple) et la valeur d'intensit\u00e9 p (150 dans l'exemple). Attention dans le cas d'une image couleur l'intensit\u00e9 est un triplet (r,g,b) voire (r,g,b,a) .","title":"\u00c9crire l'intensit\u00e9 d'un pixel"},{"location":"prem/images_numeriques.html#parcourir-une-image-pixel-par-pixel","text":"Pour parcourir une image pixel par pixel, on va utiliser une double boucle: l'une pour parcourir les lignes , l'autre pour parcourir les colonnes. Le code suivant: ouvre une image en lecture cr\u00e9e une nouvelle image de caract\u00e9ristiques identiques parcoure et lit la valeur d'intensit\u00e9 de chaque pixel de l'image initiale parcoure et \u00e9cris au m\u00eame endroit sur l'image finale la valeur captur\u00e9e \u00e0 laquelle on ajoute 100 (on travaille modulo 26 pour rester dans la plage \\([0;255]\\) ). on enregistre l'image ainsi cr\u00e9\u00e9e. from PIL import Image #Ouverture de l'image #Le chemin relatif doit \u00eatre donn\u00e9 imInit = Image . open ( \"..\\Images\\puppy.png\" ) #Ouverture d'une nouvelle image #M\u00eame mode et taille que l'image d\u00e9j\u00e0 ouverte ImFin = Image . new ( imInit . mode , imInit . size ) #La double boucle permet de parcourir l'image de haut en bas de gauche \u00e0 droite for l in range ( imInit . size [ 1 ]): #l comme ligne for c in range ( imInit . size [ 0 ]): #c comme colone pix = imInit . getpixel (( c , l )) # getpixel capture la valeur de couleur du pixel (x,y) #on fait un get sur im: c'est une lecture! ImFin . putpixel (( c , l ), ( pix + 100 ) % 256 ) #putpixel colore le pixel (x,y) de l'image IM avec la valeur de (pix + 100)%256 #on fait donc une \u00e9criture sur Im. ImFin . show () ImFin . save ( \"ImageTranslate100.png\" ) imInit . close () ImFin . close () \u00c0 faire Construire de la m\u00eame fa\u00e7on les images translat\u00e9es de 10 pixels et de 255 pixels. Pensez \u00e0 changer le nom de sauvegarde sinon vous \u00e9craserez les fichiers pr\u00e9c\u00e9demment construits.","title":"Parcourir une image pixel par pixel"},{"location":"prem/images_numeriques.html#le-coin-des-exercices","text":"En n'utilisant que les routines pr\u00e9c\u00e9dentes (il y a des m\u00e9thodes de la biblioth\u00e8que Pil qui permettent de r\u00e9aliser directement les transformations demand\u00e9es...), r\u00e9alisez les exercices suivants. \u00c0 faire Cr\u00e9er une image en niveaux de gris de dimension 500 sur 100 pixels o\u00f9 chaque pixel a une intensit\u00e9 \u00e9gale \u00e0 un nombre al\u00e9atoire entre 0 et 255. On sauvegardera sous le nom hasard.png cette image. Cr\u00e9er une image en couleur de dimension 500 sur 100 pixels o\u00f9 chaque pixel a une intensit\u00e9 de rouge, de vert et de bleu est \u00e9gale \u00e0 un nombre al\u00e9atoire entre 0 et 255. On sauvegardera cette image sous le nom hasardcouleur.png . \u00c0 faire Cr\u00e9er l'image puppynegative.png obtenu \u00e0 partir de l'image puppy.png en transformant le pixel p en le pixel 255 - p . \u00c0 faire Cr\u00e9er une image de dimension 600(width) sur 400(height) pixels qui est le drapeau fran\u00e7ais.On sauvegardera cette image sous le nom drapeau.png . \u00c0 faire Cr\u00e9er une image en niveaux de gris de dimension 500 sur 100 pixels o\u00f9 chaque pixel de ligne de rang pair est blanc et les autres noir. On sauvegardera cette image sous le nom ligneblanche.png . \u00c0 faire L'image Firefox.png est une image couleur qui est donc la superposition de trois images: l'une contient les composantes de rouge, l'autre de vert et la derni\u00e8re de bleu. Construire ces trois images que vous sauvegarderez sous le nom filtreRougeFirefox.png ,.... \u00c0 faire Construire l'image obtenue par une sym\u00e9trie verticale. On sauvegardera l'image sous le nom puppyV.png . Construire l'image obtenue par une sym\u00e9trie horizontale.On sauvegardera l'image sous le nom puppyH.png . \u00c0 faire Effet de seuillage : L'id\u00e9e est d'effectuer un seuillage sur l'image en construisant une nouvelle image selon le principe suivant: tous les pixels dont l'intensit\u00e9 est inf\u00e9rieure ou \u00e9gal \u00e0 127 sont transform\u00e9s en pixel d'intensit\u00e9 0 et ceux d'intensit\u00e9 strictement sup\u00e9rieur \u00e0 127 transform\u00e9s en pixel d'intensit\u00e9 1..On sauvegardera l'image sous le nom puppySeuil127.png . \u00c0 faire M\u00eame exercice que pr\u00e9c\u00e9demment mais le choix du seuil \\(s\\) est fait par l'utilisateur..On sauvegardera l'image sous le nom puppySeuilS.png . \u00c0 faire M\u00eame exercice que pr\u00e9c\u00e9demment mais n seuil seront cr\u00e9\u00e9s.On sauvegardera l'image sous le nom puppyQuantificationN.png . \u00c0 faire \u00c0 l'aide la biblioth\u00e8que matplotlib que vous connaissez d\u00e9j\u00e0, construire l'histogramme des intensit\u00e9s de niveaux de gris de l'image puppy.png : en abscisse, on trouve une intensit\u00e9 \\(i\\) de 0 \u00e0 255 et en ordonn\u00e9e le nombre de pixels d'intensit\u00e9 \\(i\\) dans l'image.","title":"Le coin des exercices"}]}